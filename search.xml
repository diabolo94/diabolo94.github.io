<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[個人學習記錄]]></title>
      <url>/3018/01/19/studynote/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Personal-Notes-About-Everything"><a href="#Personal-Notes-About-Everything" class="headerlink" title="Personal Notes About Everything."></a>Personal Notes About Everything.</h1><blockquote>
<p>Learning Journey is my way.</p>
</blockquote>
<p>This is my personal study notes for whatever that I like the most in my life time.<br><a id="more"></a></p>
<ul>
<li>Items marked with <code>(-)</code> are still works in progress.</li>
<li>Items marked with <code>(el)</code> means external links.</li>
</ul>
<h2 id="Books’-Notes"><a href="#Books’-Notes" class="headerlink" title="Books’ Notes"></a>Books’ Notes</h2><h3 id="匯編語言第三版-王爽"><a href="#匯編語言第三版-王爽" class="headerlink" title="匯編語言第三版-王爽"></a>匯編語言第三版-王爽</h3><ul>
<li><a href="">1. 第一章基礎知識</a></li>
<li><a href="">2. 第二章寄存器</a></li>
<li><a href="https://diabolo94.github.io/2017/11/20/debugexp/#more">2.1 Debug指令的運用</a></li>
</ul>
<h3 id="加密解密-第三版"><a href="#加密解密-第三版" class="headerlink" title="加密解密 第三版"></a>加密解密 第三版</h3><ul>
<li>字符集和字符編碼</li>
</ul>
<h3 id="深入理解計算機"><a href="#深入理解計算機" class="headerlink" title="深入理解計算機"></a>深入理解計算機</h3><ul>
<li>深入理解計算機第七章筆記-鏈接</li>
</ul>
<h3 id="The-Hitchhiker’s-Guide-to-Python"><a href="#The-Hitchhiker’s-Guide-to-Python" class="headerlink" title="The Hitchhiker’s Guide to Python"></a>The Hitchhiker’s Guide to Python</h3><ul>
<li><a href="https://diabolo94.github.io/2018/01/02/writegreatpycode01/">如何寫出優雅的代碼</a><h2 id="Course’s-Notes"><a href="#Course’s-Notes" class="headerlink" title="Course’s Notes"></a>Course’s Notes</h2></li>
</ul>
<h2 id="CTF-Notes"><a href="#CTF-Notes" class="headerlink" title="CTF Notes"></a>CTF Notes</h2><h3 id="Binary終極指南"><a href="#Binary終極指南" class="headerlink" title="Binary終極指南"></a>Binary終極指南</h3><h2 id="工具使筆記"><a href="#工具使筆記" class="headerlink" title="工具使筆記"></a>工具使筆記</h2><ul>
<li><a href="https://diabolo94.github.io/2018/01/01/GDB-tutorial/">GDB調試工具指南</a><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MIT LICENSE.</div><div class="line">COPYRIGHT (C) <span class="number">2017</span> <span class="keyword">Diabolo </span><span class="keyword">Jenq </span>Ning</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>Started on 2017/11/22 </p>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Guide </tag>
            
            <tag> Security </tag>
            
            <tag> Forensic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[30日改變自己的挑戰之路(1)0x00 - 進入LGMS的計劃書]]></title>
      <url>/2018/03/29/30challengePart1day0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x00-揚帆起航"><a href="#0x00-揚帆起航" class="headerlink" title="0x00 揚帆起航"></a>0x00 揚帆起航</h1><p>在看了Matt Chtts的TED演講<a href="https://www.ted.com/talks/matt_cutts_try_something_new_for_30_days/discussion?CMP=#t-188079" target="_blank" rel="noopener">Try Something for newday</a> 以及香港90後創業家Felix Wong的<a href="http://www.blog.felixwky.com/" target="_blank" rel="noopener">文章</a>後，我決定從這一刻開始更加善用我接下來的時間同時把內心最煩惱的事拋棄掉。<a id="more"></a>在畢業後過去的一年，我一直為自己未能交上FYP一事而深感懊悔，雖然期間都有花很大努力去彌補，但完成的動力依然不夠，這個問題也直接導致我有找工作的困難。正好今天我見到了LGMS正在招聘Ethical Hacker, 這對我來說是一個非常好的機會，但我連文憑都沒拿到，那我又能憑什麼進入這間公司呢？</p>
<p>在這裡首先感謝Felix Wong的那個<a href="https://www.facebook.com/felixwky/videos/1864439750484305/" target="_blank" rel="noopener">不要再沉沒在失敗的小影片</a>給了我完完全全繼續改變的動力。</p>
<h1 id="0x01-想進這間公司的原因"><a href="#0x01-想進這間公司的原因" class="headerlink" title="0x01 想進這間公司的原因"></a>0x01 想進這間公司的原因</h1><ul>
<li>我曾經學過Digital Forenic &amp; Security有關的知識，我希望在這間公司裡面做有關的工作，完成自己的夢想。</li>
<li>我想靠自己的能力去減輕家庭的負擔。</li>
<li>開始償還PTPTN，不再拖延。</li>
<li>相信這間公司會為自己的人生帶來更精彩的價值。</li>
<li>希望在工作的同時，能幫到自己開始將某一部分的錢拿來儲蓄，為幾個月後的30日創業做準備。</li>
</ul>
<p>所以這30天內，我會一步一步的為進入這間公司而盡量做好準備。今天是Day 0，所以我覺得最應該做的事就是清楚的了解自己對技術掌握的要求。</p>
<p>因此，我會在30天內重新整理自己學習中以及已經完成的技術。我的技能表如下(這30天裡面會一直更新)，而這些技能的掌握都會成為這30天的內容之一。</p>
<h1 id="0x02-技能表"><a href="#0x02-技能表" class="headerlink" title="0x02 技能表"></a>0x02 技能表</h1><ul>
<li>Git</li>
<li>Assembly Language</li>
<li>C</li>
<li>Python</li>
<li>Linux Command &amp; Shell Scriping</li>
<li>Tiddlywiki for my personal wiki</li>
<li>Markdown Writing for Tecnical blog</li>
<li>提高專注力的方法 </li>
<li>高效學習的方法</li>
<li>時間管理的方法</li>
<li>Linux and Windows Exploit Writring</li>
</ul>
<h1 id="0x03-30天內會做的一些習慣與事情。"><a href="#0x03-30天內會做的一些習慣與事情。" class="headerlink" title="0x03 30天內會做的一些習慣與事情。"></a>0x03 30天內會做的一些習慣與事情。</h1><ul>
<li>學習技術並寫成筆記。</li>
<li>了解LGMS公司。</li>
<li>起床時間為4:30, 在用10分鐘安排一天的事, 而在8點到2點之間必須讓自己大腦進入深層睡眠。</li>
<li>閱讀Felix Wong或其他鼓勵自己的文章加寫進Tiddly筆記。</li>
<li>做輕量的運動，如上下樓梯10分鐘。</li>
<li>認真的寫好一篇Resume。</li>
<li>再次聯絡自己的大學, 去把之前的所有成績取回來。</li>
<li>冥想</li>
</ul>
<h1 id="0x04-Day0-我完成了什麼"><a href="#0x04-Day0-我完成了什麼" class="headerlink" title="0x04 Day0 我完成了什麼?"></a>0x04 Day0 我完成了什麼?</h1><p>日期：March 29 2018</p>
<ul>
<li>記錄Secwiki 59&amp;60裡面對自己有價值的內容。</li>
<li>看Matt Chtts的TED演講。</li>
<li>寫30日改變自己的挑戰之路(1) :0x00 進入LGMS的計劃書</li>
<li>完成簡單做8,9,10,如何培养简单做(ZTD)中的十个好习惯以及简单做(ZTD)的十个好习惯总结的閱讀筆記。</li>
<li>閱讀Seeking Wisdom，如何系統的提高自己的智慧?</li>
<li>讀完高效學習一書及完成其筆記。</li>
<li>完成連猴子都能懂的Git指南學習筆記。</li>
<li>看翻生武林第19集和Pokemon Go來鼓勵自己。</li>
<li>誠懇的對父母坦白自己該做的改變以及會做的行動。</li>
<li>回顧今天的自己。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 30日改變自己的挑戰之路(1) </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 30日改變自己的挑戰之路(1) </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分析ELF文件Simplesection.o]]></title>
      <url>/2018/03/03/analystsimple/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="文件代碼"><a href="#文件代碼" class="headerlink" title="文件代碼"></a>文件代碼</h1><p>今天我們來學一下怎樣分析一個ELF文件。<code>xxx.o</code>在Linux裡面的文件格式是屬於可重定位文件(Relocatable File)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SimpleSection.c */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format,...)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> global_init_var =<span class="number">84</span>; <span class="comment">//</span></div><div class="line"><span class="keyword">int</span> global_uninit_var;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> static_var =<span class="number">85</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> static_var2;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> b;</div><div class="line">    funcl1(static_var + static_var2 + a + b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用Objdump"><a href="#使用Objdump" class="headerlink" title="使用Objdump"></a>使用Objdump</h1><p>Objdump工具可用來查看目標文件的結構和內容。在這裡我會先用<code>-h</code>來看看這個ELF各個段的基本資訊。</p>
<p>輸入<code>objdump -h SimpleSection.o</code><br><img src="https://s13.postimg.org/ndzfenxef/objdump.jpg" alt=""></p>
<p>根據上圖我們可以知道一個ELF的可重定位文件可分為的段如下：</p>
<ul>
<li>.text 代碼段</li>
<li>.data 數據段</li>
<li>.bss  Block Started by Symbol</li>
<li>.rodata</li>
<li>.comment</li>
<li>.note.GNU-stack</li>
<li>.eh_frame</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Python函數]]></title>
      <url>/2018/03/01/pythonlearn2/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-什麼是函數"><a href="#0x01-什麼是函數" class="headerlink" title="0x01 什麼是函數"></a>0x01 什麼是函數</h1><p>函數就是一段代碼裡面可重複使用的部分，我們在寫程式的時候常常都會遇到一些需要重用的功能，若將其功能寫成一個函數，那我們就不必要寫多一次該代碼，只需直接套用該函數就可以了。</p>
<h1 id="0x02-函數的定義規則"><a href="#0x02-函數的定義規則" class="headerlink" title="0x02 函數的定義規則"></a>0x02 函數的定義規則</h1><ul>
<li>以def關鍵字眼為開頭，後面接的是你要定義的函數名稱和圓括號()。</li>
<li>任何在這函數裡面會出現的參數和自變量需放在圓括號裡面，因為裡面是讓你來定義參數的。</li>
<li>函數第一行可以選擇性使用文檔字符串對所存放的函數加以說明。</li>
<li>函數內容會以冒號:開始並且在下一行後開始縮進。</li>
<li>return [表達式] 代表你會結束該函數，選擇性地返回一個數值給調用方，若沒有表達式return就是說你返回的是None。</li>
</ul>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight flix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">函數名（参數列表）</span></span>:</div><div class="line">    函數体</div></pre></td></tr></table></figure>
<h1 id="0x03-例子"><a href="#0x03-例子" class="headerlink" title="0x03 例子"></a>0x03 例子</h1><p>比如說我們要生成一個有指定邊界的斐波那契數列的函數:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span> <span class="comment"># write Fibonacci series up to n</span></div><div class="line"><span class="meta">... </span>    <span class="string">"""Print a Fibonacci series up to n."""</span></div><div class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</div><div class="line"><span class="meta">... </span>        print(a, end=<span class="string">' '</span>)</div><div class="line"><span class="meta">... </span>        a, b = b, a+b</div><div class="line"><span class="meta">... </span>    print()</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>    <span class="comment"># write Fibonacci series up to n</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Now call the function we just defined:</span></div><div class="line"><span class="meta">... </span>fib(<span class="number">2000</span>)</div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span> <span class="number">1597</span></div></pre></td></tr></table></figure>
<p>在上述的函數裡面，所有變量的賦值會存在局部符號表(Local Symbol Table)裡面。變量引用會先檢查局部符號表，接著就是包含函數的局部符號表，跟在後面是全局符號表，最後則是內置名字表。因此，全局變量是不能直接在函數裡面賦值（要用global語句來命名）。</p>
<p>一個函數定義會在當前的符號表裡面引入函數名字。而函數名字的值（函數體）會被Python的解釋器認為是用戶自定義的類型，之後可賦予其他的名字（變量名字以及被當作其他函數來使用。</p>
<p>比如說這樣：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fib</div><div class="line">&lt;function fib at <span class="number">10042</span>ed0&gt;</div><div class="line">&gt;&gt;&gt; f = fib</div><div class="line">&gt;&gt;&gt; f(<span class="number">100</span>)</div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></div></pre></td></tr></table></figure>
<h1 id="0x04-深入了解如何定義函數"><a href="#0x04-深入了解如何定義函數" class="headerlink" title="0x04 深入了解如何定義函數"></a>0x04 深入了解如何定義函數</h1><p>現在我們就可以開始深入了解3種形式的函數使用方式。方式有這3種類型：</p>
<ul>
<li>默認參數</li>
<li>關鍵字參數</li>
<li>可變參數列表</li>
<li>Lambda形式</li>
</ul>
<h2 id="默認參數"><a href="#默認參數" class="headerlink" title="默認參數"></a>默認參數</h2><p>在Python裡面最常見的默認函數的形式多數含有一個或多個的實際參數，這使到該函數在被呼叫的時候可以使用更少已被定義的實際函數。我們來看看下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask_ok</span><span class="params">(prompt, retries=<span class="number">4</span>, complaint=<span class="string">'Yes or no, please!'</span>)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        ok = input(prompt)</div><div class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'y'</span>, <span class="string">'ye'</span>, <span class="string">'yes'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'n'</span>, <span class="string">'no'</span>, <span class="string">'nop'</span>, <span class="string">'nope'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        retries = retries - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> OSError(<span class="string">'uncooperative user'</span>)</div><div class="line">        print(complaint)</div></pre></td></tr></table></figure></p>
<p>此函數的調用方式：</p>
<ul>
<li>只給出必要的参數<code>ask_ok(&#39;Do you really want to quit?&#39;)</code></li>
<li>給出一個可選的参數<code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li>
<li>給出所有的參數<code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, only yes or no!&#39;)</code></li>
</ul>
<p>調用函數的時候，如果沒有傳遞參數，也會使用默認的參數。以下是沒有傳入參數的實際例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">(name,age = <span class="number">24</span>)</span>:</span></div><div class="line">    print(<span class="string">"Name: "</span>, name)</div><div class="line">    print(<span class="string">"Age: "</span>, age)</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line">printinfo(age = <span class="number">10</span>,name=<span class="string">"Bean Bean"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="關鍵字參數"><a href="#關鍵字參數" class="headerlink" title="關鍵字參數"></a>關鍵字參數</h2><p>也可以把函數裡面的參數設定成某個固定的關鍵字來進行調用(Keyword = Value)。</p>
<p>例子：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def parrot(voltage, <span class="attribute">state</span>=<span class="string">'a stiff'</span>, <span class="attribute">action</span>=<span class="string">'voom'</span>, <span class="attribute">type</span>=<span class="string">'Norwegian Blue'</span>):</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-- This parrot wouldn't"</span>, action, <span class="attribute">end</span>=<span class="string">' '</span>)</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"if you put"</span>, voltage, <span class="string">"volts through it."</span>)</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-- Lovely plumage, the"</span>, type)</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-- It's"</span>, state, <span class="string">"!"</span>)</div></pre></td></tr></table></figure></p>
<p>在這例子裡面，可以接受一個必選參數 (voltage) 以及三個可選參數 (state, action, 和 type)。可以用以下任何一個方法來進行調用:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">parrot(<span class="number">5000</span>)                                          <span class="comment"># 1 positional argument</span></div><div class="line">parrot(voltage=<span class="number">5000</span>)                                  <span class="comment"># 1 keyword argument</span></div><div class="line">parrot(voltage=<span class="number">5000000</span>, action=<span class="string">'VOOOOOM'</span>)             <span class="comment"># 2 keyword arguments</span></div><div class="line">parrot(action=<span class="string">'VOOOOOM'</span>, voltage=<span class="number">5000000</span>)             <span class="comment"># 2 keyword arguments</span></div><div class="line">parrot(<span class="string">'a million'</span>, <span class="string">'bereft of life'</span>, <span class="string">'jump'</span>)         <span class="comment"># 3 positional arguments</span></div><div class="line">parrot(<span class="string">'a thousand'</span>, <span class="keyword">state</span>=<span class="string">'pushing up the daisies'</span>)  <span class="comment"># 1 positional, 1 keyword</span></div></pre></td></tr></table></figure></p>
<p>那麼無效的調用例子又是怎樣的呢？<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">parrot<span class="params">()</span>                     <span class="comment"># required argument missing</span></div><div class="line">parrot<span class="params">(<span class="attr">voltage</span>=5.0, 'dead')</span>  <span class="comment"># non-keyword argument after a keyword argument</span></div><div class="line">parrot<span class="params">(110, <span class="attr">voltage</span>=220)</span>     <span class="comment"># duplicate value for the same argument</span></div><div class="line">parrot<span class="params">(<span class="attr">actor</span>='John Cleese')</span>  <span class="comment"># unknown keyword argument</span></div></pre></td></tr></table></figure></p>
<p>另外，關鍵字的參數也必須跟隨在位置參數的後面。在傳遞期間，所有的關鍵字參數必須與函數可接受的某個參數互相匹配。而且任何参数都不可以多次赋值。下面的示例由于這種限制而無法呼叫該函數:</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span>:</div><div class="line">...     <span class="keyword">pass</span></div><div class="line">...</div><div class="line">&gt;&gt;&gt; <span class="function"><span class="keyword">function</span><span class="params">(0, a=0)</span></span></div><div class="line">Traceback (most recent <span class="keyword">call</span> last):</div><div class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</div><div class="line">TypeError: <span class="function"><span class="keyword">function</span><span class="params">()</span></span> got multiple values for keyword argument <span class="string">'a'</span></div></pre></td></tr></table></figure>
<p>在函數調用期間，關鍵字函數可以被使用來確定傳入的參數值。另外調用時候參數的順序與聲明時不一致也沒關係，因為Python解釋器會自動匹配相關參數值。</p>
<p>來看下這個程式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以解釋函數</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span><span class="params">(str)</span>:</span></div><div class="line">   <span class="string">"Print any entered String"</span></div><div class="line">   <span class="keyword">print</span> (str);</div><div class="line">   <span class="keyword">return</span>;</div><div class="line"> </div><div class="line"><span class="comment">#调用printme函數</span></div><div class="line">printme(str = <span class="string">"Pikachu is cute!"</span>);</div><div class="line"></div><div class="line">結果</div><div class="line">Pikachu <span class="keyword">is</span> cute!</div></pre></td></tr></table></figure></p>
<h2 id="暫時沒用"><a href="#暫時沒用" class="headerlink" title="暫時沒用"></a>暫時沒用</h2><p>在你引入一個像<code>**name</code>的參數時候，它會接收一個<a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" target="_blank" rel="noopener">字典 Maping Types  - dict</a>。該字典包含了所有未出現在形式參數列表中的關鍵字參數。著</p>
<p>该字典包含了所有未出现在形式参数列表中的关键字参数。这里可能还会组合使用一个形如 <em>name （下一小节详细介绍） 的形式参数，它接收一个元组（下一节中会详细介绍），包含了所有没有出现在形式参数列表中的参数值（ </em>name 必须在 **name 之前出现）。 例如，我们这样定义一个函数:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def cheeseshop(kind, <span class="number">*a</span>rguments, **keywords):</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-- Do you have any"</span>, kind, <span class="string">"?"</span>)</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-- I'm sorry, we're all out of"</span>, kind)</div><div class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> arguments:</div><div class="line">        <span class="builtin-name">print</span>(arg)</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"-"</span> * 40)</div><div class="line">    keys = sorted(keywords.keys())</div><div class="line">    <span class="keyword">for</span> kw <span class="keyword">in</span> keys:</div><div class="line">        <span class="builtin-name">print</span>(kw, <span class="string">":"</span>, keywords[kw])</div></pre></td></tr></table></figure>
<h2 id="可變參數列表"><a href="#可變參數列表" class="headerlink" title="可變參數列表"></a>可變參數列表</h2><p>讓函數調用可變個數的參數。這些參數會被包裝進一個元組。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_multiple_items</span><span class="params">(file, separator, *args)</span>:</span></div><div class="line">    file.write(separator.join(args))</div><div class="line">    </div><div class="line"><span class="string">"""出現在 *args 後面的參數是關鍵字參數"""</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">concat</span><span class="params">(*args, sep=<span class="string">"/"</span>)</span>:</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">return</span> sep.join(args)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>)</div><div class="line"><span class="string">'earth/mars/venus'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>, sep=<span class="string">"."</span>)</div><div class="line"><span class="string">'earth.mars.venus'</span></div></pre></td></tr></table></figure>
<h2 id="lambda-函數"><a href="#lambda-函數" class="headerlink" title="lambda 函數"></a>lambda 函數</h2><p>【暫時沒有用到】</p>
<ul>
<li>參數列表的分析</li>
<li>函數註解</li>
</ul>
<h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h1><p><a href="http://www.runoob.com/python3/python3-function.html" target="_blank" rel="noopener">http://www.runoob.com/python3/python3-function.html</a><br><a href="http://docs.pythontab.com/python/python3.4/controlflow.html#tut-functions" target="_blank" rel="noopener">http://docs.pythontab.com/python/python3.4/controlflow.html#tut-functions</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解計算機第九章筆記]]></title>
      <url>/2018/01/30/op9/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-虛擬內存"><a href="#0x01-虛擬內存" class="headerlink" title="0x01 虛擬內存"></a>0x01 虛擬內存</h1><p>虛擬內存是硬件異常，硬件地址翻譯，主存，磁盤文件和內核軟件完美的交互，它為每個進程提供了一個大的，一致且私有的空間。它具備了3個非常重要的能力：</p>
<ul>
<li>將主存看成是一個儲存在磁盤上的地址空間的高速緩存，在主存中只保存活動區域，並更具需要在磁盤和主存自己來回傳送數據，達到高效使用內存的效果。</li>
<li>為每個進程提供一致的地址空間。</li>
<li>保護了每個進程的地址空間不被其他進程破壞。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Deep Understanding of Operating System </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Operating System </tag>
            
            <tag> Virtual Memory </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[關於Malloc函數的點點滴滴]]></title>
      <url>/2018/01/29/malloctutorial/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-什麼是malloc"><a href="#0x01-什麼是malloc" class="headerlink" title="0x01 什麼是malloc?"></a>0x01 什麼是malloc?</h1><p>malloc函數是C/C++語言裡面用來管理內存的函數。在中文裡面稱為動態內存分配(memory allocation)。它的格式是長這個樣子的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;.<span class="comment">//size_t 是你想定義的size的種類，例如Int。而size則是你想設置使用多少Byte的內存。</span></div></pre></td></tr></table></figure></p>
<p>這個函數要實現的功能就是分配一段可連續使用的內存在系統裡面，但必須具備以下的要求：</p>
<ul>
<li>malloc分配的內存大小必須至少為size參數所指定的字節數。</li>
<li>malloc返回的數值是指針，指向一段內存的開始地址。</li>
<li>多次調用malloc所分配的地址不能有重疊的部分，除非某次malloc所分配的地址已經被釋放掉。</li>
<li>malloc應該盡快完成內存分配並且返回。</li>
<li>實現malloc時應同時實現內存大小調整和內存釋放函數(realloc和free)</li>
</ul>
<p>想看malloc命令可以在Terminal輸入這個指令<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man <span class="built_in">malloc</span></div></pre></td></tr></table></figure></p>
<p>每個進程有2^N字節的內存，N是機器位數。比如以64位元的操作系統來說的話，每個進程的虛擬地址空間為2^64Byte。</p>
<p>這種虛擬地址空間的作用：簡化程序編寫+方便操作系統對進程的內存進行隔離管理。在Linux裡面</p>
]]></content>
      
        <categories>
            
            <category> Binary Security </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Malloc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PWN知識全制霸系列Part 1-1 匯編語言：基礎知識]]></title>
      <url>/2018/01/11/learn-all-pwn/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>PWN知識全制霸這系列是為了教導大家如何從一個PWN萌新成為佼佼者那樣的大佬。那麼是什麼是PWN呢？PWN就是利用各種漏洞攻擊系統主機從而獲得系統管理員的權限。<a id="more"></a></p>
<p>而Part 1就是一些你們得懂的匯編基本和常用到的知識。</p>
<h2 id="我能在這系列的的教學到什麼？"><a href="#我能在這系列的的教學到什麼？" class="headerlink" title="我能在這系列的的教學到什麼？"></a>我能在這系列的的教學到什麼？</h2><ul>
<li>x86 &amp; x86-64的匯編語言。</li>
<li>程序常用的保護機制：CANNARY，FORTIFY，NX（DEP），PIE（ASLR），RELRO等等  </li>
<li>各種Pwn工具的應用：Pwntools，GDB，checksec，IDA Pro，Peda等等。</li>
<li>Pwn類型Wargame/CTF題目的應對方式與解答。</li>
<li>ELF和PE文件格式。</li>
<li>程序執行，加載和鏈接詳解。</li>
<li>各種二進制漏洞：栈溢出，堆溢出，返回導向編程(ROP)，格式化字符串漏洞，整數溢出等等。</li>
<li>其他大佬的在挖掘漏洞以及利用Pwn的思路。</li>
</ul>
<h1 id="0x02-基礎知識"><a href="#0x02-基礎知識" class="headerlink" title="0x02 基礎知識"></a>0x02 基礎知識</h1><p>本文參考：王爽-匯編語言第三版 &amp; 小信豬原始部落的學習筆記</p>
<p>機械語言是機械指令的集合。<br>例子指令： <code>01010000 (PUSH AX)</code> 左部分為機械語言括號裡面則是所謂的匯編語言。</p>
<p>匯編語言就是能在硬件上直接工作的編程語言。而匯編語言的出現是為了讓人們用容易理解的方式去表達出機器指令代表的意思。雖然電腦只能讀懂0和1，然而，通過編譯器，我們輸入的匯編語言最終會轉譯成電腦所理解的機械語言。</p>
<p>由3種匯編指令：匯編指令，偽指令和其他符號。</p>
<ul>
<li>匯編指令：mov,add,sub….等等</li>
<li>偽指令：偽指令是對匯編起某種控制作用的特殊命令，其格式與通常的操作指令一樣，並可加在彙編程序的任何地方，但它們並不產生機器指令。</li>
<li>符號：例如運輸符號加減乘除，邏輯符號等等。</li>
</ul>
<h2 id="存储器-寄存器"><a href="#存储器-寄存器" class="headerlink" title="存储器(寄存器)"></a>存储器(寄存器)</h2><p>也就是平常大家所說的內存，用來存放指令和需要運算的數據。</p>
<h2 id="存儲單元"><a href="#存儲單元" class="headerlink" title="存儲單元"></a>存儲單元</h2><p>存儲器能被劃分成幾個單元，每個存儲器單元從0開始順序編號，如一個存儲器有128個存儲單元，編號從0到127微型機存儲器的存儲單元可以存儲一個Byte（1位元組=8bit，即8個二進位）。含有128個存儲單元的存儲器可以存儲128個Byte。</p>
<p><img src="https://s10.postimg.org/gqlv0k0ix/byte.jpg" alt=""></p>
<h3 id="數據的表達單位"><a href="#數據的表達單位" class="headerlink" title="數據的表達單位"></a>數據的表達單位</h3><p>二進位制是由0和1組成。</p>
<ul>
<li>位元組(byte)8個bit位組成</li>
<li>字(WORD)16位：2個位元組組成</li>
<li>雙字(DWORD)32位：兩個字組成</li>
<li>四字(QWORD)64位元: 四個字組成</li>
</ul>
<h3 id="字節順序"><a href="#字節順序" class="headerlink" title="字節順序"></a>字節順序</h3><p>大端模式 Big Endian：低位放低位地址,高位放到高位地址。<br>低地址 ——– 高地址 (比如存放0x01234567)<br><code>0x01 0x02 0x03 0x04 0x05 0x06 0x07</code></p>
<p>小端模式 Small Endian：低位放高地址,高位放低地址<br>低地址 ——– 高地址 (比如存放0x01234567)<br><code>0x07 0x06 0x05 0x04 0x03 0x02 0x01</code></p>
<h2 id="讀寫存储器數據"><a href="#讀寫存储器數據" class="headerlink" title="讀寫存储器數據"></a>讀寫存储器數據</h2><p>CPU要從讀寫數據的需要知道存儲單元所在的地址，到底指明的是哪一個存儲器，進行怎樣的操作。而它會和電腦裡面的芯片進行以下3種的信息交互。</p>
<ul>
<li>存儲單元的地址(地址信息) 走地址總線</li>
<li>器件的選擇,讀取還是寫入命令(控制信息) 走控制總線</li>
<li>讀或寫的數據(數據信息) 走數據總線</li>
</ul>
<h3 id="CPU從3號地址讀取數據8的過程"><a href="#CPU從3號地址讀取數據8的過程" class="headerlink" title="CPU從3號地址讀取數據8的過程"></a>CPU從3號地址讀取數據8的過程</h3><p><img src="https://s10.postimg.org/j97k17byh/as-cpu-read.gif" alt=""></p>
<p>1.CPU透過地址線發出地址訊息3。<br>2.CPU通過控制線發出記憶體讀命令，選中存儲器晶片，並通知它，將要從中讀取數據。<br>3.存儲器將3號單元中的數據8通過傳輸線送入CPU。</p>
<h3 id="CPU將數據26寫入3號地址的過程"><a href="#CPU將數據26寫入3號地址的過程" class="headerlink" title="CPU將數據26寫入3號地址的過程"></a>CPU將數據26寫入3號地址的過程</h3><p><img src="https://s10.postimg.org/651zolzd5/as-cpu-write.gif" alt=""></p>
<p>1.CPU透過地址線發出地址訊息3。<br>2.CPU通過控制線發出記憶體命令，選中存儲器晶片，並通知它，要想其中寫入數據。<br>3.CPU透過傳輸線將數據26送入記憶體的3號單元中。</p>
<h2 id="地址總線"><a href="#地址總線" class="headerlink" title="地址總線"></a>地址總線</h2><blockquote>
<p>CPU通過地址總線來指定存儲器單元。地址總線上能傳送多少個不同的信息，CPU就可以對多少個存儲單元進行尋址。<br>一個CPU有N根地址線，則可以說這個CPU的地址總線的寬度為N。這樣的CPU最多可以尋找 $ \ 2^N \ $ 個內存單元.</p>
</blockquote>
<p>決定了CPU的尋址能力。</p>
<h2 id="數據總線"><a href="#數據總線" class="headerlink" title="數據總線"></a>數據總線</h2><blockquote>
<p>CPU與內存或其他器件之間的數據傳送是通過數據總線來進行的。數據總線的寬度決定了CPU和外界的數據傳送速度。8根數據總線一次可傳送一個8位二進制數據（即一個字節）。16根數據總線一次可以傳送兩個字節，32的話就是4個字節，最後，64就會是8個字節了。</p>
</blockquote>
<p>決定了CPU與其他器件進行數據傳送時的一次數據傳送量。</p>
<h2 id="控制總線"><a href="#控制總線" class="headerlink" title="控制總線"></a>控制總線</h2><blockquote>
<p>CPU對外部器件的控制是通過控制總線來進行的。在這裏控制總線是一個總稱，控制總線是一些不同控制線的集合。有多少個控制總線，就意味着CPU提供了對外部器件的多少種控制。所以，控制總線的寬度決定了CPU對外部器件的控制能力。</p>
</blockquote>
<p>決定了CPU對系統中其他器件的控制能力</p>
<h2 id="內存地址空間"><a href="#內存地址空間" class="headerlink" title="內存地址空間"></a>內存地址空間</h2><p>舉例來說，一個CPU的地址總線寬度為10，那麼可以尋址$ \ 2^10 = 1024\ $個內存單元，這1024個可尋到的內存單元就構成這個CPU的內存地址空間。</p>
<h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>在CPU裡面，寄存器的作用是用來暫存指令、數據和位址。它們分別是:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">64</span>-bit register | Lower <span class="number">32</span> <span class="meta">bits</span> | Lower <span class="number">16</span> <span class="meta">bits</span> | Lower <span class="number">8</span> <span class="meta">bits</span></div><div class="line">==============================================================</div><div class="line"><span class="built_in">rax</span>             | <span class="built_in">eax</span>           | <span class="built_in">ax</span>            | <span class="built_in">al</span></div><div class="line"><span class="built_in">rbx</span>             | <span class="built_in">ebx</span>           | <span class="built_in">bx</span>            | <span class="built_in">bl</span></div><div class="line"><span class="built_in">rcx</span>             | <span class="built_in">ecx</span>           | <span class="built_in">cx</span>            | <span class="built_in">cl</span></div><div class="line"><span class="built_in">rdx</span>             | <span class="built_in">edx</span>           | <span class="built_in">dx</span>            | <span class="built_in">dl</span></div><div class="line"><span class="built_in">rsi</span>             | <span class="built_in">esi</span>           | <span class="built_in">si</span>            | <span class="built_in">sil</span></div><div class="line"><span class="built_in">rdi</span>             | <span class="built_in">edi</span>           | <span class="built_in">di</span>            | <span class="built_in">dil</span></div><div class="line"><span class="built_in">rbp</span>             | <span class="built_in">ebp</span>           | <span class="built_in">bp</span>            | <span class="built_in">bpl</span></div><div class="line"><span class="built_in">rsp</span>             | <span class="built_in">esp</span>           | <span class="built_in">sp</span>            | <span class="built_in">spl</span></div><div class="line"><span class="built_in">r8</span>              | <span class="built_in">r8d</span>           | <span class="built_in">r8w</span>           | <span class="built_in">r8b</span></div><div class="line"><span class="built_in">r9</span>              | <span class="built_in">r9d</span>           | <span class="built_in">r9w</span>           | <span class="built_in">r9b</span></div><div class="line"><span class="built_in">r10</span>             | <span class="built_in">r10d</span>          | <span class="built_in">r10w</span>          | <span class="built_in">r10b</span></div><div class="line"><span class="built_in">r11</span>             | <span class="built_in">r11d</span>          | <span class="built_in">r11w</span>          | <span class="built_in">r11b</span></div><div class="line"><span class="built_in">r12</span>             | <span class="built_in">r12d</span>          | <span class="built_in">r12w</span>          | <span class="built_in">r12b</span></div><div class="line"><span class="built_in">r13</span>             | <span class="built_in">r13d</span>          | <span class="built_in">r13w</span>          | <span class="built_in">r13b</span></div><div class="line"><span class="built_in">r14</span>             | <span class="built_in">r14d</span>          | <span class="built_in">r14w</span>          | <span class="built_in">r14b</span></div><div class="line"><span class="built_in">r15</span>             | <span class="built_in">r15d</span>          | <span class="built_in">r15w</span>          | <span class="built_in">r15b</span></div></pre></td></tr></table></figure>
<p><a href="http://slideplayer.com/slide/4194257/14/images/11/Register+Layout+RAX+EAX+AX+AH+AL.jpg" target="_blank" rel="noopener">http://slideplayer.com/slide/4194257/14/images/11/Register+Layout+RAX+EAX+AX+AH+AL.jpg</a></p>
<p>EAX：称为累加器，常用于算数运算、布尔操作、逻辑操作、返回函数结果等。<br>EBX：称为基地址寄存器，常用于存档内存地址。<br>ECX：称为计数寄存器，常用于存放循环语句的循环次数，字符串操作中也会常用。<br>EDX：称为数据寄存器，常常和EAX一起使用。</p>
<p>对于寄存器%eax、%ebx、%ecx和%edx，各自可作为两个独立的16位寄存器使用，而低16位寄存器还可继续分为两个独立的8位寄存器使用。</p>
<p>注意：<br>上面所述的4个通用寄存器的专门用途不是一成不变的，编译器在编译程序的时候会根据很多因素，例如编译器、编译条件、操作系统等做出相应的改变，读者要知道着手研究的程序是用什么编译器编译，然后针对具体的编译器参考该编译器的说明。</p>
<p>EIP(Instruction Pointer)：是指令寄存器，指向处理器下条等待执行的指令地址(代码段内的偏移量)，每次执行完相应汇编指令EIP值就会增加。</p>
<p>ESP(Stack Pointer)：是栈指针寄存器，存放执行函数对应栈帧的栈顶地址(也是系统栈的顶部)，永遠指向栈区域的栈顶位置。<br>EBP(Base Pointer)：是扩展基址指针寄存器，存放执行函数对应栈帧的栈底地址，用于C运行库访问栈中的局部变量和参数。</p>
<p>变址寄存器：顾名思义，变址的含义是内存地址会变动，也就是说变址寄存器中存放在变动的内存地址。80386架构中有两个变址寄存器，分别为ESI和EDI。</p>
<ul>
<li>ESI寄存器：称为源变址寄存器，通常存放要处理的数据的内存地址。</li>
<li>EDI寄存器：称为目的变址寄存器，通常存放处理后的数据的内存地址。</li>
</ul>
<p>用途：ESI和EDI通常用来配合使用完成数据的赋值操作，下面是一个EIS和EDI配合使用的例子。<br>Rep movs dword ptr [edi],dword ptr [esi]</p>
<p>上面的指令把ESI所指向的内存地址中的内容复制到EDI所指向的内存中，数据的长度在ECX寄存器中指定。</p>
<h1 id="Eflags"><a href="#Eflags" class="headerlink" title="Eflags"></a>Eflags</h1>]]></content>
      
        <categories>
            
            <category> PWN Knowledge </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Assembly Language </tag>
            
            <tag> PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寫出優雅的Python代碼Part1 - Structuring Your Project]]></title>
      <url>/2018/01/02/writegreatpycode01/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h1><p>The word ‘Sturcture’ here means how the files and folders are organized in the file system. What are the most important files should put in your project and why you need them. By understand this, you may find the best way to organise your codes and other related files effectively. <a id="more"></a></p>
<p>In this section, I will going to show some of the point you can concern when you are structing your project.</p>
<h1 id="0x02-Structure-of-Repository"><a href="#0x02-Structure-of-Repository" class="headerlink" title="0x02 Structure of Repository."></a>0x02 Structure of Repository.</h1><p>Repository is the first thing you need to concern. When other people see your repository’s page they need to understand what is your project about and how to use it and so on. Hence, you should put a “README” file in your repository to help others understand your project better. Usually, “README” should also include enough details to help a new user get started, e.g. how to compile, how to install, and how to start integrating.</p>
<p>A good readme file for your project can have the following informations:</p>
<ul>
<li>Project Titile: A little info about your project and/ or overview that explains what the project is about.</li>
<li>Motivation: Explain why you want to create this project.</li>
<li>Build Status: This is to maintain the further integration.</li>
<li>Screenshots: How’s does it look like, when your program is running.</li>
<li>Tech/framework used:Telling others the framework can give an idea for them to build similar project or even develop a better project based on this project.</li>
<li>Features: What your projet can do or help other finish their task?</li>
<li>Code Example: Giving some example can let people understand the coding process on how you develope your project.</li>
<li>Installation: This is the moset important part, you should teach your user on how to install it, if not they might even cant start using it.</li>
<li>API Reference: A quick and concise reference containing what you need to know to use a library or work with a program. It details functions, classes, return types, and more.</li>
<li>How to use: Telling user the best and right way to run your project</li>
<li>Contribute: If you want people contribute your project, you can include this section.</li>
<li>Credits: You can link to any post, people,tutorial that help you develope and contribute this project.  </li>
<li>License: Including a proper software license can tells others what they can and can’t do with your project</li>
</ul>
<p>One thing you should remember, it is not nessecry to inlude all the above information in your “README”. As longs as you can point out the main things that a user should know about project is enough, for the rest of the full details information you can put under your documentation or wiki.</p>
<p>Here are some guideline as well for writing a good “README”.</p>
<ul>
<li><a href="https://medium.com/@meakaakka/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab3" target="_blank" rel="noopener">Beginners Guide to writing a Kickass README</a></li>
<li><a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html" target="_blank" rel="noopener">Readme Driven Development</a></li>
<li><a href="https://github.com/noffle/art-of-readme" target="_blank" rel="noopener">Art of Readme</a></li>
</ul>
<h2 id="Sample-Repository"><a href="#Sample-Repository" class="headerlink" title="Sample Repository"></a>Sample Repository</h2><p>Next, I will give an example of a python project repository.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">README.rst</div><div class="line">LICENSE</div><div class="line">setup.py</div><div class="line">requirements.txt</div><div class="line">sample/__init__.py</div><div class="line">sample/core.py</div><div class="line">sample/helpers.py</div><div class="line">docs/conf.py</div><div class="line">docs/index.rst</div><div class="line">tests/test_basic.py</div><div class="line">tests/test_advanced.py</div></pre></td></tr></table></figure>
<h2 id="sample-py-or-sample"><a href="#sample-py-or-sample" class="headerlink" title="./sample.py or ./sample"></a>./sample.py or ./sample</h2><p>Purpose: code of intrest. The source code that you use in your project.</p>
<h2 id="Setup-py"><a href="#Setup-py" class="headerlink" title="Setup.py"></a>Setup.py</h2><p><code>setup.py</code> is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules. For more details, you can check <a href="https://github.com/kennethreitz/setup.py" target="_blank" rel="noopener">here</a></p>
<h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="./requirements.txt"></a>./requirements.txt</h2><p>A <a href="https://pip.pypa.io/en/stable/user_guide/#requirements-files" target="_blank" rel="noopener">pip requirements file</a> should be placed at the root of the repository. It should specify the dependencies required to contribute to the project: testing, building, and generating documentation.</p>
<p>If your project has no development dependencies, or you prefer development environment setup via setup.py, this file may be unnecessary.</p>
<h2 id="docs"><a href="#docs" class="headerlink" title="./docs"></a>./docs</h2><p>This is the place to put your documentation of your project.</p>
<h2 id="test-basic-py-or-test-advance-py"><a href="#test-basic-py-or-test-advance-py" class="headerlink" title="./test_basic.py or./test_advance.py"></a>./test_basic.py or./test_advance.py</h2><p>Purpose: Package integration and unit tests.</p>
<p>Starting out, a small test suite will often exist in a single file:</p>
<p><code>./test_sample.py</code></p>
<p>Once a test suite grows, you can move your tests to a directory, like so:</p>
<p><code>tests/test_basic.py</code><br><code>tests/test_advanced.py</code></p>
<p>In order to prevent keep importing the pakage modules whenever you are doing a testing, you can do it in this way.<br>Create a file call <code>tests/context.py</code>. This file allows you to modify the path for resolving the packaging issue.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># set absolute path.</span></div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(os.path.join(os.path.dirname(__file__), <span class="string">'..'</span>)))</div><div class="line"></div><div class="line"><span class="keyword">import</span> sample</div></pre></td></tr></table></figure>
<p>Fianally, what you need to do is just add one line in each of your test.py. After that you can skip install the dependencies or pakage modules.<br><code>from .context import sample</code></p>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title=".Makefile"></a>.Makefile</h2><p>Purpose: Defining generic tasks for your project.</p>
<p>A good makefile allow you to define the rules for your python file like which file need to pre-compile, recompile or even you can execute the shell script by using a makefile. The best part of using a makefile is to automate your code running. Once you done making your makefile, you only need to use the make command and easily run tests on your project.</p>
<p>Sample of Python makefile</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.PHONY: <span class="built_in">test</span> upload clean bootstrap</div><div class="line"></div><div class="line"><span class="built_in">test</span>:</div><div class="line">	sh -c <span class="string">'. _virtualenv/bin/activate; nosetests tests'</span></div><div class="line"></div><div class="line"><span class="built_in">test</span>-all:</div><div class="line">	tox</div><div class="line"></div><div class="line">upload: <span class="built_in">test</span>-all</div><div class="line">	python setup.py sdist bdist_wheel upload</div><div class="line">	make clean</div><div class="line">	</div><div class="line">register:</div><div class="line">	python setup.py register</div><div class="line"></div><div class="line">clean:</div><div class="line">	rm -f MANIFEST</div><div class="line">	rm -rf build dist</div><div class="line">	</div><div class="line">bootstrap: _virtualenv</div><div class="line">	_virtualenv/bin/pip install -e .</div><div class="line">ifneq ($(wildcard <span class="built_in">test</span>-requirements.txt),) </div><div class="line">	_virtualenv/bin/pip install -r <span class="built_in">test</span>-requirements.txt</div><div class="line">endif</div><div class="line">	make clean</div><div class="line"></div><div class="line">_virtualenv: </div><div class="line">	virtualenv _virtualenv</div><div class="line">	_virtualenv/bin/pip install --upgrade pip</div><div class="line">_virtualenv/bin/pip install --upgrade setuptools</div></pre></td></tr></table></figure>
<p>Learn more about makefile.</p>
<ul>
<li><a href="https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html" target="_blank" rel="noopener">Makefiles in python projects</a></li>
<li><a href="https://www.tianmaying.com/tutorial/makefile" target="_blank" rel="noopener">Makefile入門</a></li>
<li><a href="https://www.gnu.org/software/make/manual/make.html#toc-Overview-of-make" target="_blank" rel="noopener">GNU Make Documentation</a></li>
<li><a href="https://drive.google.com/open?id=1Uv6fMD9MZiBIDp1RNOQkszZJxZpMMi6V" target="_blank" rel="noopener">GNU Make 3.8中文指南</a></li>
</ul>
<h1 id="0x03-Structure-of-Code-is-Key"><a href="#0x03-Structure-of-Code-is-Key" class="headerlink" title="0x03 Structure of Code is Key"></a>0x03 Structure of Code is Key</h1>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GDB調試工具指南+Peda插件的使用方式]]></title>
      <url>/2018/01/01/GDB-tutorial/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-什麼是GDB"><a href="#0x01-什麼是GDB" class="headerlink" title="0x01 什麼是GDB"></a>0x01 什麼是GDB</h1><p>GDB是在Linux裡面用來調試C/C++程序的強大工具。而它主要的用途如下。<a id="more"></a><br>• Start your program, specifying anything that might aﬀect its behavior.<br>• Make your program stop on specifed conditions.<br>• Examine what has happened, when your program has stopped.<br>• Change things in your program, so you can experiment with correcting the eﬀects of one bug and go on to learn about another.</p>
<h1 id="0x02-啟動GDB的方法"><a href="#0x02-啟動GDB的方法" class="headerlink" title="0x02 啟動GDB的方法"></a>0x02 啟動GDB的方法</h1><p>在Terminal输入<code>gdb</code>進入GDB的環境後就可以用<code>file &lt;program名字&gt;</code>來開始調試你程序(program)。</p>
<p>有3種啟動的方式。</p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p><code>gdb &lt;program&gt;</code></p>
<p>program是你的當前要執行的文件，一般在你現在所處於的目錄下</p>
<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p><code>gdb &lt;program&gt; core</code></p>
<p>用gdb同時調試一個運行中的程序以及core文件。</p>
<h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h2><p><code>gdb &lt;program&gt; &lt;PID&gt;</code></p>
<p>此外，你也可以指定GDB去調試運行中程序的Process ID。</p>
<h1 id="0x02-GDB-常用參數選項"><a href="#0x02-GDB-常用參數選項" class="headerlink" title="0x02 GDB 常用參數選項"></a>0x02 GDB 常用參數選項</h1><ul>
<li><code>-s &lt;program&gt;</code> :讀取program的符號表(Symbol Table)。</li>
<li><code>-e &lt;program&gt;</code> :用program作为可執行的文件来執行，或者在和core dump連接的時候用来檢查出數據</li>
<li><code>-c &lt;program&gt;</code> :用program作為core dump。</li>
<li><code>-p &lt;program&gt;</code> :配合<code>attach</code>指令，來連接PID的號碼。</li>
<li><code>-x &lt;program&gt;</code> :從program裡面執行GDB的指令</li>
<li><code>-ex command</code>  :執行單一的GDB指令 例子：<code>gdb -ex ’target sim’</code></li>
</ul>
<h1 id="0x03-檢測源代碼-Source-File"><a href="#0x03-檢測源代碼-Source-File" class="headerlink" title="0x03 檢測源代碼(Source File)"></a>0x03 檢測源代碼(Source File)</h1><p><code>list</code><br><code>list &lt;linenum&gt;</code><br><code>list function</code><br><code>list -</code><br><code>set listsize count</code><br><code>set listsize unlimited</code></p>
<h1 id="0x04-設置斷點"><a href="#0x04-設置斷點" class="headerlink" title="0x04 設置斷點"></a>0x04 設置斷點</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">基本使用 <span class="keyword">break</span> &lt;location&gt;,以下是可以用的location。</div><div class="line">(gdb) b/<span class="keyword">break</span>                   # 没有参数，表示下一跳指令處停住</div><div class="line">(gdb) b/<span class="keyword">break</span> linenum/func      # 停在第linenum行或某個function處</div><div class="line">(gdb) b/<span class="keyword">break</span> -/+offset         # 在當前行號前/後的offset行停住 例子： <span class="keyword">break</span> -</div><div class="line">(gdb) b/<span class="keyword">break</span> filename:linenum  # 停在源文件filename的linenum行</div><div class="line">(gdb) b/<span class="keyword">break</span> filename:func     # 停在在源文件的function入口</div><div class="line">(gdb) b/<span class="keyword">break</span> *address          # 在内存地址address處設定斷點</div><div class="line">(gdb) b/<span class="keyword">break</span> label             # 停在有label這個名字的那行</div><div class="line">(gdb) b/<span class="keyword">break</span> function:label    # 停在源文件的funtion裡面有label這個名字的那行</div><div class="line">(gdb) b/<span class="keyword">break</span> <span class="keyword">if</span> &lt;condition&gt;    # 條件成立是停住，如在循环中：<span class="keyword">break</span> <span class="keyword">if</span> i=<span class="number">50</span></div></pre></td></tr></table></figure>
<h1 id="0x05-查看資訊"><a href="#0x05-查看資訊" class="headerlink" title="0x05 查看資訊"></a>0x05 查看資訊</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">基本使用 <span class="builtin-name">info</span> &lt;想看的資訊&gt;</div><div class="line">(gdb) <span class="builtin-name">info</span> &lt;breakpoint&gt; # </div><div class="line">(gdb) <span class="builtin-name">info</span> &lt;register&gt;   # 查看所有 register 狀態</div></pre></td></tr></table></figure>
<h1 id="0x06-內存的顯示方式"><a href="#0x06-內存的顯示方式" class="headerlink" title="0x06 內存的顯示方式"></a>0x06 內存的顯示方式</h1><p>GDB中使用“x”命令来打印内存的值，格式为<code>x/nfu addr</code>。其意思為以f格式打印從addr開始的n个長度單元為u的內存值。參數具體含義如下：</p>
<ul>
<li>n：輸出單元的個數。</li>
<li>f：是輸出格式，可用參數(‘x’=16進制, ‘d’=10進制, ‘u’=無符號10進制, ‘o’=8進制, ‘t’=2進制,‘a’=地址, ‘c’=符號, ‘f’=浮點數, ‘s’=字符串)。Default設定是x =16進制。</li>
<li>u：標明一個單元的長度。b是一個byte，h是兩個byte（halfword），w是四個byte（word），g是八個byte（giant word）。 </li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Example <span class="number">1</span>：打印<span class="number">16</span>個在地址a以<span class="number">16</span>進位表示且大小為byte數值</div><div class="line">(gdb) x/<span class="number">16</span>xb a</div><div class="line"><span class="number">0</span>x7fffffffe4a0: <span class="number">0</span>x00    <span class="number">0</span>x01    <span class="number">0</span>x02    <span class="number">0</span>x03    <span class="number">0</span>x04    <span class="number">0</span>x05    <span class="number">0</span>x06    <span class="number">0</span>x07</div><div class="line"><span class="number">0</span>x7fffffffe4a8: <span class="number">0</span>x08    <span class="number">0</span>x09    <span class="number">0</span>x0a    <span class="number">0</span>x0b    <span class="number">0</span>x0c    <span class="number">0</span>x0d    <span class="number">0</span>x0e    <span class="number">0</span>x0f</div><div class="line"></div><div class="line">Example <span class="number">2</span>：打印<span class="number">16</span>個在地址a以無符號<span class="number">10</span>進位表示且大小為byte數值</div><div class="line">(gdb) x/<span class="number">16</span>ub a</div><div class="line"><span class="number">0</span>x7fffffffe4a0: <span class="number">0</span>       <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span>       <span class="number">7</span></div><div class="line"><span class="number">0</span>x7fffffffe4a8: <span class="number">8</span>       <span class="number">9</span>       <span class="number">10</span>      <span class="number">11</span>      <span class="number">12</span>      <span class="number">13</span>      <span class="number">14</span>      <span class="number">15</span></div><div class="line"></div><div class="line">Example <span class="number">3</span>：打印<span class="number">16</span>個在地址a以<span class="number">2</span>進位表示且大小為byte的數值</div><div class="line">(gdb) x/<span class="number">16</span>tb a</div><div class="line"><span class="number">0</span>x7fffffffe4a0: <span class="number">00000000</span>        <span class="number">00000001</span>        <span class="number">00000010</span>        <span class="number">00000011</span>        <span class="number">00000100</span>        <span class="number">00000101</span>        <span class="number">00000110</span>        <span class="number">00000111</span></div><div class="line"><span class="number">0</span>x7fffffffe4a8: <span class="number">00001000</span>        <span class="number">00001001</span>        <span class="number">00001010</span>        <span class="number">00001011</span>        <span class="number">00001100</span>        <span class="number">00001101</span>        <span class="number">00001110</span>        <span class="number">00001111</span></div><div class="line"></div><div class="line">Example <span class="number">4</span>：打印<span class="number">16</span>個在地址a以<span class="number">16</span>進位表示的</div><div class="line">(gdb) x/<span class="number">16</span>xw a</div><div class="line"><span class="number">0</span>x7fffffffe4a0: <span class="number">0x03020100</span>      <span class="number">0x07060504</span>      <span class="number">0</span>x<span class="number">0b0a0908</span>      <span class="number">0</span>x0f0e0d0c</div><div class="line"><span class="number">0</span>x7fffffffe4b0: <span class="number">0x13121110</span>      <span class="number">0x17161514</span>      <span class="number">0</span>x<span class="number">1b1a1918</span>      <span class="number">0</span>x1f1e1d1c</div><div class="line"><span class="number">0</span>x7fffffffe4c0: <span class="number">0x23222120</span>      <span class="number">0x27262524</span>      <span class="number">0</span>x<span class="number">2b2a2928</span>      <span class="number">0</span>x2f2e2d2c</div><div class="line"><span class="number">0</span>x7fffffffe4d0: <span class="number">0x33323130</span>      <span class="number">0x37363534</span>      <span class="number">0</span>x<span class="number">3b3a3938</span>      <span class="number">0</span>x3f3e3d3c</div></pre></td></tr></table></figure>
<h1 id="其他實用Command"><a href="#其他實用Command" class="headerlink" title="其他實用Command"></a>其他實用Command</h1><p>disass <function name=""> # 反組譯某個function<br>ni - next instruction<br>• si - step into<br>• backtrace - 顯⽰上層所有 stack frame 的資訊<br>• continue</function></p>
<p>set <em>address=value<br>• 將 address 中的值設成 value ⼀次設 4 byte<br>• 可將 </em> 換成 {char/short/long} 分別設定 1/2/8 byte<br>• e.g.<br>• set *0x602040=0xdeadbeef<br>• set {int}0x602040=1337</p>
<p> 在有debug symbol下<br>• list : 列出 source code<br>• b 可直接接⾏號斷點<br>• info local : 列出區域變數<br>• print val : 印出變數 val 的值</p>
<p>attach pid : attach ⼀個正在運⾏的 process<br>• 可以配合 ncat 進⾏ exploit 的 debug<br>• ncat -ve ./a.out -kl 8888<br>• echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope</p>
<h1 id="表演時間來啦-Is-my-Show-Time"><a href="#表演時間來啦-Is-my-Show-Time" class="headerlink" title="表演時間來啦(Is my Show Time)"></a>表演時間來啦(Is my Show Time)</h1><p>預備文件：hello.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, world!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>編譯<code>gcc -g hello.c -o hello</code>後就開始用GDB來調試。</p>
<h2 id="查看其匯編語言"><a href="#查看其匯編語言" class="headerlink" title="查看其匯編語言"></a>查看其匯編語言</h2><p>/m<br>    When this option is specified, the disassemble command will show the source lines that correspond to the disassembled instructions.<br>/r<br>    When this option is specified, the disassemble command will show the raw byte values of all disassembled instructions.</p>
<p>disass 0x4004ef,0x4004f9</p>
<p>##</p>
<h1 id="參考鏈接"><a href="#參考鏈接" class="headerlink" title="參考鏈接"></a>參考鏈接</h1><p><a href="http://wiki.ubuntu.org.cn/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">http://wiki.ubuntu.org.cn/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F</a><br><a href="https://deepzz.com/post/gdb-debug.html" target="_blank" rel="noopener">https://deepzz.com/post/gdb-debug.html</a></p>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Binary </tag>
            
            <tag> GDB </tag>
            
            <tag> Note </tag>
            
            <tag> Debug </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解計算機第三章筆記]]></title>
      <url>/2017/12/29/op3/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>深入理解計算機第三章筆記<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">multstore:</div><div class="line">	pushq <span class="symbol">%rbx</span></div><div class="line">	movq  <span class="symbol">%rdx</span>,<span class="symbol">%rbx</span></div><div class="line">	<span class="keyword">call</span>  mult<span class="number">2</span></div><div class="line">	movq  <span class="symbol">%rax</span>,(<span class="symbol">%rbx</span>)</div><div class="line">	popq  <span class="symbol">%rbx</span></div><div class="line">	<span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<p>匯編代碼解釋<br><code>pushq %rbx</code>將寄存器rbx的內容放入程序棧</p>
<p><code>objdump -d mstore.o</code><br>可查看機械代碼文件內容</p>
<p>代碼範例2<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">multstore</span><span class="params">(<span class="keyword">long</span>,<span class="keyword">long</span>,<span class="keyword">long</span> *)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">long</span> d;</div><div class="line">	mulrstore(<span class="number">2</span>,<span class="number">3</span>, %d);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"2 *3 --&gt; %ld\n"</span>,d);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">mult2</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">long</span> s = a * b;</div><div class="line">	<span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>gcc -Og -o prog main.c mstore.c</code></p>
<p>2大規則For生成小於8字節結果的指令：<br>生成1字節和2字節的指令會保持，剩下的字節不會改變。<br>生成4字節數字的指令會把高位4個字節變0.</p>
<p>RSP - 指明棧運行時結束位置。</p>
<h1 id="操作數"><a href="#操作數" class="headerlink" title="操作數"></a>操作數</h1><p>1.立即數(Immediate) - $ + 整數 例子$-577 /$0x1F等等<br>2.寄存器 - RAX,RBX,RCX…RIP等等  ra表示任意寄存器a，而R[ra]表示它的值，看成一個數組R，用寄存器標識符作為索引。<br>3.內存引用 - 用Mb[Addr]表示對儲存在內存裡面。</p>
<h1 id="操作數的各種尋址模式"><a href="#操作數的各種尋址模式" class="headerlink" title="操作數的各種尋址模式"></a>操作數的各種尋址模式</h1><p><img src="https://s9.postimg.org/6aihod7r3/adress.jpg" alt="adress.jpg"></p>
<h1 id="練習題3-1"><a href="#練習題3-1" class="headerlink" title="練習題3.1"></a>練習題3.1</h1><p><img src="https://s9.postimg.org/vtau1s4a7/exercise.jpg" alt="exercise.jpg"></p>
<p>答案<br>|操作數|值|解釋|<br>|:——|:——|:——|<br>|%rax|0x100|寄存器|<br>|0x104|0xAB|絕對地址|<br>|$0x108|0x108|立即數|<br>|(%rax)|0xFF|間接尋址：因為這裡說的是去尋找0x100地址的值|<br>|4(%rax)|0xAB|間接尋址：因為這裡說的是去尋找0x104地址的值|<br>|9(%rax,%rdx)|0x11|0100+0003+0009=0x10C,答案為地址0x10C的值|<br>|260(%rcx,%rdx)|0x13|0001+0003+0104=0x108,答案為地址0x108的值，260要轉成16進制才可以進行運算|<br>|0xFC(,%rcx,4)|0xFF|0004+00FC=0xFF, 0004是0001經過比例4後變成的|<br>|(%rax,%rdx,4)|0x11|000C+0100=0x10C，000C是0003經過比例4=&gt;3x4=12=C變成的|</p>
<h1 id="數據傳輸指令"><a href="#數據傳輸指令" class="headerlink" title="數據傳輸指令"></a>數據傳輸指令</h1><p>mov S,D- 把數據從源位置S傳送到目標位置D。</p>
<ul>
<li>movb 傳送字節</li>
<li>movw 傳送字</li>
<li>movl 傳送雙字</li>
<li>movq 傳送四字</li>
<li>movabsq 傳送絕對四字 [以任意64位作為立即數，但目標對象只能是寄存器]</li>
</ul>
<h2 id="Mov傳輸的方式"><a href="#Mov傳輸的方式" class="headerlink" title="Mov傳輸的方式"></a>Mov傳輸的方式</h2><ul>
<li>movl $0x4050,%EAX Immediate to Register 4 bytes</li>
<li>movw %bp,%sp Register to Register 2 bytes</li>
<li>movb (%rdi,%rcx),%al Memory to Register 1 byte</li>
<li>movb $-17,(%rsp) Immediate to Memory 1 byte</li>
<li>movq %rax,-12(%rbp) Register to Memory 8 bytes</li>
</ul>
<p>1.將較小的源值複製到較大的目的時使用MOVZ或MOVS。<br>2.MOVZ把目的中的字節填0<br>3.MOVS把指令通過符號擴展來填充，同時把源操作的最高位進行複製<br>4.每個指令最後2個字符是大小指示符號。第一個指定源的大小，後者指定第二個明目的大小</p>
<ul>
<li>movzbw 零擴展字節傳送到字</li>
<li>movzbl 零擴展字節傳送到雙字</li>
<li>movzwl 零擴展字傳送到雙字</li>
<li>movzbq 零擴展字節傳送到四字</li>
<li>movzwq 零擴展字傳送到四字</li>
</ul>
<p>【上述指令以內存地址為來源，以寄存器作為目的】</p>
<ul>
<li>movsbw 將做了符號擴展的字節傳送到字</li>
<li>movsbl 將做了符號擴展的字節傳送到雙字</li>
<li>movswl 將做了符號擴展的字傳送到雙字</li>
<li>movsbq 將做了符號擴展的字節傳送到四字</li>
<li>movswq 將做了符號擴展的字傳送到四字</li>
<li>movslq 將做了符號擴展的雙子傳送到四字</li>
<li>cltq 把%eax符號擴展到%rax [只作用在這2個寄存器]</li>
</ul>
<h2 id="MOV使用例子"><a href="#MOV使用例子" class="headerlink" title="MOV使用例子"></a>MOV使用例子</h2><p>movabsq $0x0011223344556677,%rax     %rax=0011223344556677<br>movb    $-1,%al                      %rax=00112233445566FF<br>movw    $-1,%ax                      %rax=001122334455FFFF<br>movl    $-1,%eax                     %rax=00000000FFFFFFFF<br>movq    $-1,%rax                     %rax=FFFFFFFFFFFFFFFF</p>
<p>練習3.2<br>movl %eax,(%rsp) 雙字，因為EAX是32位元(雙字)寄存器<br>movw (%rax),%dx 字，因為dx是16位元寄存器<br>movb $0XFF,%bl 字節，因為bl是8位元寄存器<br>movb (%rsp,%rdx,4).%dl 字節，因為dl是8位元寄存器<br>movq (%rdx),(%rax) 四字，因為RAX為64位元寄存器<br>movw %dx,(%rax) 字，因為dx是16位元寄存器</p>
<h2 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h2><p>下面是movb，movsbq和movzbq在傳送上改變/不改變高字節的差別<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">movabsq $0x001122334455677,%rax   %rax = <span class="number">0011223344556677</span></div><div class="line">movb    $0xAA,%dl                 %dl  = AA</div><div class="line">movb    $dl,%al                   %rax = <span class="number">00112233445566</span>AA</div><div class="line">movsbq  $dl,%rax                  %rax = FFFFFFFFFFFFFFAA</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Deep Understanding of Operating System </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Assembly Language </tag>
            
            <tag> Operating System </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python數據結構-列表，元組，字典，集合]]></title>
      <url>/2017/12/27/pythonlearn01/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-列表"><a href="#0x01-列表" class="headerlink" title="0x01 列表"></a>0x01 列表</h1><p>用來保存一系列有序項目的集合。<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 訪問列表中的值</span></div><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Youtube'</span>, <span class="number">2017</span>, <span class="number">2018</span>]</div><div class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</div><div class="line"></div><div class="line">print(<span class="string">"list1[0]: "</span>, list1[<span class="number">0</span>])</div><div class="line">print(<span class="string">"list2[1:5]: "</span>, list2[<span class="number">1</span>:<span class="number">5</span>])</div><div class="line"></div><div class="line"><span class="comment"># 更新列表內容</span></div><div class="line">list = [<span class="string">'Google'</span>, <span class="string">'Youtube'</span>, <span class="number">2017</span>, <span class="number">2018</span>]</div><div class="line">print(<span class="string">"The 3rd Element is "</span>.list[<span class="number">2</span>])</div><div class="line">list = [<span class="number">2</span>] = <span class="number">2020</span></div><div class="line">print(<span class="string">"The New 3rd Element is "</span>,list[<span class="number">2</span>])</div><div class="line"></div><div class="line"><span class="comment"># 刪除列表內容</span></div><div class="line">list = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</div><div class="line"> </div><div class="line"><span class="keyword">print</span> (list)</div><div class="line"><span class="keyword">del</span> list[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> (<span class="string">'删除第三个元素 : '</span>, list)</div></pre></td></tr></table></figure></p>
<h2 id="列表函數"><a href="#列表函數" class="headerlink" title="列表函數"></a>列表函數</h2><p><code>len(list)</code> - 列表裡面元素的數量。<br><code>max(list)</code> - 返回列表元素最大值。<br><code>min(list)</code> - 返回列表元素最小值。<br><code>list(seq)</code> - 將元組轉為列表。</p>
<h2 id="列表的使用方法"><a href="#列表的使用方法" class="headerlink" title="列表的使用方法"></a>列表的使用方法</h2><h3 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h3><p><code>list.append(obj)</code> - 在列表末尾添加新的對象。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Twitter'</span>]</div><div class="line">list1.append(<span class="string">'Instagram'</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"更新后的列表 : "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">更新后的列表 : [<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Twitter'</span>, <span class="string">'Instagram'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p><code>list.count(obj)</code> - 統計某個元素在列表中出現的次數。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">aList = [<span class="string">'Google'</span>, <span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>, <span class="string">'Twitter'</span>, <span class="string">'Instagram'</span>]</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"Instagram元素個數 : "</span>, aList.count(<span class="string">'Instagram'</span>))</div><div class="line"></div><div class="line">結果</div><div class="line">Instagram元素個數 : <span class="number">2</span></div></pre></td></tr></table></figure></p>
<h3 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h3><p><code>list.extend(seq)</code> - 在列表末尾一次性追加另一個序列中的多個值(用新列表擴展原來的列表)。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>]</div><div class="line">list2=list(range(<span class="number">5</span>)) <span class="comment"># 创建 0-4 的列表</span></div><div class="line">list1.extend(list2)  <span class="comment"># 扩展列表</span></div><div class="line"><span class="keyword">print</span> (<span class="string">"擴展後的列表："</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">擴展後的列表：[<span class="string">'Google'</span>, <span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>list.pop(obj=list[-1])</code> - 移除列表中的一個元素</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>,<span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>]</div><div class="line">list1.pop()</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表現在為 : "</span>, list1)</div><div class="line">list1.pop(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表現在為 : "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表現在為 :  [<span class="string">'Google'</span>, <span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>]</div><div class="line">列表現在為 :  [<span class="string">'Google'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p><code>list.remove(obj)</code> - 用於移除列表中某個值的第一個匹配項。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>,<span class="string">'Instagram'</span>,<span class="string">'Facebook'</span>, <span class="string">'Twitter'</span>]</div><div class="line">list1.remove(<span class="string">'Facbook'</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表現在為 : "</span>, list1)</div><div class="line">list1.remove(<span class="string">'Google'</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表現在為 : "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表現在為 : [<span class="string">'Google'</span>, <span class="string">'Instagram'</span>, <span class="string">'Twitter'</span>]</div><div class="line">列表現在為 : [<span class="string">'Instagram'</span>, <span class="string">'Twitter'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p><code>list.reverse((obj)</code> - 反向列表中元素。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Taobao'</span>, <span class="string">'Baidu'</span>]</div><div class="line">list1.reverse()</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表反轉後: "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表反轉後: [<span class="string">'Baidu'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>, <span class="string">'Google'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p><code>list.sort([func])</code> - 對原列表進行排序，如果指定參數，則使用比較函數指定的比較函數。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Baidu'</span>]</div><div class="line">list1.sort()</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表排序后: "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表排序后: [<span class="string">'Baidu'</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p><code>list.clear()</code> - 清空列表內容。</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Baidu'</span>]</div><div class="line">list1.clear()</div><div class="line"><span class="keyword">print</span> (<span class="string">"列表清空后: "</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表清空后: [ ]</div></pre></td></tr></table></figure></p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><code>list.copy()</code> - 複製列表</p>
<p>使用例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Baidu'</span>]</div><div class="line">list2 = list1.copy()</div><div class="line"><span class="keyword">print</span> (<span class="string">"list2 列表: "</span>, list2)</div><div class="line"></div><div class="line">結果</div><div class="line">list2 列表:  [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Baidu'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><p><code>list.index(obj)</code>- 從列表中找出某個值第一個匹配項的索引位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>,<span class="string">'Twitter'</span>]</div><div class="line"><span class="keyword">print</span> (<span class="string">'Twitter 索引值為'</span>, list1.index(<span class="string">'Twitter'</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">'Google 索引值為'</span>, list1.index(<span class="string">'Google'</span>))</div><div class="line"></div><div class="line">結果</div><div class="line">Twitter 索引值為<span class="number">3</span></div><div class="line">Google 索引值為<span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h3><p><code>list.insert(index,obj)</code>- 將指定對象插入列表的指定位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Yahoo'</span>, <span class="string">'Instargram'</span>]</div><div class="line">list1.insert(<span class="number">1</span>, <span class="string">'Catsoda'</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">'列表插入元素后為 : '</span>, list1)</div><div class="line"></div><div class="line">結果</div><div class="line">列表插入元素后為 : [<span class="string">'Google'</span>, <span class="string">'Catsoda'</span>, <span class="string">'Yahoo'</span>, <span class="string">'Instargram'</span>]</div></pre></td></tr></table></figure>
<h1 id="0x02-元組"><a href="#0x02-元組" class="headerlink" title="0x02 元組"></a>0x02 元組</h1><p>用來保存一系列有序項目的集合，只是裡面的內容無法更改。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一般使用方法</span></div><div class="line">tup1 = (<span class="string">'Google'</span>, <span class="string">'Yahoo'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</div><div class="line">tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">tup3 = () <span class="comment"># 創建空組</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"tup1[0]: "</span>, tup1[<span class="number">0</span>])</div><div class="line"><span class="keyword">print</span> (<span class="string">"tup2[1:5]: "</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</div><div class="line"></div><div class="line">結果</div><div class="line">tup1[<span class="number">0</span>]: Google</div><div class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]: (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 完全刪除元組內容</span></div><div class="line">tup1 = [<span class="string">'Google'</span>, <span class="string">'Duckduckgo'</span>, <span class="string">'Instagram'</span>]</div><div class="line"><span class="keyword">del</span> tup1</div><div class="line"><span class="keyword">print</span> (tup1)</div><div class="line"></div><div class="line">結果</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> (tup)</div><div class="line">NameError: name <span class="string">'tup'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"></div><div class="line"><span class="comment"># 其他基本使用</span></div><div class="line">len((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 結果為3</span></div><div class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)+(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) <span class="comment"># 結果為(1.2.3.4.5.6)</span></div><div class="line">(<span class="string">"Hi"</span>,)*<span class="number">3</span> <span class="comment"># ("Hi","Hi","Hi")</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="keyword">print</span> x <span class="comment"># 1 2 3</span></div></pre></td></tr></table></figure>
<h2 id="可應用的函數"><a href="#可應用的函數" class="headerlink" title="可應用的函數"></a>可應用的函數</h2><ul>
<li>len(tuple)</li>
<li>max(tuple)</li>
<li>min(tuple)</li>
<li>tuple(seq) - 將列表轉為元組。</li>
</ul>
<h1 id="0x03-字典"><a href="#0x03-字典" class="headerlink" title="0x03 字典"></a>0x03 字典</h1><p>屬於Associative arrays。字典是由键值(Keys)與數值(Values)組成。格式是這樣的<code>d = {key1 : value1, key2 : value2 }</code>。其儲存方式為無序。</p>
<p>key的規則：不可以重複出現。例子若出現重複情況，python只會記住最新賦予的數值。</p>
<p>使用例子<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>&#125;</div><div class="line"> </div><div class="line"><span class="comment"># 訪問裡面的數值</span></div><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>,<span class="string">'Age'</span>: <span class="number">24</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</div><div class="line"></div><div class="line">結果</div><div class="line">dict[<span class="string">'Name'</span>]: Milo</div><div class="line">dict[<span class="string">'Age'</span>]: <span class="number">24</span></div><div class="line"></div><div class="line"><span class="comment"># 修改字典裡面的內容</span></div><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</div><div class="line"></div><div class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新年齡</span></div><div class="line">dict[<span class="string">'School'</span>] = <span class="string">"W3School"</span>  <span class="comment"># 加新的信息</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</div><div class="line"></div><div class="line">結果</div><div class="line">dict[<span class="string">'Age'</span>]: <span class="number">8</span></div><div class="line">dict[<span class="string">'School'</span>]: W3School</div><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 刪除自動字典裡面的內容</span></div><div class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>] <span class="comment"># 删除键 'Name'</span></div><div class="line">dict.clear()     <span class="comment"># 清空字典</span></div><div class="line"><span class="keyword">del</span> dict         <span class="comment"># 删除字典</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</div><div class="line"><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</div><div class="line"></div><div class="line">結果</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</div><div class="line">TypeError: <span class="string">'type'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</div></pre></td></tr></table></figure></p>
<h2 id="可以應用的函數"><a href="#可以應用的函數" class="headerlink" title="可以應用的函數"></a>可以應用的函數</h2><ul>
<li>len(dict) ：計算字典裡面到底有多少個元素，就是Key的總數。</li>
<li>str(dict)：直接輸出整個字典。。</li>
<li>type(variable)：返回輸入的變數，如果變量為字典，則返回的對象會顯示<code>&lt;class &#39;dict&#39;&gt;</code></li>
</ul>
<h2 id="字典內置方法"><a href="#字典內置方法" class="headerlink" title="字典內置方法"></a>字典內置方法</h2><h3 id="radiansdict-clear"><a href="#radiansdict-clear" class="headerlink" title="radiansdict.clear()"></a>radiansdict.clear()</h3><p>用來刪除字典裡面的所有元素<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</div><div class="line"><span class="keyword">print</span> (<span class="string">"字典長度 : %d"</span> %  len(dict))</div><div class="line">dict.clear()</div><div class="line"><span class="keyword">print</span> (<span class="string">"字典删除后長度 : %d"</span> %  len(dict))</div><div class="line"></div><div class="line">結果</div><div class="line">字典长度 : <span class="number">3</span></div><div class="line">字典删除后長度 : <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h3 id="radiansdict-copy"><a href="#radiansdict-copy" class="headerlink" title="radiansdict.copy()"></a>radiansdict.copy()</h3><p>用来返回字典的浅複製。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">dict1 =  &#123;<span class="string">'user'</span>:<span class="string">'Milo'</span>,<span class="string">'num'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</div><div class="line"> </div><div class="line">dict2 = dict1          </div><div class="line">dict3 = dict1.copy()   <span class="comment"># 深Copy父對象（一級目錄），子對象（二級目錄）不copy。</span></div><div class="line"> </div><div class="line"><span class="comment"># 修改data數據</span></div><div class="line">dict1[<span class="string">'user'</span>]=<span class="string">'root'</span></div><div class="line">dict1[<span class="string">'num'</span>].remove(<span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 输出結果</span></div><div class="line">print(dict1)</div><div class="line">print(dict2)</div><div class="line">print(dict3)</div><div class="line"></div><div class="line">結果</div><div class="line">&#123;<span class="string">'user'</span>: <span class="string">'root'</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</div><div class="line">&#123;<span class="string">'user'</span>: <span class="string">'root'</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</div><div class="line">&#123;<span class="string">'user'</span>: <span class="string">'Milo'</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</div><div class="line"><span class="comment"># dict3的父對象進行了深Copy，因此不會隨著dict1修改而修改，子对象是浅copy會随dict1的修改而修改。</span></div></pre></td></tr></table></figure></p>
<h3 id="radiansdict-fromkeys"><a href="#radiansdict-fromkeys" class="headerlink" title="radiansdict.fromkeys()"></a>radiansdict.fromkeys()</h3><p>創建一個新的字典，以序列seq中元素做字典的鍵，value為字典所有鍵對應的初始值。格式如下：<br><code>dict.fromkeys(seq[, value]))</code></p>
<ul>
<li>seq – 字典键值列表。</li>
<li>value – 可選參數,設置键序列(seq)的值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">seq = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'book'</span>)</div><div class="line"></div><div class="line">dict = dict.fromkeys(seq)</div><div class="line"><span class="keyword">print</span> (<span class="string">"新的字典為 : %s"</span> %  str(dict))</div><div class="line"></div><div class="line">dict = dict.fromkeys(seq, <span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"新的字典為 : %s"</span> %  str(dict))</div><div class="line"></div><div class="line">結果</div><div class="line">新的字典為 : &#123;<span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'book'</span>: <span class="keyword">None</span>&#125;</div><div class="line">新的字典為 : &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="number">10</span>, <span class="string">'book'</span>: <span class="number">10</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="radians-get-key-default-None"><a href="#radians-get-key-default-None" class="headerlink" title="radians.get(key,default=None)"></a>radians.get(key,default=None)</h3><p>返回指定鍵的值，如果值不在字典中返回default值。<br><code>dict.get(key, default=None)</code></p>
<ul>
<li>key – 字典中要查找的鍵。</li>
<li>default – 如果指定鍵的值不存在时，返回该默認值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"Age值為 : %s"</span> %  dict.get(<span class="string">'Age'</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"Book值為 : %s"</span> %  dict.get(<span class="string">'Book'</span>, <span class="string">"NA"</span>))</div><div class="line"></div><div class="line">結果</div><div class="line">Age值為 : <span class="number">24</span></div><div class="line">Book值為 : NA</div></pre></td></tr></table></figure>
<h3 id="key-in-dict"><a href="#key-in-dict" class="headerlink" title="key in dict"></a>key in dict</h3><p>查看字典裡面是否存在某個鍵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line"><span class="keyword">if</span> <span class="string">'Age'</span> <span class="keyword">in</span> dict:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"鍵Age存在"</span>))</div><div class="line"></div><div class="line">結果</div><div class="line">鍵Age存在</div></pre></td></tr></table></figure></p>
<h3 id="radiansdict-items"><a href="#radiansdict-items" class="headerlink" title="radiansdict.items()"></a>radiansdict.items()</h3><p>返回一切字典裡面的Key和Value。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line"><span class="keyword">print</span> (<span class="string">"Value : %s"</span> %  dict.items())</div><div class="line"></div><div class="line">結果</div><div class="line">Value : dict_items([(<span class="string">'Age'</span>, <span class="number">24</span>), (<span class="string">'Name'</span>, <span class="string">'Milo'</span>)])</div></pre></td></tr></table></figure></p>
<h3 id="radiansdict-keys"><a href="#radiansdict-keys" class="headerlink" title="radiansdict.keys()"></a>radiansdict.keys()</h3><p>返回字典裡面所有的Key。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line"><span class="keyword">print</span> (<span class="string">"字典裡面所有的鍵為: %s"</span> %  dict.keys())</div><div class="line"></div><div class="line">結果</div><div class="line">字典裡面所有的鍵為: dict_keys[(<span class="string">'Age'</span>,<span class="string">'Name'</span>)])</div></pre></td></tr></table></figure></p>
<h3 id="radiansdict-setdefault-key-default-None"><a href="#radiansdict-setdefault-key-default-None" class="headerlink" title="radiansdict.setdefault(key, default=None)"></a>radiansdict.setdefault(key, default=None)</h3><p>如果Key在字典裡面，返回Defaut的Key以及其對應的Value，反之則新的Key的默認值None。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"Age鍵的值為 : %s"</span> %  dict.setdefault(<span class="string">'Age'</span>, <span class="keyword">None</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"Sex鍵的值為 : %s"</span> %  dict.setdefault(<span class="string">'Sex'</span>, <span class="keyword">None</span>))</div><div class="line"><span class="keyword">print</span> (<span class="string">"新字典為："</span>, dict)</div><div class="line"></div><div class="line">結果</div><div class="line">Age键的值為 : <span class="number">24</span></div><div class="line">Sex键的值為 : <span class="keyword">None</span></div><div class="line">新字典為： &#123;<span class="string">'Age'</span>: <span class="number">24</span>, <span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Sex'</span>: <span class="keyword">None</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="radiansdict-update-dict2"><a href="#radiansdict-update-dict2" class="headerlink" title="radiansdict.update(dict2)"></a>radiansdict.update(dict2)</h3><p>把dict2的值更新到dict裡面。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>&#125;</div><div class="line">dict2 = &#123;<span class="string">'Hobby'</span>: <span class="string">'Diabolo'</span> &#125;</div><div class="line"></div><div class="line">dict.update(dict2)</div><div class="line">print(<span class="string">"更新後的字典為： "</span>, dict)</div><div class="line"></div><div class="line">結果</div><div class="line">更新後的字典為：&#123;<span class="string">'Hobby'</span>: <span class="string">'Diabolo'</span>,<span class="string">'Age'</span>: <span class="number">24</span>,<span class="string">'Name'</span>:<span class="string">'Milo'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="radiansdict-values"><a href="#radiansdict-values" class="headerlink" title="radiansdict.values()"></a>radiansdict.values()</h3><p>返回所有在字典裡面的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Milo'</span>, <span class="string">'Age'</span>: <span class="number">24</span>,<span class="string">'Hobby'</span>: <span class="string">'Diabolo'</span>&#125;</div><div class="line"></div><div class="line">print(<span class="string">"更新後的字典為： "</span>, list(dict.values()))</div><div class="line"></div><div class="line">結果</div><div class="line">更新後的字典為：&#123;<span class="string">'Diabolo'</span>, <span class="number">24</span>, <span class="string">'Milo'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="pop-key-default"><a href="#pop-key-default" class="headerlink" title="pop(key[,default])"></a>pop(key[,default])</h3><p>用來刪除字典給固定的鍵key所對應的值，返回的值是被刪除的值，因此必須給key，否則返回的會是Default的值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>site= &#123;<span class="string">'name'</span>: <span class="string">'量子城'</span>, <span class="string">'post'</span>: <span class="number">25</span>, <span class="string">'url'</span>: <span class="string">'http://diabolo94.github.io/'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pop_obj=site.pop(<span class="string">'name'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(pop_obj)</div><div class="line">量子城</div></pre></td></tr></table></figure>
<h3 id="popitem"><a href="#popitem" class="headerlink" title="popitem()"></a>popitem()</h3><p>隨機返回並且刪除字典裡中的一對Key和Value，通常刪除最後的那一Pair。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">site= &#123;<span class="string">'name'</span>: <span class="string">'量子城'</span>, <span class="string">'post'</span>: <span class="number">25</span>, <span class="string">'url'</span>: <span class="string">'http://diabolo94.github.io/'</span>&#125;</div><div class="line">pop_obj=site.popitem()</div><div class="line">print(pop_obj)   </div><div class="line">print(site)</div><div class="line"></div><div class="line">結果</div><div class="line">(<span class="string">'url'</span>, <span class="string">'http://diabolo94.github.io/'</span>)</div><div class="line">&#123;<span class="string">'name'</span>: <span class="string">'量子城'</span>, <span class="string">'post'</span>: <span class="number">25</span>&#125;</div></pre></td></tr></table></figure>
<p>關於集合以後補上。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正則表達式Regular expression 個人筆記]]></title>
      <url>/2017/12/17/regex/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Regular-Expression-Syntax"><a href="#Regular-Expression-Syntax" class="headerlink" title="Regular Expression Syntax"></a>Regular Expression Syntax</h1><table>
<thead>
<tr>
<th style="text-align:left">特殊符號</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符(Newline)以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的開始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的結束</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配前面出現0次或多次的正則表達式</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">匹配前面出現1次或多次的正則表達式</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配前面出現0次或1次的正則表達式</td>
</tr>
<tr>
<td style="text-align:left">{m}</td>
<td style="text-align:left">m必須為一個非負整數。匹配確定的m次，例如可以匹配a{6}，你只能匹配有6個’a’的正則式</td>
</tr>
<tr>
<td style="text-align:left">{m,n}</td>
<td style="text-align:left">匹配的次數需要在m和之間。其中m&lt;=n.例如，o{1,3}只可以匹配“fooooood”裡面前三個的o。</td>
</tr>
<tr>
<td style="text-align:left">{m,}</td>
<td style="text-align:left">匹配的次數最少為m，最多無限制。</td>
</tr>
<tr>
<td style="text-align:left">{m,n}?</td>
<td style="text-align:left">加了問號正則式只會匹配m而已，例子：‘aaaaaa’中，a{3,5}?,只會匹配3個a。</td>
</tr>
</tbody>
</table>
<p>\</p>
<pre><code>Either escapes special characters (permitting you to match characters like &apos;*&apos;, &apos;?&apos;, and so forth), or signals a special sequence; special sequences are discussed below.

If you’re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn’t recognized by Python’s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it’s highly recommended that you use raw strings for all but the simplest expressions.
</code></pre><p>[]</p>
<pre><code>Used to indicate a set of characters. In a set:

    Characters can be listed individually, e.g. [amk] will match &apos;a&apos;, &apos;m&apos;, or &apos;k&apos;.
    Ranges of characters can be indicated by giving two characters and separating them by a &apos;-&apos;, for example [a-z] will match any lowercase ASCII letter, [0-5][0-9] will match all the two-digits numbers from 00 to 59, and [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a\-z]) or if it’s placed as the first or last character (e.g. [-a] or [a-]), it will match a literal &apos;-&apos;.
    Special characters lose their special meaning inside sets. For example, [(+*)] will match any of the literal characters &apos;(&apos;, &apos;+&apos;, &apos;*&apos;, or &apos;)&apos;.
    Character classes such as \w or \S (defined below) are also accepted inside a set, although the characters they match depends on whether ASCII or LOCALE mode is in force.
    Characters that are not within a range can be matched by complementing the set. If the first character of the set is &apos;^&apos;, all the characters that are not in the set will be matched. For example, &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; will match any character except &apos;5&apos;, and [^^] will match any character except &apos;^&apos;. ^ has no special meaning if it’s not the first character in the set.
    To match a literal &apos;]&apos; inside a set, precede it with a backslash, or place it at the beginning of the set. For example, both [()[\]{}] and []()[{}] will both match a parenthesis.
</code></pre><p>|<br>    A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B. An arbitrary number of REs can be separated by the ‘|’ in this way. This can be used inside groups (see below) as well. As the target string is scanned, REs separated by ‘|’ are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match. In other words, the ‘|’ operator is never greedy. To match a literal ‘|’, use |, or enclose it inside a character class, as in [|].</p>
]]></content>
      
        <categories>
            
            <category> Core Python Application Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Linking </tag>
            
            <tag> Python </tag>
            
            <tag> Regex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解計算機第七章筆記-鏈接]]></title>
      <url>/2017/12/13/linking/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="何為鏈接"><a href="#何為鏈接" class="headerlink" title="何為鏈接"></a>何為鏈接</h1><p>鏈接就是將不一樣部分的代碼和數據收集，然後再合成一個單一的文件，該文件可以被載入到內存並且被執行。鏈接可以在編譯時、載入時或運行時執行。<a id="more"></a></p>
<p>本文章涵蓋的內容有目標文件種類、ELF格式、PLT(Procedure Linkage Table，程序鏈接表)、GOT(Global Offset Table，全局偏移表)、靜態鏈接、載入時和運行時的動態鏈接。</p>
<p>在了解鏈接的過程之前，我們必須先對ELF格式和目標文件有個概念才能更加容易對鏈接有深刻的理解。</p>
<h1 id="目標文件"><a href="#目標文件" class="headerlink" title="目標文件"></a>目標文件</h1><p>目標文件是源代碼編譯後，但未進行鏈接的那些中間文件(Windows裡面是.obj，Linux裡面是.o)，也可以說是位元組塊的集合。而連結器的作用就是要將這些元組塊連接起來，確定被連結塊的運行時位置，並修改代碼和數據塊中的各種位置。</p>
<p>目標文件的三種形式為：</p>
<ul>
<li>可重定位目標文件(Relocatable File)：包含二進位制代碼和數據，可以在編譯時和其他可重定位目標文件或共享目標文件合拼，創建可執行目標文件。File Extension通常為.o。</li>
<li>可執行目標文件(Executable File)：包含二進位制代碼和數據，可以被直接複製到存儲器並執行。Linux裡面的一般沒有File Extension。</li>
<li>共享目標文件(Shared Object File：特殊類型的可重定位目標文件，可在載入或運行時被動態地載入到存儲器並連結。通常以 .so 结尾。一般情况下，它有以下两种使用情景：<br>(1)链接器(Link editor, ld)会处理它和其它可重定位文件以及共享目标文件，生成另外一个目标文件。<br>(2)動態連結器(Dynamic Linker)將它與可執行文件以及其它共享目標合拼在一起生成進程映像。</li>
</ul>
<p>目标文件由匯編器和鏈接器創建，是可以在处理器上直接運行的二进制程序。那些需要虛擬機才能够執行的程序，如shell脚本，並不属于这一范围。</p>
<h2 id="初步認識ELF文件"><a href="#初步認識ELF文件" class="headerlink" title="初步認識ELF文件"></a>初步認識ELF文件</h2><p>而以上三種形式在Linux裡面都主要稱為ELF文件格式，因為ELF其實本身就是程序的載體，只要通過編譯後的代碼，最終都會被轉成ELF文件格式然後再讓系統根據所定義出來的ELF格式文件來進行所謂的靜態鏈接或動態鏈接(待查證)。</p>
<p>那麼一個ELF文件是由以下幾個部分所組成：</p>
<ul>
<li>File header(文件頭)</li>
<li>Section header table(節區頭部表：通常可重定位目標文件需要這部分，而可執行目標文件則不一定要包含這部分。)</li>
<li>Program header table(程序頭部表：通常可執行目標文件需要這部分，而是可重定位目標文件則不一定要包含這部分。)</li>
<li>Contents of the sections or segments(節或段落裡面的內容)</li>
</ul>
<h2 id="ELF文件格式"><a href="#ELF文件格式" class="headerlink" title="ELF文件格式"></a>ELF文件格式</h2><p><img src="https://s7.postimg.org/7yshpolnv/elfformat.jpg" alt=""></p>
<p>英文版本的Elf文件格式<br><img src="https://s7.postimg.org/fst3am3m3/ELF101.png" alt=""></p>
<p>當然ELF文件一般會看成這2種視角。<br><img src="https://s13.postimg.org/93k5ur3tj/angleversion.jpg" alt=""></p>
<h3 id="Elf頭部"><a href="#Elf頭部" class="headerlink" title="Elf頭部"></a>Elf頭部</h3><p>Elf頭部用來描述文件的基本屬性。例如：目標機器型號，程序入口地址和ELF文件版本等等。</p>
<p>ELF文件頭結構以及裡面的相關常數會被定義在<code>/usr/include/elf.h</code>裡面。這裡是<a href="http://sourceware.org/git/?p=glibc.git;a=blob_plain;f=elf/elf.h" target="_blank" rel="noopener">elf.h</a>的內容。</p>
<p>在<code>elf.h</code>裡面ELF文件頭的定義部分是這樣的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The ELF file header. This appears at the start of every ELF file.  */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT (16)</span></div><div class="line"></div><div class="line"><span class="comment">/*32位的版本*/</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>	e_ident[EI_NIDENT];	<span class="comment">/* Magic number and other info */</span></div><div class="line">  Elf32_Half	e_type;			<span class="comment">/* Object file type */</span></div><div class="line">  Elf32_Half	e_machine;		<span class="comment">/* Architecture */</span></div><div class="line">  Elf32_Word	e_version;		<span class="comment">/* Object file version */</span></div><div class="line">  Elf32_Addr	e_entry;		<span class="comment">/* Entry point virtual address */</span></div><div class="line">  Elf32_Off	    e_phoff;		<span class="comment">/* Program header table file offset */</span></div><div class="line">  Elf32_Off	    e_shoff;		<span class="comment">/* Section header table file offset */</span></div><div class="line">  Elf32_Word	e_flags;		<span class="comment">/* Processor-specific flags */</span></div><div class="line">  Elf32_Half	e_ehsize;		<span class="comment">/* ELF header size in bytes */</span></div><div class="line">  Elf32_Half	e_phentsize;	<span class="comment">/* Program header table entry size */</span></div><div class="line">  Elf32_Half	e_phnum;		<span class="comment">/* Program header table entry count */</span></div><div class="line">  Elf32_Half	e_shentsize;	<span class="comment">/* Section header table entry size */</span></div><div class="line">  Elf32_Half	e_shnum;		<span class="comment">/* Section header table entry count */</span></div><div class="line">  Elf32_Half	e_shstrndx;		<span class="comment">/* Section header string table index */</span></div><div class="line">&#125; Elf32_Ehdr;</div><div class="line"></div><div class="line"><span class="comment">/*64位的版本*/</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>	e_ident[EI_NIDENT];	<span class="comment">/* Magic number and other info */</span></div><div class="line">  Elf64_Half	e_type;			<span class="comment">/* Object file type */</span></div><div class="line">  Elf64_Half	e_machine;		<span class="comment">/* Architecture */</span></div><div class="line">  Elf64_Word	e_version;		<span class="comment">/* Object file version */</span></div><div class="line">  Elf64_Addr	e_entry;		<span class="comment">/* Entry point virtual address */</span></div><div class="line">  Elf64_Off	    e_phoff;		<span class="comment">/* Program header table file offset */</span></div><div class="line">  Elf64_Off	    e_shoff;		<span class="comment">/* Section header table file offset */</span></div><div class="line">  Elf64_Word	e_flags;		<span class="comment">/* Processor-specific flags */</span></div><div class="line">  Elf64_Half	e_ehsize;		<span class="comment">/* ELF header size in bytes */</span></div><div class="line">  Elf64_Half	e_phentsize;	<span class="comment">/* Program header table entry size */</span></div><div class="line">  Elf64_Half	e_phnum;		<span class="comment">/* Program header table entry count */</span></div><div class="line">  Elf64_Half	e_shentsize;	<span class="comment">/* Section header table entry size */</span></div><div class="line">  Elf64_Half	e_shnum;		<span class="comment">/* Section header table entry count */</span></div><div class="line">  Elf64_Half	e_shstrndx;		<span class="comment">/* Section header string table index */</span></div><div class="line">&#125; Elf64_Ehdr;</div><div class="line"></div><div class="line"><span class="comment">/* Fields in the e_ident array.  The EI_* macros are indices into the</span></div><div class="line"><span class="comment">   array.  The macros under each EI_* macro are the values the byte</span></div><div class="line"><span class="comment">   may have.  */</span></div></pre></td></tr></table></figure></p>
<p>以下是ELF頭的例子。<br><img src="https://s7.postimg.org/rip3sgoyz/elfheader.jpg" alt=""></p>
<p>而我用來查看<code>SimpleSection.o</code>的Elf頭。源文件代碼如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* SimpleSection.c */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format,...)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> global_init_var =<span class="number">84</span>; <span class="comment">//</span></div><div class="line"><span class="keyword">int</span> global_uninit_var;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> static_var =<span class="number">85</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> static_var2;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> b;</div><div class="line">    funcl1(static_var + static_var2 + a + b);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然後用<code>gcc -c SimpleSection.c</code>後你會得到一個SimpleSection.o的二進制文件，這時你就可以用<code>readelf -h SimpleSection.o</code>來查看Elf頭。這裡 -c 的意思為不進行鏈接。</p>
<h3 id="ELF頭部成員"><a href="#ELF頭部成員" class="headerlink" title="ELF頭部成員"></a>ELF頭部成員</h3><blockquote>
<p><code>e_ident</code> </p>
</blockquote>
<p>主要是用來判定該文件為ELF目標文件，同時提供關於用於解碼和解釋文件結構有關的數據表示方式(Data Representation of a data structure)。這個數組對於不同的下標的含義如下:</p>
<table>
<thead>
<tr>
<th style="text-align:left">宏名稱</th>
<th style="text-align:left">取值</th>
<th style="text-align:left">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">EI_MAG0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">文件標識(File identification)</td>
</tr>
<tr>
<td style="text-align:left">EI_MAG1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">文件標識(File identification)</td>
</tr>
<tr>
<td style="text-align:left">EI_MAG2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">文件標識(File identification)</td>
</tr>
<tr>
<td style="text-align:left">EI_MAG3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">文件標識(File identification)</td>
</tr>
<tr>
<td style="text-align:left">EI_CLASS</td>
<td style="text-align:left">4</td>
<td style="text-align:left">文件類別(File Class)</td>
</tr>
<tr>
<td style="text-align:left">EI_DATA</td>
<td style="text-align:left">5</td>
<td style="text-align:left">數據編碼(Data Encoding)</td>
</tr>
<tr>
<td style="text-align:left">EI_VERSION</td>
<td style="text-align:left">6</td>
<td style="text-align:left">文件版本(File Version)</td>
</tr>
<tr>
<td style="text-align:left">EI_OSABI</td>
<td style="text-align:left">7</td>
<td style="text-align:left">OS/ABI 標識(OS/ABI)</td>
</tr>
<tr>
<td style="text-align:left">EI_ABIVERSION</td>
<td style="text-align:left">8</td>
<td style="text-align:left">ABI版本</td>
</tr>
<tr>
<td style="text-align:left">EI_PAD</td>
<td style="text-align:left">9</td>
<td style="text-align:left">補齊字節開始處(Start of padding bytes)</td>
</tr>
<tr>
<td style="text-align:left">EI_NIDENT</td>
<td style="text-align:left">16</td>
<td style="text-align:left">e_ident部分的大小(Size of e-ident[])</td>
</tr>
</tbody>
</table>
<p>其中<code>EI_MAG0</code>到<code>EI_MAG3</code>會顯示出這個文件是ELF文件，也叫做魔數(Magic Number)。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">值</th>
<th style="text-align:left">位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ELFMAG0</td>
<td style="text-align:left">0x7f</td>
<td style="text-align:left">e_ident[EI_MAG0]</td>
</tr>
<tr>
<td style="text-align:left">ELFMAG1</td>
<td style="text-align:left">‘E’</td>
<td style="text-align:left">e_ident[EI_MAG1]</td>
</tr>
<tr>
<td style="text-align:left">ELFMAG2</td>
<td style="text-align:left">‘L’</td>
<td style="text-align:left">e_ident[EI_MAG2]</td>
</tr>
<tr>
<td style="text-align:left">ELFMAG3</td>
<td style="text-align:left">‘F’</td>
<td style="text-align:left">e_ident[EI_MAG3]</td>
</tr>
</tbody>
</table>
<p><code>e_ident[EI_CLASS]</code>為<code>e_ident[EI_MAG3]</code>的下一个字節，專用來表示文件的類型或容量。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">值</th>
<th style="text-align:left">意義</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ELFCLASSNONE</td>
<td style="text-align:left">0</td>
<td style="text-align:left">無效類型</td>
</tr>
<tr>
<td style="text-align:left">ELFCLASS32</td>
<td style="text-align:left">1</td>
<td style="text-align:left">32位文件</td>
</tr>
<tr>
<td style="text-align:left">ELFCLASS64</td>
<td style="text-align:left">2</td>
<td style="text-align:left">64位文件</td>
</tr>
</tbody>
</table>
<p>這兩個類型的差別在於ELFCLASS32類型支持文件大小和虚拟地址空間上限为4GB的機器而ELFCLASS64類型被保留用于64位架構。它表明目標文件能会改變。在必要时，会定義附带有不同的基本類型目標文件數據大小的其他類型。</p>
<p><code>e_ident[EI_DATA]</code>位元組給出了目標文件中的特定處理器數據的編碼方式。下面是目前已定義的編碼：</p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">值</th>
<th style="text-align:left">意義</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ELFDATANONE</td>
<td style="text-align:left">0</td>
<td style="text-align:left">無效數據編碼</td>
</tr>
<tr>
<td style="text-align:left">ELFDATA2LSB</td>
<td style="text-align:left">1</td>
<td style="text-align:left">小端</td>
</tr>
<tr>
<td style="text-align:left">ELFDATA2MSB</td>
<td style="text-align:left">2</td>
<td style="text-align:left">大端</td>
</tr>
</tbody>
</table>
<ul>
<li><p>大端模式，是指數據的高位元組保存在記憶體的低地址中，而數據的低位元組保存在記憶體的高地址中，這樣的存儲模式有點類似於把數據當作字串順序處理：地址由小向大增加，而數據從高位往低位放；這和我們的閱讀習慣一致。<br><img src="https://s9.postimg.org/67rfvwfcf/elfdata2msb.jpg" alt=""></p>
</li>
<li><p>小端模式，是指數據的高位元組保存在記憶體的高地址中，而數據的低位元組保存在記憶體的低地址中，這種存儲模式將地址的高低和數據位權有效地結合起來，高地址部分權值高，低地址部分權值低。<br><img src="https://s9.postimg.org/x5lcxms9r/elfdata2lsb.jpg" alt=""></p>
</li>
</ul>
<p>其它值被保留，在未來必要時將被賦予新的編碼。</p>
<p><code>e_ident[EI_VERSION]</code>給出了ELF頭的版本號。目前這個值必須是EV_CURRENT，詳情請看等下的<code>e_version</code>。</p>
<p><code>e_ident[EI_PAD]</code>給出了<code>e_ident</code>中未使用位元組的開始地址。這些位元組被保留並置為0。</p>
<p>處理目標文件的程序應該忽略它們。如果之後這些位元組被使用，<code>EI_PAD</code>的值就會改變。</p>
<blockquote>
<p>e_type</p>
</blockquote>
<p>用來定義文件的類型。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名稱</th>
<th style="text-align:left">值</th>
<th style="text-align:left">意義</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ET_NONE</td>
<td style="text-align:left">0</td>
<td style="text-align:left">無文件類型</td>
</tr>
<tr>
<td style="text-align:left">ET_REL</td>
<td style="text-align:left">1</td>
<td style="text-align:left">可重定位文件</td>
</tr>
<tr>
<td style="text-align:left">ET_EXEC</td>
<td style="text-align:left">2</td>
<td style="text-align:left">可執行文件</td>
</tr>
<tr>
<td style="text-align:left">ET_DYN</td>
<td style="text-align:left">3</td>
<td style="text-align:left">共享目標文件</td>
</tr>
<tr>
<td style="text-align:left">ET_CORE</td>
<td style="text-align:left">4</td>
<td style="text-align:left">核心轉儲文件</td>
</tr>
<tr>
<td style="text-align:left">ET_LOOS</td>
<td style="text-align:left">0xfe00</td>
<td style="text-align:left">操作系統指定</td>
</tr>
<tr>
<td style="text-align:left">ET_HIOS</td>
<td style="text-align:left">0xfeff</td>
<td style="text-align:left">操作系統指定</td>
</tr>
<tr>
<td style="text-align:left">ET_LOPROC</td>
<td style="text-align:left">0xff00</td>
<td style="text-align:left">處理器指定</td>
</tr>
<tr>
<td style="text-align:left">ET_HIPROC</td>
<td style="text-align:left">0xffff</td>
<td style="text-align:left">處理器指定</td>
</tr>
</tbody>
</table>
<p>雖然核心轉儲文件的內容沒有被詳細說明，但<code>ET_CORE</code>還是被保留用於標誌此類文件。從<code>ET_LOOS</code>到<code>ET_HIOS</code>(包括邊界)會被保留用於操作系統處理的場景。而從<code>ET_LOPROC</code>到<code>ET_HIPROC</code>(包括邊界)則會被保留用於處理器指定的場景。其它值在未來必要時可被賦予新的目標文件類型。</p>
<blockquote>
<p>e_machine</p>
</blockquote>
<p>用來定義當前文件的機械架構。</p>
<p>名稱|值|意義|<br>|:——|:——|:——|<br>|EM_NONE|0|無機械類型|<br>|EM_M32|1|AT&amp;T WE 32100|<br>|EM_SPARC|2|SPARC|<br>|EM_386|3|Intel 80386|<br>|EM_68K|4|Motorola 68000|<br>|EM_88K|5|Motorola 88000|<br>|EM_860|7|Intel 80860|<br>|EM_MIPS|8|MIPS I Architecture|</p>
<p>當然還有<a href="http://www.sco.com/developers/gabi/latest/ch4.eheader.html" target="_blank" rel="noopener">其他類別</a>的機械結構。</p>
<blockquote>
<p>e_version</p>
</blockquote>
<p>用來顯示文件當前版本。</p>
<p>名稱|值|意義|<br>|:——|:——|:——|<br>|EV_NONE|0|無效版本|<br>|EV_CURRENT|1|目前版本|</p>
<blockquote>
<p>e_entry</p>
</blockquote>
<p>這一項給系統轉交控制權給ELF中的代碼的虛擬地址。如果沒有相關入口項(Associated entry point)，則這一項為0。</p>
<blockquote>
<p>e_phoff</p>
</blockquote>
<p>這一項給出程序頭部表在文件中的位元組偏移(Program Header table Offset)。如果文件中沒有程序頭部表，則為0。</p>
<blockquote>
<p>e_shoff</p>
</blockquote>
<p>這一項給出節頭表在文件中的位元組偏移(Section Header table Offset)。如果文件中沒有節頭表，則為0。</p>
<blockquote>
<p>e_flags</p>
</blockquote>
<p>這一項給出文件中與特定處理器相關的標誌，這些標誌命名格式為<code>EF_machine_flag</code>。</p>
<blockquote>
<p>e_ehsize</p>
</blockquote>
<p>這一項給出ELF文件頭部的位元組長度(ELF Header Size)。</p>
<blockquote>
<p>e_phentsize</p>
</blockquote>
<p>這一項給出程序頭部表中每個表項的位元組長度(Program Header Entry Size)。每個表項的大小相同。</p>
<blockquote>
<p>e_phnum</p>
</blockquote>
<p>這一項給出程序頭部表的項數(Program Header entry Number)。因此，<code>e_phnum</code>與<code>e_phentsize</code>的乘積即為程序頭部表的位元組長度。如果文件中沒有程序頭部表，則該項值為0。</p>
<blockquote>
<p>e_shentsize</p>
</blockquote>
<p>這一項給出節頭的位元組長度(Section Header Entry Size)。一個節頭是節頭表中的一項；節頭表中所有項占據的空間大小相同。</p>
<blockquote>
<p>e_shnum</p>
</blockquote>
<p>這一項給出節頭表中的項數(Section Header Number)。因此，<code>e_shnum</code>與<code>e_shentsize</code>的乘積即為節頭表的位元組長度。如果文件中沒有節頭表，則該項值為0。</p>
<blockquote>
<p>e_shstrndx</p>
</blockquote>
<p>這一項給出節頭表中與節名字串表相關的表項的索引值(Section Header Table Index related with Section Name String Table)。如果文件中沒有節名字串表，則該項值為SHN_UNDEF。關於細節的介紹，請參考後面的「節」和「字串表」部分。</p>
<h3 id="Elf程序頭-Program-Header"><a href="#Elf程序頭-Program-Header" class="headerlink" title="Elf程序頭(Program Header)"></a>Elf程序頭(Program Header)</h3><p>程序的頭部只有對於可執行文件和共享目標文件有意義。其中，ELF文件的頭中的<code>e_phentsize</code>和<code>e_phnum</code>項指定了相應的程序頭的大小。程序頭的數據結構如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Program segment header.  */</span></div><div class="line"></div><div class="line"><span class="comment">/*32位的版本*/</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  Elf32_Word	p_type;			<span class="comment">/* Segment type */</span></div><div class="line">  Elf32_Off	p_offset;		<span class="comment">/* Segment file offset */</span></div><div class="line">  Elf32_Addr	p_vaddr;		<span class="comment">/* Segment virtual address */</span></div><div class="line">  Elf32_Addr	p_paddr;		<span class="comment">/* Segment physical address */</span></div><div class="line">  Elf32_Word	p_filesz;		<span class="comment">/* Segment size in file */</span></div><div class="line">  Elf32_Word	p_memsz;		<span class="comment">/* Segment size in memory */</span></div><div class="line">  Elf32_Word	p_flags;		<span class="comment">/* Segment flags */</span></div><div class="line">  Elf32_Word	p_align;		<span class="comment">/* Segment alignment */</span></div><div class="line">&#125; Elf32_Phdr;</div><div class="line"></div><div class="line"><span class="comment">/*64位的版本*/</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  Elf64_Word	p_type;			<span class="comment">/* Segment type */</span></div><div class="line">  Elf64_Word	p_flags;		<span class="comment">/* Segment flags */</span></div><div class="line">  Elf64_Off	p_offset;		<span class="comment">/* Segment file offset */</span></div><div class="line">  Elf64_Addr	p_vaddr;		<span class="comment">/* Segment virtual address */</span></div><div class="line">  Elf64_Addr	p_paddr;		<span class="comment">/* Segment physical address */</span></div><div class="line">  Elf64_Xword	p_filesz;		<span class="comment">/* Segment size in file */</span></div><div class="line">  Elf64_Xword	p_memsz;		<span class="comment">/* Segment size in memory */</span></div><div class="line">  Elf64_Xword	p_align;		<span class="comment">/* Segment alignment */</span></div><div class="line">&#125; Elf64_Phdr;</div></pre></td></tr></table></figure>
<h3 id="Elf程序頭成員"><a href="#Elf程序頭成員" class="headerlink" title="Elf程序頭成員"></a>Elf程序頭成員</h3><table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">p_type</td>
<td style="text-align:left">表明了對應數組元素的類型或表面了如何解釋該數組元素，具體信息可看待會描述的p_type的段類型</td>
</tr>
<tr>
<td style="text-align:left">p_offset</td>
<td style="text-align:left">此字段為文件開始到段開頭第一字節的偏移</td>
</tr>
<tr>
<td style="text-align:left">p_vaddr</td>
<td style="text-align:left">第一字節內存的虛擬地址</td>
</tr>
<tr>
<td style="text-align:left">p_paddr</td>
<td style="text-align:left">用於物理地址尋址相關系統裡面，由於System V忽略了應用程序的物理尋址，因此可執行文件和共享文件的該項內容並沒有被限定</td>
</tr>
<tr>
<td style="text-align:left">p_filesz</td>
<td style="text-align:left">表明文件鏡像中該字段的大小，可以為0</td>
</tr>
<tr>
<td style="text-align:left">p_memsz</td>
<td style="text-align:left">表明內存鏡像中該字段的大小，可以為0</td>
</tr>
<tr>
<td style="text-align:left">p_flags</td>
<td style="text-align:left">給出和段相關的標記，具體信息可看待會的描述</td>
</tr>
<tr>
<td style="text-align:left">p_align</td>
<td style="text-align:left">需加載程序段的<code>p_vaddr</code>以及<code>p_offset</code>的大小為page的整數倍。該成員給出了段文件和內存中對齊方式。若該數值是0或者1，表示不需要對齊。此外，<code>p_align</code>是2的整數指數次方，並且<code>p_vaddr</code>與<code>p_offset</code>在Modulo p_align的意義下應該相等。詳情請看待會描述</td>
</tr>
</tbody>
</table>
<blockquote>
<p>p_type的段類型</p>
</blockquote>
<p>數值|名字|意義|<br>|:——|:——|:——|<br>|0x00000000|PT_NULL|表明段還沒被使用|<br>|0x00000001|PT_LOAD|是可加載的段，大小由<code>p_filesz</code>和<code>p_memsz</code>來決定。文件中的位元組被映射到相應記憶體段開始處。如果<code>p_memsz</code>大於<code>p_filesz</code>，剩餘」的位元組都會變成0。<code>p_filesz</code>不能大於<code>p_memsz</code>。可載入的段在程序頭部中按照<code>p_vaddr</code>的升序排列。|<br>|0x00000002|PT_DYNAMIC|和動態鏈接信息有關|<br>|0x00000003|PT_INTERP|給出以NULL為结尾的字符串的位置和長度。該字串將被當作解釋器調用。這種段類型僅對可執行文件有意義(也可能出現在共享目標文件中)。此外，這種段在一個文件中最多出現一次。而且這種類型的段存在的話，它必須在所有可載入段項的前面。<br>|0x00000004|PT_NOTE|給出附加信息的位置和大小。|<br>|0x00000005|PT_SHLIB|該段類型被保留，不過語義未指定。而且，包含這種類型的段的程序不符合ABI標準。|<br>|0x00000006|PT_PHDR|該段類型的數組元素如果存在的話，則給出了程序頭部表自身的大小和位置，既包括在文件中也包括在記憶體中的訊息。此類型的段在文件中最多出現一次。此外，只有程序頭部表是程序的記憶體映像的一部分時，它才會出現。如果此類型段存在，則必須在所有可載入段項目的前面。|<br>|0x70000000|PT_LOPROC|略|<br>|0x7FFFFFFF|PT_HIPROC|略|</p>
<blockquote>
<p>基地址-Base Address</p>
</blockquote>
<p>用途：在動態連結期間重新定位程序。</p>
<p>1.程序頭部的虛擬地址可能並不是程序記憶體鏡像中實際的虛擬地址。可執行程序通常都會包含絕對地址的代碼。<br>2.為了使得程序可以正常執行，段必須在相應的虛擬地址處。<br>3.共享目標文件通常來說包含與地址無關的代碼。這可以使得共享目標文件可以被多個進程載入，同時保持程序執行的正確性。<br>4.系統會為不同的進程選擇不同的虛擬地址，也會保留段的相對地址，因為地址無關代碼使用段之間的相對地址來進行定址，記憶體中的虛擬地址之間的差必須與文件中的虛擬地址之間的差相匹配。<br>5.記憶體中任何段的虛擬地址與文件中對應的虛擬地址之間的差值對於任何一個可執行文件或共享對象來說是一個單一常量值。這個差值就是基地址。</p>
<p>可執行文件或者共享目標文件的基地址是在執行過程中由以下三個數值計算的。</p>
<ul>
<li>虛擬記憶體載入地址</li>
<li>最大頁面大小</li>
<li>程序可載入段的最低虛擬地址</li>
</ul>
<p>要計算基地址，首先要確定可載入段中<code>p_vaddr</code>最小的記憶體虛擬地址，之後把該記憶體虛擬地址縮小為與之最近的最大頁面的整數倍即是基地址。根據要載入到記憶體中的文件的類型，記憶體地址可能與<code>p_vaddr</code>相同也可能不同。</p>
<h3 id="段權限"><a href="#段權限" class="headerlink" title="段權限"></a>段權限</h3><h3 id="節頭部表"><a href="#節頭部表" class="headerlink" title="節頭部表"></a>節頭部表</h3><p>ELF可重定位文件裡面有不同大小的條目(entry)。這些條目組成了節頭部表(Section Header Table)。如下圖所示：<br><img src="https://s9.postimg.org/uw9oztkgf/sectionheader.jpg" alt=""></p>
<p>在linux裡面查看Elf Section Header的方式是輸入<code>readelf -S SimpleSection.o</code>。<br><img src="https://s9.postimg.org/o735jmjn3/Simple1.jpg" alt=""><br><img src="https://s9.postimg.org/51zw9xa4v/Simple2.jpg" alt=""></p>
<p>在這裡我們可以看到一共有13個條目(節)。以下我會說明這些節的作用。</p>
<blockquote>
<p>.text</p>
</blockquote>
<p>存放已編譯程序的代碼。</p>
<blockquote>
<p>.rodata</p>
</blockquote>
<p>用來只讀數據</p>
<blockquote>
<p>.data</p>
</blockquote>
<p>存放已初始化的全局和靜態C變量。而局部的C變量則會在運行時保存在棧中。</p>
<blockquote>
<p>.bss</p>
</blockquote>
<p>和上面相反，只存放未初始化的全局C變量。在目標文件中，该節只是佔位符，不占用實際空間。</p>
<blockquote>
<p>.symtab</p>
</blockquote>
<p>符號表，存放程序中被定義和引用的函數和全局變量的信息。另外，它不包含局部變量的表目。</p>
<blockquote>
<p>.rel.text</p>
</blockquote>
<p>和其他文件連結時，<code>.text</code>節中任何調用外部函數或引用全局變數的指令都需要修改（調用本地函數的指令不需要修改）。</p>
<blockquote>
<p>.rel.data</p>
</blockquote>
<p>被模組定義或引用的任何全局變數的訊息，<code>.data</code>節中任何已初始化全局變數的初始值是全局變數或外部定義函數的地址都需要修改。</p>
<p>可執行目標文件不需要重定位訊息，通常省略<code>.rel.text</code>和<code>.rel.data</code>。</p>
<blockquote>
<p>.debug</p>
</blockquote>
<p>調校符號表，以<code>-g</code>選項編譯時得到。包含如定義的局部變數和類型定義，定義和引用的全局變數，原始的C源文件。</p>
<blockquote>
<p>.line</p>
</blockquote>
<p>原始的C源文件中的行號和.text節中機器指令之間的映射，以<code>-g</code>選項編譯時得到。</p>
<blockquote>
<p>.strtab</p>
</blockquote>
<p>字串表，是以null結尾的字串序列，包含.symtab和.debug節中的符號表，節頭部中的節名字。</p>
<blockquote>
<p>.line</p>
</blockquote>
<p>原始的C源文件中的行號和.text節中機器指令之間的映射，以<code>-g</code>選項編譯時得到。</p>
<blockquote>
<p>.strtab</p>
</blockquote>
<p>字符串表，是以null結尾的字符串序列，包含<code>.symtab</code>和<code>.debug</code>節中的符號表，節頭部中的節名字。</p>
<h3 id="符號和符號表"><a href="#符號和符號表" class="headerlink" title="符號和符號表"></a>符號和符號表</h3><p>有3種符號：</p>
<ul>
<li>可重定位目標模塊定義並能被其他模塊引用的全局符號，對應於非靜態屬性的C函數和全局變量。</li>
<li>其他模塊定義並被當前模塊引用的全局符號，稱為外部符號，對應於定義在其他模塊的非静态C函數和全局變量。</li>
<li>只被當前模塊定義和引用的本地符號(局部符号)，對應於有靜態屬性的C函數和全局變量。</li>
</ul>
<p>符號表是匯編器構造的，它是一個包含了以下條目的數組。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> name; <span class="comment">/* String table offset */</span></div><div class="line">    <span class="keyword">char</span> type:<span class="number">4</span>, <span class="comment">/* Function or data */</span></div><div class="line">         binding:<span class="number">4</span>; <span class="comment">/* Local or global */</span></div><div class="line">    <span class="keyword">char</span> reserverd; <span class="comment">/* Unused */</span></div><div class="line">    <span class="keyword">short</span> section; <span class="comment">/* Section hearder index */</span></div><div class="line">    <span class="keyword">long</span> value; <span class="comment">/* Section offset or absolute address */</span></div><div class="line">    <span class="keyword">long</span> size;  <span class="comment">/* Object Size in bytes*/</span></div><div class="line">    &#125; Elf64_Symbol;</div></pre></td></tr></table></figure></p>
<p>/<em> Symbol table entry.  </em>/</p>
<p>typedef struct<br>{<br>  Elf32_Word    st_name;        /<em> Symbol name (string tbl index) </em>/<br>  Elf32_Addr    st_value;        /<em> Symbol value </em>/<br>  Elf32_Word    st_size;        /<em> Symbol size </em>/<br>  unsigned char    st_info;        /<em> Symbol type and binding </em>/<br>  unsigned char    st_other;        /<em> Symbol visibility </em>/<br>  Elf32_Section    st_shndx;        /<em> Section index </em>/<br>} Elf32_Sym;</p>
<p>typedef struct<br>{<br>  Elf64_Word    st_name;        /<em> Symbol name (string tbl index) </em>/<br>  unsigned char    st_info;        /<em> Symbol type and binding </em>/<br>  unsigned char st_other;        /<em> Symbol visibility </em>/<br>  Elf64_Section    st_shndx;        /<em> Section index </em>/<br>  Elf64_Addr    st_value;        /<em> Symbol value </em>/<br>  Elf64_Xword    st_size;        /<em> Symbol size </em>/<br>} Elf64_Sym;</p>
]]></content>
      
        <categories>
            
            <category> Deep Understanding of Operating System </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Operating System </tag>
            
            <tag> Linking </tag>
            
            <tag> ELF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A Practical Guide to Linux 第三章 The Utilities 筆記]]></title>
      <url>/2017/12/12/practicallinux03/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="PIPE-Line"><a href="#PIPE-Line" class="headerlink" title="PIPE Line"></a>PIPE Line</h1><p>在Linux裡面若要將幾個指令連在一行直接運行，可以使用<code>|</code>。例子：查看當前目錄下文件列表裡文件名為car的文件。<br>Command：<code>ls | grep car</code><br><a id="more"></a></p>
<h1 id="Four-More-Utilities"><a href="#Four-More-Utilities" class="headerlink" title="Four More Utilities"></a>Four More Utilities</h1><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><h2 id="unix2dos"><a href="#unix2dos" class="headerlink" title="unix2dos"></a>unix2dos</h2><h1 id="Compressing-and-Archiving-Files"><a href="#Compressing-and-Archiving-Files" class="headerlink" title="Compressing and Archiving Files"></a>Compressing and Archiving Files</h1><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><h2 id="bzcat-and-bunzip2"><a href="#bzcat-and-bunzip2" class="headerlink" title="bzcat and bunzip2"></a>bzcat and bunzip2</h2><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><h1 id="Locating-Utilities"><a href="#Locating-Utilities" class="headerlink" title="Locating Utilities"></a>Locating Utilities</h1><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><h3 id="which-vs-whereis"><a href="#which-vs-whereis" class="headerlink" title="which vs whereis"></a>which vs whereis</h3><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><h1 id="Displaying-User-and-System-information"><a href="#Displaying-User-and-System-information" class="headerlink" title="Displaying  User and System information"></a>Displaying  User and System information</h1><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h2><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h1 id="Communicating-with-other-users"><a href="#Communicating-with-other-users" class="headerlink" title="Communicating with other users"></a>Communicating with other users</h1><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><h2 id="mesg"><a href="#mesg" class="headerlink" title="mesg"></a>mesg</h2>]]></content>
      
        <categories>
            
            <category> A practical guide to Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Binary學習終極導航]]></title>
      <url>/2017/12/10/utimatebinary/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h1><ul>
<li><a href="">C學習指南</a></li>
<li><a href="">匯編語言指南</a></li>
</ul>
<a id="more"></a>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Tools-Guide"><a href="#Tools-Guide" class="headerlink" title="Tools Guide"></a>Tools Guide</h2><ul>
<li><a href="https://goo.gl/biCvDB" target="_blank" rel="noopener">Intro to r2</a></li>
<li><a href="https://goo.gl/RUZc9E" target="_blank" rel="noopener">Diving into radare2</a></li>
<li><a href="https://goo.gl/2NAm3g" target="_blank" rel="noopener">Radare2 Book</a></li>
<li><a href="http://bestwing.me/2017/03/08/angr-study/" target="_blank" rel="noopener">Angr初探</a></li>
<li><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">ZIO</a></li>
<li><a href="https://www.d4rk7r4c3r.cn/2017/01/gdb-peda-readme/" target="_blank" rel="noopener">GDB-peda學習筆記</a> </li>
<li><a href="http://brieflyx.me/2015/python-module/pwntools-intro/" target="_blank" rel="noopener">Exploit利器 - Pwntools</a></li>
<li><a href="http://brieflyx.me/2015/python-module/pwntools-advanced/" target="_blank" rel="noopener">PwnTools 高級應用</a></li>
</ul>
<h1 id="Courses"><a href="#Courses" class="headerlink" title="Courses"></a>Courses</h1><ul>
<li><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="noopener">Modern Binary Exploitation</a></li>
<li><a href="https://github.com/RPISEC/MBE" target="_blank" rel="noopener">Course Material for Modern Binary Exploitation</a></li>
<li><a href="https://github.com/nnamon/linux-exploitation-course" target="_blank" rel="noopener">Linux Exploitation Course</a></li>
<li><a href="https://liveoverflow.com/binary_hacking/index.html" target="_blank" rel="noopener">Binary Hacking</a></li>
<li><a href="http://howto.hackallthethings.com/2016/07/learning-exploitation-with-offensive.html" target="_blank" rel="noopener">Offensive Computer Security Lecture 2016 version</a></li>
<li><a href="https://www.cs.fsu.edu/%7Eredwood/OffensiveComputerSecurity/lectures.html" target="_blank" rel="noopener">Offensive Computer Security Lecture 2014 version</a></li>
<li><a href="https://www.fuzzysecurity.com/tutorials.html" target="_blank" rel="noopener">Exploit Tutorial by Fuzzy Security</a></li>
<li><a href="https://github.com/NoviceLive/bintut" target="_blank" rel="noopener">Bintut - a set of tutorials, as well as exercises.</a></li>
<li><a href="https://www.corelan.be/index.php/category/security/exploit-writing-tutorials/" target="_blank" rel="noopener">exploit-writing-tutorials corelan team</a></li>
<li><a href="https://drive.google.com/open?id=1VHylYxq8DEohPKM7dz87cn8MgC9B-zMr" target="_blank" rel="noopener">Exploit編寫教程翻譯文</a></li>
<li><a href="https://www.gitbook.com/book/wizardforcel/sploitfun-linux-x86-exp-tut/details" target="_blank" rel="noopener">SploitFun Linux x86 Exploit開發系列教程</a></li>
<li><a href="https://sploitfun.wordpress.com/2015/06/26/linux-x86-exploit-development-tutorial-series/" target="_blank" rel="noopener">Linux(x86)Exploit Development Series</a></li>
<li><a href="https://github.com/hardenedlinux/linux-exploit-development-tutorial" target="_blank" rel="noopener">linux-exploit-development-tutorial</a></li>
<li><a href="https://github.com/bkerler/exploit_me" target="_blank" rel="noopener">Exploit Tutorial:Exploit me for ARM</a></li>
<li><a href="https://ocw.cs.pub.ro/courses/cns" target="_blank" rel="noopener">CTF Crunch: Learn Exploit</a></li>
<li><a href="http://staff.ustc.edu.cn/~sycheng/ssat/" target="_blank" rel="noopener">軟件安全測試</a></li>
</ul>
<h1 id="Conference-Video-Slide"><a href="#Conference-Video-Slide" class="headerlink" title="Conference Video/Slide"></a>Conference Video/Slide</h1><ul>
<li><a href="https://www.youtube.com/watch?v=29RbO5bftwo" target="_blank" rel="noopener">AFL fuzzing primer</a></li>
<li><a href="https://sec-consult.com/en/blog/2017/11/the-art-of-fuzzing-slides-and-demos/index.html" target="_blank" rel="noopener">The Art of Fuzzing</a></li>
<li><a href="https://drive.google.com/open?id=1zdqP9bioBivawfNOFZEjgd2Tga1IZxbG" target="_blank" rel="noopener">AIS3 2017 Linux Binary Exploitation</a></li>
<li><a href="http://veritas501.space/2017/05/23/HITCON-training%20writeup/" target="_blank" rel="noopener">AIS3 2017 Linux Binary Exploitation里面Example的Writeup by Veritas</a></li>
<li><a href="https://www.youtube.com/watch?v=EKe69LM26qA" target="_blank" rel="noopener">PWN 1(Linux Binary Exploitatuin影片)配合上AIS3來看</a></li>
<li><a href="https://www.youtube.com/watch?v=3vvYS09-IGA" target="_blank" rel="noopener">PWN 2</a></li>
<li><a href="https://www.youtube.com/watch?v=HSbPcTHqf1c" target="_blank" rel="noopener">PWN 3</a></li>
</ul>
<h1 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h1><ul>
<li><a href="https://mega.nz/#!9lwRnAAB!Hw0pP7NMLfdcE8saw0uI9coAG2a_0xckiL9IMhUJz_Y" target="_blank" rel="noopener">Modern Windows Exploit Development</a></li>
</ul>
<h1 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="http://pwnable.kr/" target="_blank" rel="noopener">Pwnable KR</a></li>
<li><a href="https://hackme.inndy.tw/" target="_blank" rel="noopener">Hackme.inddy</a></li>
<li><a href="https://pwnable.tw/" target="_blank" rel="noopener">Pwnable TW</a></li>
<li><a href="https://ropemporium.com/" target="_blank" rel="noopener">ROP Emporium</a></li>
<li><a href="http://pastebin.com/raw/uyifxgPu" target="_blank" rel="noopener">Pwn challenges list</a></li>
<li><a href="https://pastebin.com/raw/q7LGi8w5" target="_blank" rel="noopener">Rev challenges list</a></li>
</ul>
<h1 id="PWN-in-CTF-Wargame-Writeups-Tips"><a href="#PWN-in-CTF-Wargame-Writeups-Tips" class="headerlink" title="PWN in CTF/Wargame Writeups/Tips"></a>PWN in CTF/Wargame Writeups/Tips</h1><h2 id="Writeups"><a href="#Writeups" class="headerlink" title="Writeups"></a>Writeups</h2><ul>
<li><a href="http://www.wooy0ung.me/writeup/2018/01/12/rop-emporium-writeup/" target="_blank" rel="noopener">ROP Emporium平台writeup</a></li>
<li><a href="https://blog.trailofbits.com/2016/06/03/2000-cuts-with-binary-ninja/" target="_blank" rel="noopener">2000 cuts with Binary Ninja</a></li>
<li><a href="http://ctfhacker.com/ctf/python/symbolic/execution/reverse/radare/2015/11/28/cmu-binary-bomb-flag2.html" target="_blank" rel="noopener">CMU Binary Bomb</a></li>
<li><a href="http://www.freebuf.com/articles/rookie/158520.html" target="_blank" rel="noopener">記一道PWN题的解题思路</a></li>
<li><a href="http://www.freebuf.com/articles/rookie/155971.html" target="_blank" rel="noopener">解题思路 | 從一道Pwn题說起</a></li>
<li><a href="http://wps2015.org/drops/drops/%E4%B8%89%E4%B8%AA%E7%99%BD%E5%B8%BD-%E6%9D%A5%20PWN%20%E6%88%91%E4%B8%80%E4%B8%8B%E5%A5%BD%E5%90%97%20writeup.html" target="_blank" rel="noopener">三個白帽：來PWN我一下好嗎</a></li>
<li><a href="http://wps2015.org/drops/drops/%E4%B8%89%E4%B8%AA%E7%99%BD%E5%B8%BD%E4%B9%8B%E4%BB%8Epwn%20me%E8%B0%83%E8%AF%95%E5%88%B0Linux%E6%94%BB%E9%98%B2%E5%AD%A6%E4%B9%A0.html" target="_blank" rel="noopener">三個白帽：从pwn me調試到Linux攻防學習</a></li>
<li><a href="http://bruce30262.logdown.com/posts/277024-asis-ctf-2015-quals-saw-this-1" target="_blank" rel="noopener">ASIS CTF 2015 Quals – Saw this (1 &amp; 2) </a></li>
<li><a href="https://www.anquanke.com/post/id/83835" target="_blank" rel="noopener">CCTF pwn3格式化字符串漏洞详细writeup</a></li>
<li><a href="http://www.moonsos.com/post/149.html" target="_blank" rel="noopener">CCTF pwn3格式化字符串漏洞詳細writeup</a></li>
<li><a href="http://www.reshahar.com/2017/05/10/2015-defcon-quals-r0pbaby%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">2015-defcon-quals-r0pbaby解析</a></li>
<li><a href="http://www.myh0st.cn/index.php/archives/916/" target="_blank" rel="noopener">UAF 实例-RHme3 CTF 的一道题</a></li>
<li><a href="http://blog.csdn.net/qq_33528164/article/details/73433618" target="_blank" rel="noopener">D-CTF Quals 2016 - Warm heap</a></li>
<li><a href="https://github.com/1u4nx/Exploit-Exercises-Nebula" target="_blank" rel="noopener">Exploit Exercises:Nebula全攻略</a></li>
<li><a href="https://www.anquanke.com/post/id/85571" target="_blank" rel="noopener">从一个CTF题目學習Python沙箱逃逸</a></li>
</ul>
<h2 id="Pwnable-TW"><a href="#Pwnable-TW" class="headerlink" title="Pwnable TW"></a>Pwnable TW</h2><ul>
<li><a href="http://pzhxbz.cn/?p=83" target="_blank" rel="noopener">pwnable.tw-See the file筆記</a></li>
<li><a href="http://pzhxbz.cn/?p=91" target="_blank" rel="noopener">pwnable.tw-babystack筆記</a></li>
</ul>
<h3 id="Pwnable-KR"><a href="#Pwnable-KR" class="headerlink" title="Pwnable KR"></a>Pwnable KR</h3><ul>
<li><a href="http://blog.csdn.net/qq_33528164/article/details/77061932" target="_blank" rel="noopener">全面剖析Pwnable.kr unlink</a></li>
</ul>
<h3 id="HITCON"><a href="#HITCON" class="headerlink" title="HITCON"></a>HITCON</h3><ul>
<li><a href="https://tradahacking.vn/hitcon-2017-ghost-in-the-heap-writeup-ee6384cd0b7" target="_blank" rel="noopener">HITCON 2017 : Ghost in The Heap Writeup</a></li>
<li><a href="http://pzhxbz.cn/?p=103" target="_blank" rel="noopener">HITCON 2017 : Everlasting Imaginative Void</a></li>
<li><a href="https://4ngelboy.blogspot.my/2016/10/hitcon-ctf-qual-2016-house-of-orange.html" target="_blank" rel="noopener">HITCON CTF Qual 2016 - House of Orange Write up</a></li>
<li><a href="http://tacxingxing.com/2018/01/10/house-of-orange/" target="_blank" rel="noopener">House of orange🍊</a></li>
<li><a href="pzhxbz.cn/?p=93">HITCON 2016 Baby Heap</a></li>
<li><a href="http://skysider.com/?p=602" target="_blank" rel="noopener">HITCON QUALS CTF 2015 readable writeup</a></li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li><a href="https://drive.google.com/open?id=18ttjnJmdCajo8avxgJs53cF_SMuVvUuJ" target="_blank" rel="noopener">Pwn Basic 2(Linux)by TDOH &amp; NTUST</a></li>
<li><a href="https://github.com/Naetw/CTF-pwn-tips" target="_blank" rel="noopener">CTF pwn tips by Naetw</a></li>
<li><a href="https://raintrees.net/projects/a-painter-and-a-black-cat/wiki/CTF_Pwn" target="_blank" rel="noopener">CTF pwn wiki:A-painter-and-a-black-cat</a></li>
<li><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.3_pwn.html" target="_blank" rel="noopener">CTF All in one: PWN</a></li>
<li><a href="https://drive.google.com/open?id=1g30jNUaz2P2PrI_DQUTpHDfGCxrGeJ1lKJRckm1PmKY" target="_blank" rel="noopener">科總CTF+Binary小技巧</a></li>
<li><a href="https://paper.seebug.org/481/" target="_blank" rel="noopener">Linux下pwn从入門到放棄</a></li>
<li><a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique" target="_blank" rel="noopener">Play with FILE Structure - Yet Another Binary Exploit Technique</a></li>
<li><a href="https://drive.google.com/open?id=1QETaNSZAW-Cu07-TFKJKQ3bkNvj71hHL" target="_blank" rel="noopener">掘金CTF——CTF中的内存漏洞利用技巧</a></li>
<li><a href="https://drive.google.com/open?id=1ac9djBXCAjXwuFEZ0a93dyBByhs8sNN9" target="_blank" rel="noopener">二进制漏洞挖掘与利用技术题解分享 -XMAN</a></li>
<li><a href="http://aptx4869.me/ctf/2017/03/31/learnPwn.html" target="_blank" rel="noopener">CTF Pwn Notes by APTX-4869</a></li>
<li><a href="http://skysiderPWN.com/?p=223" target="_blank" rel="noopener">Pwn tips by Skysiders</a></li>
<li><a href="https://bbs.pediy.com/thread-220508.htm" target="_blank" rel="noopener">一篇安全學習筆記</a></li>
<li><a href="https://github.com/jaybosamiya/security-notes" target="_blank" rel="noopener">Binary Some Security Notes for PWN</a></li>
<li><a href="https://drive.google.com/file/d/18UpGDvhccnnGWj7Mux7_2BGouIZK_5bK/view?usp=sharing" target="_blank" rel="noopener">Pwning with some styles by Dragon Sectors</a></li>
<li><a href="https://speakerdeck.com/megumish/pwnru-men-bofkarahouse-of-orange-made" target="_blank" rel="noopener">Pwn入門 BoFからHouse of Orange まで</a></li>
<li><a href="https://drive.google.com/open?id=1ebpZVSOAgU_SHskEQLIv-4c58m1PswKM" target="_blank" rel="noopener">Stack-based BOF exploitation &amp; Protection schemes (&amp; how to break them)</a></li>
<li><a href="https://drive.google.com/open?id=1wyH-g04iBD2RYtl2bvYYmBfIKKa3W9VO" target="_blank" rel="noopener">Heap Analysis with r2</a></li>
<li><a href="https://drive.google.com/open?id=1SEYiIyT98tjMhV_STZQymlSZIITl5W0M" target="_blank" rel="noopener">Linux Interactive Exploit Development with GDB and PEDA</a></li>
<li><a href="http://www.ifuryst.com/archives/stack-heap.html" target="_blank" rel="noopener">堆和栈的區別</a></li>
<li><a href="https://drive.google.com/open?id=1VrbNzI--inhLiHtve8xspjicTOQrGSN2" target="_blank" rel="noopener">CTF勉強會#Pwnable</a></li>
</ul>
<h1 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h1><h2 id="軟件保護技術"><a href="#軟件保護技術" class="headerlink" title="軟件保護技術"></a>軟件保護技術</h2><ul>
<li><a href="goo.gl/g923tM">保護技術-此文章長期更新 by Poker</a></li>
<li><a href="http://www.cnblogs.com/wangaohui/p/7122653.html" target="_blank" rel="noopener">Linux ASLR的实现</a></li>
<li><a href="http://tacxingxing.com/2017/07/13/canary/" target="_blank" rel="noopener">Canary by Tacltrnx</a></li>
<li><a href="http://tacxingxing.com/2017/07/14/relro/" target="_blank" rel="noopener">Relro by Tacltrnx</a></li>
<li><a href="http://tacxingxing.com/2017/07/15/pie-alsr/" target="_blank" rel="noopener">PIE &amp; ASLR by Tacltrnx</a></li>
<li><a href="https://szlin.me/2017/12/09/stack-buffer-overflow-stack-canaries/" target="_blank" rel="noopener">Stack buffer overflow protection 學習筆記 – Stack canaries mechanism in User space</a></li>
<li><a href="http://tacxingxing.com/2017/07/16/nx-aslr/" target="_blank" rel="noopener">NX &amp; ASLR by Tacltrnx</a></li>
<li><a href="http://tacxingxing.com/2017/07/17/fortifysource/" target="_blank" rel="noopener">Fortify Source</a></li>
</ul>
<h2 id="GOT-amp-PLT"><a href="#GOT-amp-PLT" class="headerlink" title="GOT&amp;PLT"></a>GOT&amp;PLT</h2><ul>
<li><a href="https://www.zhihu.com/question/21249496" target="_blank" rel="noopener">Linux动态链接为什么要用PLT和GOT表？</a></li>
<li><a href="https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html" target="_blank" rel="noopener">GOT and PLT for pwning</a></li>
<li><a href="http://www.ifuryst.com/archives/Linux-PLT-GOT.html" target="_blank" rel="noopener">Linux动态链接中的PLT和GOT</a></li>
<li><a href="http://brandon-hy-lin.blogspot.my/2015/12/shared-library-plt-got.html" target="_blank" rel="noopener">Shared Library 中 PLT 和 GOT 的使用機制</a></li>
</ul>
<h2 id="File結構體攻擊"><a href="#File結構體攻擊" class="headerlink" title="File結構體攻擊"></a>File結構體攻擊</h2><ul>
<li><a href="http://blog.hac425.top/2017/12/07/pwn_with_file_part1.html" target="_blank" rel="noopener">Pwn with File結構體(一)</a></li>
<li><a href="http://blog.hac425.top/2017/12/07/pwn_with_file_part2.html" target="_blank" rel="noopener">Pwn with File結構體(二)</a></li>
<li><a href="http://blog.hac425.top/2017/12/12/pwn_with_file_part3.html" target="_blank" rel="noopener">Pwn with File結構體(三)</a></li>
<li><a href="http://blog.hac425.top/2018/01/13/pwn_with_file_part4.html" target="_blank" rel="noopener">Pwn with File結構體(四)</a></li>
</ul>
<h2 id="棧"><a href="#棧" class="headerlink" title="棧"></a>棧</h2><ul>
<li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/stack_intro.html" target="_blank" rel="noopener">CTF Wik Stack Intro</a></li>
<li><a href="http://libc.pw/2015/07/29/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">棧溢出漏洞介紹與利用</a></li>
<li><a href="https://toalice.github.io/2017/04/11/index/" target="_blank" rel="noopener">CTF-PWN栈溢出入门</a></li>
<li><a href="http://z1ng.net/post/trans/64wei-linuxzhan-yi-chu" target="_blank" rel="noopener">64位linux棧溢出</a></li>
<li><a href="https://www.secpulse.com/archives/32328.html" target="_blank" rel="noopener">64位Linux棧溢出教程</a></li>
<li><a href="http://bestwing.me/2017/03/18/stack-overflow-one/" target="_blank" rel="noopener">基礎棧溢出複習一基礎</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25816426" target="_blank" rel="noopener">手把手教你棧溢出从入門到放棄(上)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25892385" target="_blank" rel="noopener">手把手教你棧溢出从入門到放棄(下)</a></li>
<li><a href="http://www.freebuf.com/articles/system/24177.html" target="_blank" rel="noopener">現代Linux操作系统的棧溢出(上)</a></li>
<li><a href="http://insecure.org/stf/smashstack.html" target="_blank" rel="noopener">Smashing The Stack For Fun And Profit</a></li>
<li><a href="https://gbmaster.wordpress.com/2014/06/18/x86-exploitation-101-when-the-stack-gets-over-its-head/" target="_blank" rel="noopener">x86 Exploitation-101:when-the-stack-gets-over-its-head</a></li>
<li><a href="https://gbmaster.wordpress.com/2015/08/03/x86-exploitation-101-off-by-one-and-an-uninvited-friend-joins-the-party/" target="_blank" rel="noopener">x86 Exploitation 101: “Off-by-one”</a></li>
<li><a href="http://0xpoker.cuit.site/20171202/%E4%B8%80%E7%82%B9%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8__stack_chk_fail%E7%BB%95%E8%BF%87canary%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">一點關於利用_stack_chk_fail繞過canary的方法</a></li>
<li><a href="https://toalice.github.io/2017/07/14/functionCall&amp;Stack/" target="_blank" rel="noopener">函数調用&amp;棧</a></li>
<li><a href="http://www.myh0st.cn/index.php/archives/911/" target="_blank" rel="noopener">棧溢出學習筆記</a></li>
</ul>
<h3 id="Return-to-Dl-Resolve"><a href="#Return-to-Dl-Resolve" class="headerlink" title="Return to Dl Resolve"></a>Return to Dl Resolve</h3><ul>
<li><a href="http://bestwing.me/2017/11/14/Return-to-dl-resolve/" target="_blank" rel="noopener">By Swing</a></li>
<li><a href="https://www.slideshare.net/AngelBoy1/re2dlresolve" target="_blank" rel="noopener">By Angel Boy</a></li>
<li><a href="http://www.evil0x.com/posts/19226.html" target="_blank" rel="noopener">通過ELF動態裝載構造ROP鏈(Return-to-dl-resolve)</a></li>
<li><a href="http://d0m021ng.github.io/2016/11/03/PWN/ret2-dl-resolve-payload-%E6%9E%84%E9%80%A0%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">Linux棧溢出利用之return to dl-resolve payload 構造原理(一)</a></li>
<li><a href="http://d0m021ng.github.io/2016/11/03/PWN/ret2-dl-resolve-payload-%E6%9E%84%E9%80%A0%E5%8E%9F%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">Linux棧溢出利用之return to dl-resolve payload 構造原理(二)</a></li>
<li><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">ROP之return to dl-resolve</a></li>
<li><a href="http://inaz2.hatenablog.com/entry/2014/07/27/205322" target="_blank" rel="noopener">x64でROP stager + Return-to-dl-resolveによるASLR+DEP回避をやってみる Exploit </a></li>
<li><a href="http://blog.binpang.me/2017/05/16/seed-returnToLibc/" target="_blank" rel="noopener">seedLab:returnToLibc</a></li>
<li><a href="http://www.cis.syr.edu/~wedu/seed/Labs_12.04/Software/Return_to_libc/" target="_blank" rel="noopener">Return-to-libc Attack Lab</a></li>
<li><a href="blog.csdn.net/joez_blog/article/details/51268006">pwn學習之dl_resolve學習篇</a></li>
<li><a href="http://www.myh0st.cn/index.php/archives/74/" target="_blank" rel="noopener">ret2resolve學習筆記</a></li>
</ul>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul>
<li><a href="https://heap-exploitation.dhavalkapil.com" target="_blank" rel="noopener">Heap Exploitation Tutorials by Dhavalkapil</a></li>
<li><a href="http://vancir.com/tags/#heap" target="_blank" rel="noopener">Heap Exploitation Tutorial上面系列的翻譯</a></li>
<li><a href="https://medium.com/@ktecv2000/heap-exploit-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-d724d0afa59b" target="_blank" rel="noopener">Heap Exploit 學習筆記</a></li>
<li><a href="http://pzhxbz.cn/?p=96" target="_blank" rel="noopener">poison_null_byte</a></li>
<li><a href="https://etenal.me/archives/1121" target="_blank" rel="noopener">關於heap overflow的一些筆記</a></li>
<li><a href="https://blog.iret.xyz/article.aspx/linux_heapoverflow_enterance#fn:1" target="_blank" rel="noopener">Notes About Heap Overflow Under Linux</a></li>
<li><a href="https://medium.com/@ktecv2000/%E8%A9%B3%E8%AB%87heap-exploit-9ba957e27ee8" target="_blank" rel="noopener">詳談Heap Exploit</a></li>
<li><a href="http://www.freebuf.com/articles/system/151372.html" target="_blank" rel="noopener">Dance In Heap(一)：淺析堆的申請釋放及相應保護機制</a></li>
<li><a href="http://vancir.com/tutorials.html" target="_blank" rel="noopener">Heap Exploitation系列翻譯 by Vancir</a></li>
<li><a href="https://4ngelboy.blogspot.my/2015/08/heap-exploitation.html" target="_blank" rel="noopener">Heap exploitation by angelboy</a></li>
<li><a href="https://4ngelboy.blogspot.my/2016/03/advanced-heap-exploitation.html" target="_blank" rel="noopener">Advanced heap exploitation</a></li>
<li><a href="libc.pw/2015/08/04/%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B/">堆溢出漏洞簡介</a></li>
<li><a href="http://blog.binpang.me/2017/09/24/linux%E5%A0%86%E5%86%85%E5%AD%98%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B9%8Bfastbin/" target="_blank" rel="noopener">Linux堆內存漏洞利用之fastbin</a></li>
<li><a href="http://tacxingxing.com/2017/09/06/fastbinattack/" target="_blank" rel="noopener">Fastbin Attack by Tac1t0rnX</a></li>
<li><a href="http://libc.pw/2015/07/31/0day%E4%B9%8Bret-to-libc/" target="_blank" rel="noopener">0day之ret to libc</a></li>
<li><a href="http://libc.pw/2015/08/08/%E4%B8%80%E6%AC%A1%E6%A8%A1%E6%8B%9F%E7%9A%84%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">内存管理漏洞part(1)</a></li>
<li><a href="http://libc.pw/2015/08/24/Double%20Free%E6%B5%85%E6%9E%90/" target="_blank" rel="noopener">Double Free浅析 </a></li>
<li><a href="https://gbmaster.wordpress.com/2015/07/16/x86-exploitation-101-house-of-lore-people-and-traditions/" target="_blank" rel="noopener">x86 Exploitation 101: “House of Lore”</a></li>
<li><a href="https://gbmaster.wordpress.com/2015/07/21/x86-exploitation-101-house-of-spirit-friendly-stack-overflow/" target="_blank" rel="noopener">x86 Exploitation 101: “House of Spirit”</a></li>
<li><a href="https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/" target="_blank" rel="noopener">x86 Exploitation 101: “House of Force”</a></li>
<li><a href="https://gbmaster.wordpress.com/2015/06/15/x86-exploitation-101-house-of-mind-undead-and-loving-it/" target="_blank" rel="noopener">x86 Exploitation 101: “House of Mind”</a></li>
<li><a href="https://gbmaster.wordpress.com/2014/08/24/x86-exploitation-101-this-is-the-first-witchy-house/" target="_blank" rel="noopener">x86 Exploitation 101: this is the first witchy house</a></li>
<li><a href="https://gbmaster.wordpress.com/2014/08/11/x86-exploitation-101-heap-overflows-unlink-me-would-you-please/" target="_blank" rel="noopener">x86 Exploitation 101:unlink-me</a></li>
<li><a href="http://www.win.tue.nl/~aeb/linux/hh/hh-11.html" target="_blank" rel="noopener">Exploiting the heap</a></li>
<li><a href="https://www.anquanke.com/post/id/85357" target="_blank" rel="noopener">堆之House of Spirit</a></li>
<li><a href="https://www.anquanke.com/post/id/85127" target="_blank" rel="noopener">unsorted bin attack分析</a></li>
<li><a href="http://tacxingxing.com/2017/09/17/unsorted-bin-attack/" target="_blank" rel="noopener">Unsorted bin Attack by Tac1t0rnX</a></li>
<li><a href="http://www.programlife.net/heapspray-cve2012-1889-exploit-1.html" target="_blank" rel="noopener">實戰HeapSpray之CVE2012-1889 Exploit編寫（一）</a></li>
<li><a href="http://blog.csdn.net/magictong/article/details/7391397" target="_blank" rel="noopener">Heap Spray原理淺析</a></li>
<li><a href="https://drive.google.com/open?id=1SREK7cjM9HxB27r2Sy5rAeMQLc_Aq0JH" target="_blank" rel="noopener">Play with Linux Heap</a></li>
<li><a href="https://hwchen18546.wordpress.com/2014/05/05/software-heap-overflow/" target="_blank" rel="noopener">Heap Overflow</a></li>
<li><a href="http://tacxingxing.com/2018/01/23/chunk-overlaping/" target="_blank" rel="noopener">Chunk Overlaping</a></li>
<li><a href="http://tacxingxing.com/2018/01/24/poison-null-byte/" target="_blank" rel="noopener">Poison Null Byte</a></li>
<li><a href="http://tacxingxing.com/2018/02/14/horse-of-spirit/" target="_blank" rel="noopener">House of spirit</a></li>
</ul>
<h3 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h3><ul>
<li><a href="https://toalice.github.io/2017/07/24/Heap2unlink/" target="_blank" rel="noopener">堆溢出之Unlink</a></li>
<li><a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.37.qktl5B&amp;articleid=360" target="_blank" rel="noopener">Linux堆溢出漏洞利用之unlink</a></li>
<li><a href="http://vancir.com/2017/08/14/unsafe-unlink-example/" target="_blank" rel="noopener">unsafe unlink攻击技术示例</a></li>
<li><a href="http://tacxingxing.com/2017/08/16/unlink/" target="_blank" rel="noopener">Unlink by Tac1t0rnX</a></li>
</ul>
<h3 id="Glibc內存管理"><a href="#Glibc內存管理" class="headerlink" title="Glibc內存管理"></a>Glibc內存管理</h3><ul>
<li><a href="https://paper.seebug.org/255/" target="_blank" rel="noopener">PWN之堆内存管理</a></li>
<li><a href="https://paper.seebug.org/papers/Archive/refs/heap/glibc%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86ptmalloc%e6%ba%90%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90.pdf" target="_blank" rel="noopener">《glibc内存管理ptmalloc源代码分析》</a></li>
<li><a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/" target="_blank" rel="noopener">Understanding glibc malloc</a></li>
<li><a href="https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/?spm=a313e.7916648.0.0.NP952U" target="_blank" rel="noopener">Syscalls used by malloc</a></li>
<li><a href="https://drive.google.com/open?id=1cKz_M9dKBbO3dyLVxKHUBBFEQxiXEVW4" target="_blank" rel="noopener">Glibc Adventures The Forgotten Chunks</a></li>
<li><a href="https://toalice.github.io/2017/07/19/Heap1/" target="_blank" rel="noopener">glibc堆管理機制</a></li>
<li><a href="http://aptx4869.me/linux/2017/11/29/Glibc-malloc-learning.html" target="_blank" rel="noopener">Glibc堆管理學習笔记(一)</a></li>
<li><a href="http://aptx4869.me/linux/2017/12/10/Glibc-malloc-learning2.html" target="_blank" rel="noopener">Glibc堆管理學習笔记(二)</a></li>
<li><a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.45.nv3onP&amp;articleid=315" target="_blank" rel="noopener">Linux堆內存管理深入分析 上</a></li>
<li><a href="https://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.36f39d7ebNe83t&amp;articleid=334" target="_blank" rel="noopener">Linux堆内存管理深入分析 下</a></li>
<li><a href="http://blog.binpang.me/2017/09/22/ptmalloc%E5%A0%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">ptmalloc堆内存管理</a></li>
<li><a href="http://pzhxbz.cn/?p=92" target="_blank" rel="noopener">關於堆的一點筆記</a></li>
</ul>
<h3 id="User-After-Free"><a href="#User-After-Free" class="headerlink" title="User After Free"></a>User After Free</h3><ul>
<li><a href="http://bobao.360.cn/learning/detail/3379.html" target="_blank" rel="noopener">逆向安全系列：Use After Free漏洞浅析</a></li>
<li><a href="http://huntcve.github.io/2015/06/14/uaf/" target="_blank" rel="noopener">从zergRush深入理解Use After Free</a></li>
<li><a href="http://www.freebuf.com/vuls/95708.html" target="_blank" rel="noopener">利用Linux內核裡的Use-After-Free(UAF)漏洞提權</a></li>
<li><a href="https://yq.aliyun.com/articles/185861" target="_blank" rel="noopener">通過靜態分析檢測二进制代碼中的Use-After-Free漏洞</a></li>
<li><a href="https://o0xmuhe.github.io/2015/11/05/dragon/" target="_blank" rel="noopener">Pwnable Dragon WP(UAF)</a></li>
<li><a href="http://libc.pw/2015/08/06/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%ADfree%E7%9A%84%E8%A1%8C%E4%B8%BA/" target="_blank" rel="noopener">内存管理中free的行為</a></li>
<li><a href="https://securityintelligence.com/use-after-frees-that-pointer-may-be-pointing-to-something-bad/" target="_blank" rel="noopener">Use-after-frees: That pointer may be pointing to something bad</a></li>
</ul>
<h3 id="How-to-Heap"><a href="#How-to-Heap" class="headerlink" title="How to Heap"></a>How to Heap</h3><ul>
<li><a href="http://vancir.com/tutorials.html" target="_blank" rel="noopener">how2heap學習筆記 bt Vancir</a></li>
<li><a href="https://github.com/shellphish/how2heap" target="_blank" rel="noopener">How 2 Heap</a></li>
<li><a href="http://www.reversing.win/2017/08/29/how2heap总结-上/" target="_blank" rel="noopener">how2heap總結-上</a></li>
<li><a href="http://www.reversing.win/2017/08/29/how2heap总结-下/" target="_blank" rel="noopener">how2heap總結-下</a></li>
</ul>
<h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><ul>
<li><a href="https://medium.com/@iseethieves/intro-to-rop-rop-emporium-split-9b2ec6d4db08" target="_blank" rel="noopener">Intro to ROP: ROP Emporium — Split</a></li>
<li><a href="http://tacxingxing.com/self-learning/2017/05/29/Rop/" target="_blank" rel="noopener">Rop by Tac Xing Xing</a></li>
<li><a href="https://www.anquanke.com/post/id/85831" target="_blank" rel="noopener">現代棧溢出利用技術基礎：ROP</a></li>
<li><a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.29.qktl5B&amp;articleid=403" target="_blank" rel="noopener">一步一步學ROP之linux_x86篇</a></li>
<li><a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.2.qktl5B&amp;articleid=473" target="_blank" rel="noopener">一步一步學ROP之linux_x64篇</a></li>
<li><a href="https://blog.skullsecurity.org/2013/ropasaurusrex-a-primer-on-return-oriented-programming" target="_blank" rel="noopener">ropasaurusrex: a primer on return-oriented programming</a></li>
<li><a href="https://www.anquanke.com/post/id/86190" target="_blank" rel="noopener">ropasaurusrex:ROP入門教程——STACK</a></li>
<li><a href="http://0xpoker.cuit.site/20171206/ROP%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%28%E4%B8%80%29/" target="_blank" rel="noopener">ROP学习之旅(一)</a></li>
<li><a href="https://drive.google.com/open?id=1aixfg7I76du8uVw-yi_EgiV-hZ4Tm54o" target="_blank" rel="noopener">ROP by Joshua Wong</a></li>
<li><a href="http://bestwing.me/2017/03/19/stack-overflow-two-ROP/" target="_blank" rel="noopener">基础栈溢出复习 二 ROP</a></li>
<li><a href="http://bestwing.me/2017/03/20/stack-overflow-three-SROP/" target="_blank" rel="noopener">基础栈溢出复习 三 SROP</a></li>
<li><a href="http://bestwing.me/2017/03/24/stack-overflow-four-BROP/" target="_blank" rel="noopener">基础栈溢出复习 四 BROP</a></li>
<li><a href="http://look3little.blogspot.my/2017/09/srop.html" target="_blank" rel="noopener">SROP學習資料</a></li>
<li><a href="https://www.slideshare.net/AngelBoy1/sigreturn-ori" target="_blank" rel="noopener">SROP By angel boy</a></li>
<li><a href="http://vancir.com/posts/ret2text%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener">ret2text攻擊技術示例</a></li>
<li><a href="http://vancir.com/posts/ret2shellcode%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener">ret2shellcode攻擊技術示例</a></li>
<li><a href="http://vancir.com/posts/ret2syscall%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener">ret2syscall攻擊技術示例</a></li>
<li><a href="http://vancir.com/posts/ret2libc%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B-%E4%BB%85%E6%9C%89system(" target="_blank" rel="noopener">ret2libc攻擊技術示例-模拟执行system函数绕过NX保护</a>%E6%83%85%E5%86%B5%E4%B8%8B%E8%BE%93%E5%85%A5binsh%E5%AE%8C%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8)</li>
<li><a href="http://vancir.com/posts/ret2libc%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B-%E6%B3%84%E9%9C%B2libc%E5%9F%BA%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97system(" target="_blank" rel="noopener">ret2libc攻擊技術示例-僅有system()情况下輸入“/bin/sh”完成函數調用</a>%E5%9C%B0%E5%9D%80%E7%BB%95%E8%BF%87ASLR)</li>
<li><a href="http://vancir.com/posts/ret2libc%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B-%E6%B3%84%E9%9C%B2libc%E5%9F%BA%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97system(" target="_blank" rel="noopener">ret2libc攻擊技術示例-泄露libc基地址计算system()地址繞過ASLR</a>%E5%9C%B0%E5%9D%80%E7%BB%95%E8%BF%87ASLR)</li>
<li><a href="http://vancir.com/posts/ret2__libc_csu_init%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E7%A4%BA%E4%BE%8B-%E4%BD%BF%E7%94%A8%E9%80%9A%E7%94%A8gadget" target="_blank" rel="noopener">ret2__libc_csu_init攻擊技術示例-使用通用gadget</a></li>
<li><a href="http://skysider.com/?p=371" target="_blank" rel="noopener">Linux x64 rop利用總結</a></li>
<li><a href="http://www.freebuf.com/articles/system/94198.html" target="_blank" rel="noopener">Linux内核ROP姿勢詳解(一)</a></li>
<li><a href="http://www.cnblogs.com/0xJDchen/p/6429272.html" target="_blank" rel="noopener">Linux内核ROP姿势詳解(二)</a></li>
<li><a href="http://www.freebuf.com/articles/network/87447.html" target="_blank" rel="noopener">Sigreturn Oriented Programming (SROP) Attack攻击原理</a></li>
<li><a href="https://drive.google.com/open?id=0B18u7ECQO-gTdGdrZXZhSUZ3bmc" target="_blank" rel="noopener">Kiwicon 2012 Rop and Rool</a></li>
<li><a href="https://paper.seebug.org/444/" target="_blank" rel="noopener">ROP小結</a></li>
<li><a href="https://www.slideshare.net/hackstuff/rop-40525248" target="_blank" rel="noopener">ROP輕鬆談</a></li>
<li><a href="http://www.purpleroc.com/md/2016-02-25@Thinking-About-Level2.html" target="_blank" rel="noopener">PWN——堆棧平衡的考慮</a></li>
</ul>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul>
<li><a href="https://www.exploit-db.com/docs/english/28476-linux-format-string-exploitation.pdf" target="_blank" rel="noopener">Format String Exploitation</a></li>
<li><a href="https://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf" target="_blank" rel="noopener">Exploiting Format String Vulnerabilities</a></li>
<li><a href="https://wizardforcel.gitbooks.io/exp-fmt-str-vul/content/1.html" target="_blank" rel="noopener">格式化字符串漏洞利用(Exploiting Format String Vulnerablities中文版)</a></li>
<li><a href="http://libc.pw/2015/07/29/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">格式化字符串漏洞 by Z神</a></li>
<li><a href="http://www.freebuf.com/articles/system/74224.html" target="_blank" rel="noopener">格式化字符串的漏洞應用 Part 1</a></li>
<li><a href="https://www.anquanke.com/post/id/85785" target="_blank" rel="noopener">格式化字符串漏洞利用小結（一）</a></li>
<li><a href="http://www.moonsos.com/post/149.html" target="_blank" rel="noopener">CCTF pwn3格式化字符串漏洞詳細writeup</a></li>
<li><a href="http://veritas501.space/2017/04/28/格式化字符串漏洞学习/" target="_blank" rel="noopener">格式化字符串漏洞学习</a></li>
<li><a href="http://www.rutk1t0r.org/2016/09/25/一起来撸printf吧/" target="_blank" rel="noopener">一起来撸printf吧</a></li>
<li><a href="http://www.rutk1t0r.org/2017/01/07/fmt-exploit/" target="_blank" rel="noopener">fmt_exploit</a></li>
<li><a href="http://www.xfocus.net/articles/200103/123.html" target="_blank" rel="noopener">浅析格式化串漏洞</a></li>
<li><a href="https://blog.nullable.software/2015/07/format-string-exploitation.html" target="_blank" rel="noopener">Format String Exploitation</a></li>
<li><a href="https://github.com/shiyanlou/seedlab/blob/master/formatstring.md" target="_blank" rel="noopener">格式化字符串漏洞實驗</a></li>
<li><a href="http://www.edwardl.xyz/2016/09/01/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">格式化字符串漏洞 by Edward</a></li>
<li><a href="https://gbmaster.wordpress.com/2015/12/08/x86-exploitation-101-format-strings-ill-tell-ya-what-to-say/" target="_blank" rel="noopener">x86 Exploitation 101: “Format Strings” – I’ll tell ya what to say</a></li>
<li><a href="http://0xpoker.cuit.site/20171126/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%28%E4%B8%80%29/" target="_blank" rel="noopener">格式化字符串漏洞學習筆記(一)</a></li>
<li><a href="http://www.360zhijia.com/360anquanke/185820.html" target="_blank" rel="noopener">格式化字符串blind pwn詳細教程</a></li>
</ul>
<h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><ul>
<li><a href="https://www.youtube.com/watch?v=BrDujogxYSk" target="_blank" rel="noopener">Basics of Fuzzing by Gynvael</a></li>
</ul>
<h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><ul>
<li><a href="https://paraschetal.in/writing-your-own-shellcode" target="_blank" rel="noopener">Writing your own shellcode – blog by Paras Chetal</a></li>
<li><a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">Shellcode Database</a></li>
<li><a href="https://www.anquanke.com/post/id/85306" target="_blank" rel="noopener">远程漏洞利用：无需借助套接字的Shellcode</a></li>
<li><a href="https://gbmaster.wordpress.com/2014/07/01/x86-exploitation-101-born-in-a-shell/" target="_blank" rel="noopener">x86 Exploitation 101:born-in-a-shell</a></li>
</ul>
<h2 id="ElF-file-format"><a href="#ElF-file-format" class="headerlink" title="ElF file format"></a>ElF file format</h2><ul>
<li><a href="https://www.cs.stevens.edu/~jschauma/631/elf.html" target="_blank" rel="noopener">Executable and Linkable Format (ELF) info</a></li>
<li><a href="http://nullprogram.com/blog/2016/11/17/" target="_blank" rel="noopener">A Magnetized Needle and a Steady Hand– elf structures with a nice storyline</a></li>
<li><a href="https://www.inforsec.org/wp/?p=389" target="_blank" rel="noopener">ELF如何摧毁圣诞 ——通过ELF动态装载机制进行漏洞利用</a></li>
<li><a href="http://bestwing.me/2017/03/30/《A%20Programmer%20Prepares》--ELF/" target="_blank" rel="noopener">《程序員自我修養》讀書筆記—ELF文件結構 by Swing</a></li>
<li><a href="http://opensecuritytraining.info/LifeOfBinaries_files/2012_LifeOfBinaries3.pdf" target="_blank" rel="noopener">Opensecurity Training:The life of binaries;Part 3:ELF info</a></li>
<li><a href="http://www.cnblogs.com/LittleHann/p/3871092.html ELF File Format" target="_blank" rel="noopener">ELF格式&amp;和其分析工具 by Little Hann</a></li>
<li><a href="http://blog.betamao.me/2017/10/10/ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B9%8B%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">ELF文件格式之動態鏈接</a></li>
<li><a href="http://0xpoker.cuit.site/20171201/bss%E6%AE%B5-data%E6%AE%B5-text%E6%AE%B5%E7%AD%89%E8%BF%99%E4%BA%9B%E4%B8%9C%E8%A5%BF%E6%98%AF%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">bss段.data段.text段等這些東西是什么</a></li>
<li><a href="https://www.anquanke.com/post/id/85129" target="_blank" rel="noopener">借助DynELF實現無libc的漏洞利用小结</a></li>
<li><a href="http://bestwing.me/2017/02/15/Memory%20Leak%20&amp;%20DynELF/" target="_blank" rel="noopener">leak技巧以及DynELF的溫習</a></li>
</ul>
<h2 id="Windows-Kernal-Exploit"><a href="#Windows-Kernal-Exploit" class="headerlink" title="Windows Kernal Exploit"></a>Windows Kernal Exploit</h2><ul>
<li><a href="https://o0xmuhe.github.io/tags/windows-kernel/" target="_blank" rel="noopener">Windows Kernal Exploit Study(123)</a></li>
<li><a href="https://drive.google.com/open?id=1fDz3Yt69bTrrxGd1kox6dkOoib05eV-0" target="_blank" rel="noopener">Windows Kernal Exploitation PDF</a></li>
<li><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">Sec Wiki Windows Kernal Exploit</a></li>
</ul>
<h2 id="Linux-Kernal-Exploit"><a href="#Linux-Kernal-Exploit" class="headerlink" title="Linux Kernal Exploit"></a>Linux Kernal Exploit</h2><ul>
<li><a href="http://bobao.360.cn/learning/detail/3700.html" target="_blank" rel="noopener">【系列分享】Linux 内核漏洞利用教程（一）：環境配置</a></li>
<li><a href="http://bobao.360.cn/learning/detail/3702.html" target="_blank" rel="noopener">【系列分享】Linux 内核漏洞利用教程（二）：兩個Demo</a></li>
<li><a href="http://bobao.360.cn/learning/detail/3706.html" target="_blank" rel="noopener">【系列分享】Linux 内核漏洞利用教程（三）：實踐 CSAW CTF 题目</a></li>
<li><a href="http://bestwing.me" target="_blank" rel="noopener">linux-kernel expoit study (1-4)</a></li>
<li><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="noopener">Sec Wiki Linux Kernal Exploits</a></li>
<li><a href="http://pzhxbz.cn/?p=97" target="_blank" rel="noopener">Kernel pwn入门(0) 驅動開發相關</a></li>
<li><a href="http://pzhxbz.cn/?p=98" target="_blank" rel="noopener">Kernel pwn入门(1) 簡易環境搭建</a></li>
<li><a href="http://pzhxbz.cn/?p=99" target="_blank" rel="noopener">Kernel pwn入门(2) 實戰一下babydriver</a></li>
<li><a href="https://speakerdeck.com/megumish/kernelfalseexploitle-siina" target="_blank" rel="noopener">KernelのExploit楽しいな</a></li>
<li><a href="http://tacxingxing.com/2018/02/15/linuxkernelexploit-huan-jing-da-jian/" target="_blank" rel="noopener">Linux Kernel Exploit Environment</a></li>
<li><a href="http://tacxingxing.com/2018/02/22/linuxkernelexploit-null-dereference/" target="_blank" rel="noopener">Linux-Kernel-Exploit NULL dereference</a></li>
<li><a href="http://tacxingxing.com/2018/02/26/linuxkernelexploit-stack-smashing/" target="_blank" rel="noopener">Linux-Kernel-Exploit Stack Smashing</a></li>
</ul>
<h2 id="Linux-Kernal"><a href="#Linux-Kernal" class="headerlink" title="Linux Kernal"></a>Linux Kernal</h2><ul>
<li><a href="https://www.linuxvoice.com/be-a-kernel-hacker/" target="_blank" rel="noopener">Write Your First Linux Kernel Module</a></li>
<li><a href="http://blog.jobbole.com/72115/" target="_blank" rel="noopener">編寫屬於你的第一個Linux内核模塊</a></li>
<li><a href="https://goo.gl/BgQe2X" target="_blank" rel="noopener">上面教程用到的代碼</a></li>
<li><a href="https://medium.com/hungys-blog/linux-kernel-memory-addressing-a0d304283af3" target="_blank" rel="noopener">Linux Kernel: Memory Addressing</a></li>
</ul>
<h2 id="Buffer-Overflow"><a href="#Buffer-Overflow" class="headerlink" title="Buffer Overflow"></a>Buffer Overflow</h2><ul>
<li><a href="https://www.gitbook.com/book/wizardforcel/q-buffer-overflow-tutorial/details" target="_blank" rel="noopener">Q版緩衝區溢出教程</a></li>
<li><a href="https://medium.com/@ktecv2000/%E7%B7%A9%E8%A1%9D%E5%8D%80%E6%BA%A2%E4%BD%8D%E6%94%BB%E6%93%8A%E4%B9%8B%E4%B8%80-buffer-overflow-83516aa80240" target="_blank" rel="noopener">緩衝區溢位攻擊之一(Buffer Overflow)</a></li>
<li><a href="https://medium.com/@ktecv2000/%E7%B7%A9%E8%A1%9D%E5%8D%80%E6%BA%A2%E4%BD%8D%E6%94%BB%E6%93%8A%E4%B9%8B%E4%BA%8C-buffer-overflow-b0a33d43ba1d" target="_blank" rel="noopener">緩衝區溢位攻擊之二(Buffer Overflow)</a></li>
<li><a href="http://www.freebuf.com/vuls/63580.html" target="_blank" rel="noopener">从零开始學Win32平台緩衝區溢出（Part1）</a></li>
<li><a href="https://drive.google.com/open?id=1uv_ZVU6CLfh9Yt0L0rWmwMYbYd12YDR7" target="_blank" rel="noopener">Win32緩衝區溢出實戰</a></li>
<li><a href="https://jinzihao.me/2016/08/%e7%bc%93%e5%86%b2%e5%8c%ba%e6%ba%a2%e5%87%ba%e6%bc%8f%e6%b4%9e%e7%9a%84%e5%88%a9%e7%94%a8/#more-1325" target="_blank" rel="noopener">緩衝區溢出漏洞的利用</a></li>
<li><a href="http://www.freebuf.com/articles/system/40107.html" target="_blank" rel="noopener">緩衝區溢出攻擊初學者手册（更新版）</a></li>
<li><a href="http://www.freebuf.com/articles/system/60033.html" target="_blank" rel="noopener">技術分析：時尚時尚最時尚的緩衝區溢出攻擊</a></li>
</ul>
<h2 id="File-結構體"><a href="#File-結構體" class="headerlink" title="File 結構體"></a>File 結構體</h2><ul>
<li><a href="https://www.anquanke.com/post/id/84987" target="_blank" rel="noopener">溢出利用FILE結構體</a></li>
<li><a href="http://tacxingxing.com/2018/02/09/fsp/" target="_blank" rel="noopener">FILE Structure Oriented Programing</a></li>
</ul>
<h2 id="Integer-Overflow"><a href="#Integer-Overflow" class="headerlink" title="Integer Overflow"></a>Integer Overflow</h2><ul>
<li><a href="https://gbmaster.wordpress.com/2015/08/13/x86-exploitation-101-integer-overflow-adding-one-more-aaaaaaaaaaand-its-gone/" target="_blank" rel="noopener">x86 Exploitation 101: “Integer overflow”</a></li>
</ul>
<h2 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h2><h1 id="Others-Repository"><a href="#Others-Repository" class="headerlink" title="Others Repository"></a>Others Repository</h1><ul>
<li><a href="https://chybeta.github.io/2017/08/19/Software-Security-Learning/" target="_blank" rel="noopener">Software Security Learning by Chybeta</a></li>
<li><a href="http://www.pentest.guru/index.php/2016/01/28/best-books-tutorials-and-courses-to-learn-about-exploit-development/" target="_blank" rel="noopener">Best books &amp; Tutorials &amp; Course to learn abot explot developement</a></li>
<li><a href="https://github.com/SteinsGatep001/Binary" target="_blank" rel="noopener">SteinsGatep001</a></li>
<li><a href="https://github.com/InfoSecIITR/reading-material" target="_blank" rel="noopener">Reading Material by InfoSecIITR</a></li>
<li><a href="https://github.com/Vancir/CTF-Pwn-ResourcesList" target="_blank" rel="noopener">CTF-Pwn-ResourcesList</a></li>
<li><a href="https://www.slideshare.net/search/slideshow?searchfrom=header&amp;q=Pwn+CTF" target="_blank" rel="noopener">Slideshare for pwn resource</a></li>
<li><a href="https://github.com/InfoSecIITR/reading-material" target="_blank" rel="noopener">Reading Material by InfoSecIITR</a></li>
<li><a href="https://403forbidden.website/2017/09/%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%bc%8f%e6%b4%9e%e5%ad%a6%e4%b9%a0%e8%bf%9e%e8%bd%bd-0/" target="_blank" rel="noopener">二進制漏洞學習連載</a></li>
</ul>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><ul>
<li><a href="http://libc.pw/2015/08/08/Dword-shoot/" target="_blank" rel="noopener">Dword Shoot漏洞</a></li>
<li><a href="http://aptx4869.me/ctf/2017/09/08/Overflow.html" target="_blank" rel="noopener">Pwn探索筆記</a></li>
<li><a href="http://repwn.com/wiki.html" target="_blank" rel="noopener">Binary wiki by bird for some good articles collection</a></li>
<li><a href="https://pwn.torchpad.com/" target="_blank" rel="noopener">PWNABLE Wiki</a></li>
<li><a href="http://www.agner.org/optimize/calling_conventions.pdf" target="_blank" rel="noopener">Calling Conventions</a></li>
<li><a href="https://youtu.be/TQlOXdXtLnQ" target="_blank" rel="noopener">AIS3 2016 中區 Binary Exploitation</a></li>
<li><a href="https://youtu.be/kD2V_t9zU_M" target="_blank" rel="noopener">AIS3 2016 南區 Binary Exploitation</a></li>
<li><a href="https://www.youtube.com/watch?v=NMgIYI_xUt8" target="_blank" rel="noopener">2015計算機安全 Day1</a></li>
<li><a href="https://www.youtube.com/watch?v=ADJUgEhNlZI" target="_blank" rel="noopener">2015計算機安全 Day2</a></li>
<li><a href="https://www.youtube.com/watch?v=WnDAHK-PxhQ" target="_blank" rel="noopener">STCS 2016 Week 3</a></li>
<li><a href="https://www.youtube.com/watch?v=9bHibgrjNlc" target="_blank" rel="noopener">STCS 2016 Week 4</a></li>
<li><a href="https://www.youtube.com/watch?v=SwrjWioEXkk" target="_blank" rel="noopener">STCS 2016 Week 5</a></li>
<li><a href="https://www.youtube.com/watch?v=wsIvqd9YqTI" target="_blank" rel="noopener">STCS 2016 Week 8</a></li>
<li><a href="https://www.youtube.com/watch?v=qFyoWH_5Clo" target="_blank" rel="noopener">STCS 2016 Week 10</a></li>
<li><a href="https://www.youtube.com/watch?v=IY7jYUCEz1o" target="_blank" rel="noopener">STCS 2016 Week 11</a></li>
<li><a href="https://www.youtube.com/watch?v=dooN6X28daI" target="_blank" rel="noopener">STCS 2016 Week 12</a></li>
<li><a href="https://www.youtube.com/watch?v=jEHgm7S58N8" target="_blank" rel="noopener">STCS 2016 Week 13</a></li>
<li><a href="https://www.youtube.com/watch?v=gQXyZY7Ucjc&amp;t" target="_blank" rel="noopener">STCS 2016 Seccom and Ptrace</a></li>
<li><a href="https://www.youtube.com/watch?v=PhMcUJ9pWs0" target="_blank" rel="noopener">STCS 2016 JavaScript Exploits</a></li>
<li><a href="https://drive.google.com/open?id=1GMLvHc4RaRn4zThp80bcJkbM1Yp4_al0SUEuyL861BE" target="_blank" rel="noopener">軟件安全PPT1</a></li>
<li><a href="https://drive.google.com/open?id=1Atxf2u02nEeTHqjLbW9Yk29Z27oO4uePa5R54yJ188c" target="_blank" rel="noopener">軟件安全PPT2</a></li>
</ul>
<h1 id="待分類"><a href="#待分類" class="headerlink" title="待分類"></a>待分類</h1><p><a href="http://pwn4.fun/tags/Pwn/" target="_blank" rel="noopener">http://pwn4.fun/tags/Pwn/</a><br><a href="http://blog.hac425.top/categories/ctf/" target="_blank" rel="noopener">http://blog.hac425.top/categories/ctf/</a><br><a href="https://github.com/hacksysteam/HackSysExtremeVulnerableDriver" target="_blank" rel="noopener">https://github.com/hacksysteam/HackSysExtremeVulnerableDriver</a><br><a href="https://hshrzd.wordpress.com/2017/05/28/starting-with-windows-kernel-exploitation-part-1-setting-up-the-lab/" target="_blank" rel="noopener">https://hshrzd.wordpress.com/2017/05/28/starting-with-windows-kernel-exploitation-part-1-setting-up-the-lab/</a><br><a href="https://bbs.pediy.com/thread-218838.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-218838.htm</a><br>Write Once, Pwn Anywhere in BlackHat 2014<br><a href="https://github.com/bruce30262/x86_shellcode_tutorial" target="_blank" rel="noopener">https://github.com/bruce30262/x86_shellcode_tutorial</a><br>Scraps of notes on remote stack overflow exploitation<br>The House Of Lore: Reloaded ptmalloc v2 &amp; v3: Analysis &amp; Corruption<br>Kernel instrumentation using kprobes<br>Infecting loadable kernel modules: kernel versions 2.6.x/3.0.x<br>A Eulogy for Format Strings<br>Dynamic Program Analysis and Software Exploitation<br>Phrackerz: Two Tales<br>Exploiting DLmalloc frees in 2009<br>Exploiting TCP Persist Timer Infiniteness<br>Linux Kernel Heap Tampering Detection<br>How close are they of hacking your brain<br>A brief history of the Underground scene<br>Attacking the Core: Kernel Exploitation Notes<br>Automated vulnerability auditing in machine code<br>Hacking deeper in the system<br><a href="https://github.com/pandazheng/LinuxExploit" target="_blank" rel="noopener">https://github.com/pandazheng/LinuxExploit</a><br><a href="http://phrack.org/issues/57/8.html#article" target="_blank" rel="noopener">http://phrack.org/issues/57/8.html#article</a><br><a href="http://phrack.org/issues/57/9.html#article" target="_blank" rel="noopener">http://phrack.org/issues/57/9.html#article</a><br><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" target="_blank" rel="noopener">http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html</a><br><a href="https://github.com/0xAX/linux-insides/blob/master/SysCall/syscall-4.md" target="_blank" rel="noopener">https://github.com/0xAX/linux-insides/blob/master/SysCall/syscall-4.md</a><br><a href="http://eleveneat.com/2015/07/26/Software-Security-Week1/" target="_blank" rel="noopener">http://eleveneat.com/2015/07/26/Software-Security-Week1/</a><br><a href="http://eleveneat.com/2015/08/14/Software-Security-Week2/" target="_blank" rel="noopener">http://eleveneat.com/2015/08/14/Software-Security-Week2/</a><br><a href="https://403forbidden.website/2017/09/%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%bc%8f%e6%b4%9e%e5%ad%a6%e4%b9%a0%e8%bf%9e%e8%bd%bd-0/" target="_blank" rel="noopener">https://403forbidden.website/2017/09/%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%bc%8f%e6%b4%9e%e5%ad%a6%e4%b9%a0%e8%bf%9e%e8%bd%bd-0/</a><br><a href="http://staff.csie.ncu.edu.tw/hsufh/COURSES/SPRING2018/attackdefense.html" target="_blank" rel="noopener">http://staff.csie.ncu.edu.tw/hsufh/COURSES/SPRING2018/attackdefense.html</a><br><a href="http://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html#intro" target="_blank" rel="noopener">http://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html#intro</a></p>
]]></content>
      
        <categories>
            
            <category> Binary Security </category>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Binary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解計算機第一章筆記]]></title>
      <url>/2017/12/06/opch1/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="編譯系統"><a href="#編譯系統" class="headerlink" title="編譯系統"></a>編譯系統</h1><p>要將C文件轉化成電腦可執行的文件，需要用編譯器將該文件轉化成電腦可讀懂的格式-二進制。我會使用編譯器GCC做例子來讓大家更明白其執行的過程。<br>首先我們要有一個C文件。<a id="more"></a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hello.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;   </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello,world\n"</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Unix裡面執行<code>gcc -o hello hello.c</code>，此時編譯器便會讀取hello.c且將它轉成二進制文件。轉換過程如下。<br><img src="https://s33.postimg.org/6uht5i4n3/change.jpg" alt=""></p>
<p>這過程總共有4個階段：</p>
<h2 id="預處理階段"><a href="#預處理階段" class="headerlink" title="預處理階段"></a>預處理階段</h2><p>預處理器(cpp)會根據C文件裡面的#的命令來讀取Header，例如在這裡會讀取stdio.h, 然後將其內容加入原本的C文件裡面，生成一個以.i作為擴展名的文件。</p>
<p>再來，如果只想進行預處理可輸入<code>gcc -E hello.c -o hello.i</code>。預處理階段，主要是處理源代碼裡面含有<code>#</code>字符的指令。<br>例如: “#include”,”#define”。</p>
<h2 id="編譯階段"><a href="#編譯階段" class="headerlink" title="編譯階段"></a>編譯階段</h2><p>然後編譯器會把hello.i轉成hello.s,也就是所謂的匯編語言程序。<br><code>gcc -S hello.i -o hello.s</code></p>
<p>變成彙編語言程序後的源代碼如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">main：</div><div class="line">    subq $8,%rsp</div><div class="line">    movl $.LCO,%edi</div><div class="line">    call puts</div><div class="line">    movl $0, %eax</div><div class="line">    addq $8, %rsp</div><div class="line">    ret</div></pre></td></tr></table></figure>
<h2 id="匯編階段"><a href="#匯編階段" class="headerlink" title="匯編階段"></a>匯編階段</h2><p>然後就匯編器就可以派上用場啦，它能將hello.s轉成機械語言指令，再把指令變成可重定位目標程序(Relocatable object program)的格式，存放在hello.o中。<br><code>as hello.s -o hello.o</code></p>
<h2 id="鏈接階段"><a href="#鏈接階段" class="headerlink" title="鏈接階段"></a>鏈接階段</h2><p>因為這裡helloc程序用了printf函數。此函數其實是本來就屬於標準C Library裡面的一個函數要調用此函數，我們就必須用到鏈接器(ld)將函數合拼到hello.o裡面，完成這過程後，最終也生成了可以被系統執行的hello文件(可執行目標文件)。</p>
<p>由於，鏈接器需要用到一大堆文件把hello.o鏈接起來，才可以把源文件變成最終的可執行目標文件。所以我會在介紹鏈接文件的文章裡面讓大家了解當中的原因。</p>
<h1 id="運行可執行目標文件hello"><a href="#運行可執行目標文件hello" class="headerlink" title="運行可執行目標文件hello"></a>運行可執行目標文件hello</h1><p>在命令行輸入<code>./hello</code>,系統便會運行hello程序，也會返回結果hello,world在你的Shell裡面。</p>
<h1 id="編譯器到底做了什麼"><a href="#編譯器到底做了什麼" class="headerlink" title="編譯器到底做了什麼?"></a>編譯器到底做了什麼?</h1><p>在整個編譯流程裡面,你的源代碼會經過以下六個步驟變成最終目標代碼。</p>
<ul>
<li>掃描：源代碼被輸入到掃描器內進行詞法分析，系統會用有限狀態機算法分割每一個代碼字符成為一系列的記號(Token)。</li>
<li>語法分析：接下來語法分析器(Grammar Parser)負責把那些記號進行語法分析後，會生成語法樹(Syntax Tree)。這裡只針對表達式語法做出分析。</li>
<li>語意分析：語意分析器(Semantic Analyzer)負責判定代碼裡面的的靜態語意在語法上是否合法。靜態語意通常是指聲明和類型的轉換。</li>
<li>源代碼優化：語法樹會被轉換成被優化後的中間代碼。</li>
<li>代碼生成：而中間代碼此時終於可以轉換成目標機器代碼。</li>
<li>目標碼優化：簡化目標碼(也是所謂的Assembly Code)。</li>
</ul>
<p>例子：未優化的代碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">movl index, %ecx</div><div class="line">addl $4,%ecx</div><div class="line">mull $8,%ecx</div><div class="line">movl index,%eax</div><div class="line">movl %ecx,array(,eax,4)</div></pre></td></tr></table></figure></p>
<p>優化後：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">movl index, %edx</div><div class="line">leal 32(,%edx,8),%eax</div><div class="line">movl %eax,array(,%edx,4)</div></pre></td></tr></table></figure></p>
<p>這裡只需要了解代碼被優化了，其代碼代表什麼在這文章並沒有討論意義。</p>
<h1 id="系統的硬件組成"><a href="#系統的硬件組成" class="headerlink" title="系統的硬件組成"></a>系統的硬件組成</h1><p>包括了總線，I/O設備，主存還有處理器。</p>
<h2 id="總線"><a href="#總線" class="headerlink" title="總線"></a>總線</h2><h2 id="I-O設備"><a href="#I-O設備" class="headerlink" title="I/O設備"></a>I/O設備</h2><h2 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h2><h2 id="處理器"><a href="#處理器" class="headerlink" title="處理器"></a>處理器</h2><h1 id="操作系統管理硬件"><a href="#操作系統管理硬件" class="headerlink" title="操作系統管理硬件"></a>操作系統管理硬件</h1><ul>
<li>防止硬件被失控的應用程序濫用</li>
<li>向應用程序提供簡單一致的機制來控制複雜而又不相同的低級硬件設備</li>
</ul>
<h1 id="進程"><a href="#進程" class="headerlink" title="進程"></a>進程</h1><h1 id="線程"><a href="#線程" class="headerlink" title="線程"></a>線程</h1><h1 id="虛擬內存"><a href="#虛擬內存" class="headerlink" title="虛擬內存"></a>虛擬內存</h1><p>虛擬內存是一種當CPU內存不夠的時候而需要用到的一種技術，它允許CPU的每一個進程都擁有一個私有的虛擬地址，這樣能使到每一個進程都可以看到一樣的內存空間。下圖是Linux進程使用虛擬地址的例子。至於裡面各區域的詳細解釋以後會在別的文章為你們一一介紹。<br><img src="https://s33.postimg.org/a8mmc2kv3/vradd.jpg" alt=""></p>
<p><img src="https://s33.postimg.org/6qamfnp3z/engva.jpg" alt=""></p>
<ul>
<li>程序代碼和數據(Code and Data)：<a href="">第七章筆記</a></li>
<li>堆(heap)：<a href="">第九章筆記</a>或<a href="">深入了解堆</a></li>
<li>共享庫(Shared Library)：<a href="">第九章筆記</a></li>
<li>棧(Stack)：[第三章筆記]或<a href="">深入了解棧</a></li>
<li>內核虛擬內存(Kernal Virtual Memory)：<a href="">第九章筆記</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
            <category> Deep Understanding of Operating System </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Note </tag>
            
            <tag> Operating System </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016 SANS Holiday Hack Challenge Writeups]]></title>
      <url>/2017/12/05/sans2016HHC/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="SANS2016HHC"><a href="#SANS2016HHC" class="headerlink" title="SANS2016HHC"></a>SANS2016HHC</h1><p>This is the writeup on how I solve the 2016 SANS Holiday Hack Challege</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>故事發生在一個夜深人靜的晚上，喬斯(Josh Doise)和傑西卡(Jessica Doise)在睡覺的時候聽到聖誕老人竟然出現在他們家裡的聲音。但正當他們決定要去看看聖誕老人的真面目時，發生了一些十分奇怪的事情，一陣禮物被撕破的聲音從他們家樓下傳出來。他們還聽到尖銳的打鬥聲，很可惜的是，在他們去到樓下時候，聖誕老人已經不見了，只見到家裡一片混亂，家裡的聖誕樹還甚至被劈開一半呢。為了調查事件的發生你們將開始一段新的冒險。<a id="more"></a>在我進入遊戲教程前，我想先說這個遊戲裡面所有的挑戰都是他們設計的：</p>
<ul>
<li>Mark Baggett</li>
<li>Tad Bennett</li>
<li>Ron Bowes</li>
<li>Jeff McJunkin</li>
<li>Tim Medin</li>
<li>Lee Neely</li>
<li>Ed Skoudis</li>
<li>Joshua Wright</li>
</ul>
<p>在這裡感謝他們設計的挑戰讓我學到新的Forensic知識。想進入遊戲挑戰自己的人可以按<a href="https://quest2016.holidayhackchallenge.com/" target="_blank" rel="noopener">這裡</a></p>
<h1 id="Part-1-A-Most-Curious-Business-Card"><a href="#Part-1-A-Most-Curious-Business-Card" class="headerlink" title="Part 1:A Most Curious Business Card"></a>Part 1:A Most Curious Business Card</h1><p><img src="https://s29.postimg.org/88tfwhkjr/venue1.jpg" alt=""></p>
<p>遊戲一開始你就會身處在聖誕老人不見了的案發現場。在和喬斯和傑西卡對話後，你知道你需要調查那張留在現場神秘的卡片。這張卡片留下了聖誕老人的Twitter戶口以及Instagram戶口。</p>
<p><img src="https://s29.postimg.org/69cik10ef/santawclaus_shadow.png" alt=""></p>
<p>仔細調查後，你可以發現到聖誕老人的Tweet隱藏着其他信息。如果想快速獲取聖誕老人留下的所以信息你可以用tweet_dumper.py，一次過將所有對話save成CSV文件。當你成功把所有對話都整齊排列好你會看到所有的信息會組成一個很大而且明顯的信息，那就是:BUGBOUNTY。</p>
<p>你也可以在<a href="http://twlets.com/" target="_blank" rel="noopener">http://twlets.com/</a> 這個網站直接將自己或他人Twitter的信息變成CSV文件。<br><img src="https://s23.postimg.org/xsrti039n/bugbunty.jpg" alt=""></p>
<p>接著你可以查看聖誕老人的Instagram，在第一張照片找到了2個Zip File的提示。</p>
<p><img src="https://s23.postimg.org/aq25xsut7/Insta.jpg" alt=""></p>
<ul>
<li><p>提示1：電腦上出現了Zip file的名字：SantaGram_v4.2.zip<br><img src="https://s30.postimg.org/g3duylzrl/instagram_p1.png" alt=""></p>
</li>
<li><p>提示2：紙張上有這個網站<a href="http://www.northpolewonderland.com/" target="_blank" rel="noopener">http://www.northpolewonderland.com/</a><br><img src="https://s23.postimg.org/j130t7gzf/instagram_p2.png" alt=""></p>
</li>
</ul>
<p>憑著這兩個提示你可以聯想到的是Zip File的位置可能就是:<a href="http://www.northpolewonderland.com/SantaGram_v4.2.zip" target="_blank" rel="noopener">http://www.northpolewonderland.com/SantaGram_v4.2.zip</a> 。經過嘗試後你就會成功下載到那個Zip File。裡面有一個SantaGram_4.2.apk的文件。</p>
<h1 id="Part-2-Awesome-Package-Konveyance"><a href="#Part-2-Awesome-Package-Konveyance" class="headerlink" title="Part 2:Awesome Package Konveyance"></a>Part 2:Awesome Package Konveyance</h1><p><img src="https://s24.postimg.org/t3kwc4rad/Holly.jpg" alt=""></p>
<p>接下來的故事發展，你會通過一個禮物袋來到一個冰天雪地的地方。沒錯，這裡就是聖誕老人和他的精靈居住的地方，北極。這時候你會見到Holly Evergreen。他會告訴你以下幾件事情：</p>
<ul>
<li>在你去攻擊任何一個系統之前，請先去拜訪Oracle。</li>
<li>Santagram 是聖誕老人和他的精靈所使用的社交媒體，想知道更多可以去拜訪在北極的其他精靈哦。</li>
<li>找齊所有啟動Cranberry Pi的零件，找齊後他會給你Cranbian image，並且希望你能幫他找到Login的密碼。[詳細資料請參考Part 3]</li>
</ul>
<p>零件的所在地:[以後補充]</p>
<ul>
<li>Cranberry Pi Board</li>
<li>Power Cord</li>
<li>HDMI Cable</li>
<li>SD Card</li>
<li>Heat Sink</li>
</ul>
<p><img src="https://s23.postimg.org/7zo277wor/Shinny_Uptree.jpg" alt=""></p>
<p>為了找回失踪的聖誕老人，你必須想辦法去知道Santagram_4.2.apk 這個文件裡面到底隱藏了什麼信息。在北極尋找了一段時間後，你可以在聖誕老人工作室的火車站找到Shinny Upatree。他會告訴你怎樣去分析你找到的APK文件。從他口中你明白到了以下的事情：</p>
<ul>
<li>APK File 也是Zip File的一種你可以Unzip來取得裡面的所有文件。</li>
<li>APK File 是用Java程式語言來寫，想找回原本的Coding，要用Android Studio 或者JadX 來Decompile那個APK File。</li>
<li>Jadx commandline可以將APK file Decompile成每一個獨立的Java文件。</li>
<li>Joshua在2016Hack Fest呈現的<a href="https://goo.gl/m076lb" target="_blank" rel="noopener">簡報</a>裡面也有提及如何更有效的使用Android Studio and JadX來分析Apk文件。</li>
</ul>
<p>得到這些有用的情報後，你可以開始分析你得到的Apk文件了。正當你Unzip的時候發覺你需要輸入密碼才能繼續你的分析，不然你就無法繼續下去。其實，我在解題的時候在這裡卡了很久的一段時間，直到我在Reddit那邊見到有一個人給予的提示：你可能已經一早獲得了Unzip Santagram的密碼，只是你自己沒察覺到而已。我腦中醒起會不會是之前的BUGBOUNTY。最後，皇天不負有心人，我成功找到密碼(bugbounty)啦。進入分析Apk的階段，你可以用JadX 去Decompile 你得到的Apk文件，一旦Jadx成功Decompile後，你就能找題目要求你的username and password。使用Text Search功能你可以找到username and password 都隱藏在Code裡面。這段Code你可以在northpolewonderlad.santagram.SplashScreen Class裡面找到。</p>
<p><img src="https://s28.postimg.org/4gi5nv3gt/userpass.jpg" alt=""></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jSONObject.<span class="keyword">put</span>(<span class="string">"username"</span>, <span class="string">"guest"</span>);</div><div class="line">jSONObject.<span class="keyword">put</span>(<span class="string">"password"</span>, <span class="string">"busyreindeer78"</span>);</div></pre></td></tr></table></figure>
<p>另外，題目要求的Audio Component你可以在res/raw裡面找到，文件名稱為：discombobulatedaudio1.mp3。Unzip Santagram的Apk你也可以的直接得到該Mp3 File。</p>
<p><code>unzip Santagram_4.2.apk</code></p>
<p>如果想要該Mp3文件，可以到這裡<a href="https://drive.google.com/open?id=0B18u7ECQO-gTLTUteDQ4ZDZsdkk" target="_blank" rel="noopener">下載</a></p>
<h1 id="Part-3-A-Fresh-Baked-Holiday-Pi"><a href="#Part-3-A-Fresh-Baked-Holiday-Pi" class="headerlink" title="Part 3: A Fresh-Baked Holiday Pi"></a>Part 3: A Fresh-Baked Holiday Pi</h1><p>在解決了apk的文件後，你終於可以靜下心來研究一下你剛剛得到的Cranbian image。要知道怎樣使用這個Image你可以找在聖誕樹下的Wunhorse Openslae來詢問。從他口中你明白到了以下的事情：</p>
<ul>
<li>Cranbian 其實是Linux Based的File System Image。</li>
<li>Eskoudis 的部落格會教你<a href="https://pen-testing.sans.org/blog/2016/12/07/mount-a-raspberry-pi-file-system-image" target="_blank" rel="noopener">如何Mount a Raspberry Pi File System Image</a></li>
</ul>
<p>當你Unzip disk image後，你可以按照以下步驟來打開Cranbian image。</p>
<ul>
<li>Step 1:用<code>fdisk -l cranbian-jessie.img</code>command你可以得知這個Image由2個部分組成。而你要找的資料是在第二個部分裡面。你也會知道開始的Sectors會是137216。 </li>
<li>Step 2:由於mount command需要用到Offset，所以你要計算出Offset的總值得。這個Image的offset=512×137216=70254592</li>
<li>Step 3:打<code>mount -v -o offset=70254592 -t ext4 cranbian-jessie.img mnt/</code> 你就能成功Mount Cranbian Image。這個Mount Command裡面的 -v 是verbose, 會顯示更多正在Run着的Command的資訊。-o options列出還要使用的Option。 -t = type System file的種類， 而最後的/mnt是我自己設定的Mount Point.你可以用mkdir來建立一個你要的Mount point。<br><img src="https://s28.postimg.org/6o0gdt80t/Mountimg.jpg" alt=""></li>
</ul>
<p>根據題目要求，你需要找出Cranpi account的Password。一般來說，Linux存儲密碼的位置會放在<code>/etc/shadow</code>File裡面。而這些密碼都會用某些演算法進行加密再被存儲到這個位置。用<code>cat mnt/etc/shadow</code>,會得到Cranpi account密碼被hashing後的value。<br><img src="https://s30.postimg.org/c0yurwpup/shadow.jpg" alt=""></p>
<p>要找會原來的值(密碼)，你需要將Hash值還原回原本的文字。在Kali Linux裡面John the ripper是一個非常優秀的密碼破解工具。為了減輕破解密碼的難度，住在Small Tree house的Minty Candycane給了你最有用的提示，用Rockyou.txt來配合Crack的過程。使用方法是，在Linux Shell裡面打<code>john --wordlist=rockyou.lst mnt/etc/shadow</code>就會開始進行Password Cracking。破解後的密碼是yummycookies。<br><img src="https://s23.postimg.org/4sgnepyxn/cracked.jpg" alt="cracked.jpg"></p>
<p>然後把你得到的密碼告訴Holly Evergreen，他就會Unlock Cranbian Pi的Account讓你使用。<br><img src="https://s27.postimg.org/t16jh940z/cpi.jpg" alt=""></p>
<p>現在你可以用Cranbian Pi去啟動遊戲裡面每個Terminal了。</p>
<p>當你找到Terminal後，會見到旁邊有一個被密碼上鎖的門。你需要好好利用Terminal裡面的資訊來找到門的密碼。<br><img src="https://s24.postimg.org/hq02dcuol/Elf_House2_Front.jpg" alt="Elf House2Front.jpg"></p>
<ul>
<li>Door 1 - Elf House #2</li>
</ul>
<p>一旦你Access Terminal後，你會見到這句話</p>
<blockquote>
<p>To open the door, find both parts of the passphrase inside the /out.pcap file</p>
</blockquote>
<p>待補充</p>
]]></content>
      
        <categories>
            
            <category> Writeups </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Writeups </tag>
            
            <tag> SANS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo世界裡靈活運用Markdown和html不是夢]]></title>
      <url>/2017/12/02/hexomarkdown/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Markdown是一種輕量級的標記語言，其用簡單的標記語法便可達到排版的目的，其可以使我們更加專注於內容的編寫，而不需過多關注排版。本文主要整理了 Markdown中的常用的標記語法，以便自己與他人以後查用。<br><a id="more"></a></p>
<h1 id="Note標籤"><a href="#Note標籤" class="headerlink" title="Note標籤"></a>Note標籤</h1><ul>
<li>一般Note </li>
</ul>
<div class="note">note</div>

<p><code>&lt;div class=&quot;note&quot;&gt;default&lt;/div&gt;</code></p>
<ul>
<li>default</li>
</ul>
<div class="note default">default</div>

<p><code>&lt;div class=&quot;note default&quot;&gt;default&lt;/div&gt;</code></p>
<div class="note success">success</div>

<div class="note primary">primary</div>

<div class="note info">info</div>

<div class="note warning">warning</div>

<div class="note danger">danger</div>

<div class="note danger no-icon">danger no-icon</div>

<h1 id="Tab的顯示"><a href="#Tab的顯示" class="headerlink" title="Tab的顯示"></a>Tab的顯示</h1><div class="tabs" id="咖啡"><ul class="nav-tabs"><li class="tab"><a href="#咖啡-1">咖啡 1</a></li><li class="tab active"><a href="#咖啡-2">咖啡 2</a></li><li class="tab"><a href="#咖啡-3">咖啡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="咖啡-1"><p><strong>這是咖啡</strong>好喝嗎？</p>
</div><div class="tab-pane active" id="咖啡-2"><p><strong>這是雪糕</strong>甜甜的</p>
</div><div class="tab-pane" id="咖啡-3"><p><strong>這是布丁</strong>請你吃哦！</p>
</div></div></div>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Markdown </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符集(Charcater Set)與字符編碼(Encoding)]]></title>
      <url>/2017/11/29/charencoding/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-基礎知識"><a href="#0x01-基礎知識" class="headerlink" title="0x01 基礎知識"></a>0x01 基礎知識</h1><p>在了解編碼是怎麼一回事之前，我們必須要先知道2個概念，那就是位和字節。位(bit)是指電腦裡面存放的二進制數值=0或者1。而只要有8個位便可稱之為字節(byte)。例子：01000001，在16進制裡面，這個字節=0x41。</p>
<p>字符編碼的意思是電腦會使用某種規則將平時我們日常生活中會用到的一些文字/符號轉換成電腦可以讀取的二進制數字進行相互的轉換。<a id="more"></a></p>
<p>例子：電腦使用ASCII字符集來進行字母“A”的轉換。<br><code>01000001（0x41）&lt;-&gt; 65 &lt;-&gt; &#39;A&#39;</code></p>
<p>在編碼時，這些規則就會用所謂的字符集來處理字符和二進制數字代碼之間的轉換。</p>
<p>而字符集則是一個系統支持的所有抽象字符的集合。這些字符就是各種文字和符號的總稱。通常包括了各個國家文字、標點符號、圖形符號、數字等等。</p>
<h1 id="0x02-常見的字符集和字符編碼"><a href="#0x02-常見的字符集和字符編碼" class="headerlink" title="0x02 常見的字符集和字符編碼"></a>0x02 常見的字符集和字符編碼</h1><h2 id="Unicode編碼"><a href="#Unicode編碼" class="headerlink" title="Unicode編碼"></a>Unicode編碼</h2><h2 id="Ascii編碼"><a href="#Ascii編碼" class="headerlink" title="Ascii編碼"></a>Ascii編碼</h2><h2 id="中文類別的編碼"><a href="#中文類別的編碼" class="headerlink" title="中文類別的編碼"></a>中文類別的編碼</h2>]]></content>
      
        <categories>
            
            <category> Binary Security </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Binary </tag>
            
            <tag> Encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Debug指令完整教學]]></title>
      <url>/2017/11/20/debugexp/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h1><p>Debug是DOS和Windows裡面專門調試程序以及讓你在電腦上編寫匯編語言一種工具。一般上，我們可以使用它，來查看CPU各種寄存器中的內容、內存的情況和在機器碼級跟蹤程序的運行。而Debug指令只能在這些版本的Windows內使用：Windows® 9x/Me，Windows® NT/2000/XP/2003。而在之後版本的Windows就再也無法使用這個指令了。<a id="more"></a>Debug最初的設計是用來處理.最大容量可達到65280 (6xx1024-256)bytes或少於此大小的.COM文件。而至於少過多少，那就得取決於程序必須在堆棧上同時放置的最大字節數。為什麼一定要減掉256字節呢？那是因為DEBUG經常使用從00到FF十六進制偏移量的區域來存儲一些內部數據，例如加載的文件的名字。所以.COM程序應該只能是用在單個內存段裡面（只有64 KiB）。</p>
<p>這裡先簡單介紹會用到的Debug指令的Option。</p>
<ul>
<li><code>-r</code> 查看、改變CPU寄存器的內容</li>
<li><code>-d</code> 查看內存中的內容</li>
<li><code>-e</code> 改寫內存中的內容</li>
<li><code>-u</code> 將內存中的機器指令翻譯成匯編指令</li>
<li><code>-t</code> 執行一條機器指令</li>
<li><code>-a</code> 以匯編指令的格式在內存中寫入一條機器指令。</li>
</ul>
<h1 id="0x02-Debug指令的使用。"><a href="#0x02-Debug指令的使用。" class="headerlink" title="0x02 Debug指令的使用。"></a>0x02 Debug指令的使用。</h1><p>P/s:本教程會以Windows2000作為例子。</p>
<p>要使用Debug這個指令，你需要在CMD中輸入debug，之後你就可以開始使用各種Debug相關的指令。先用<code>-r</code>來查看各個寄存器的當前情況吧。<br><img src="/images/debugmode/01.JPG" alt=""></p>
<p>然後我們試試看用<code>-r 寄存器</code>來修改他們的值吧。輸入<code>-r ax</code>，在出現<code>：</code>後輸入1111，你的AX就會等於1111。<br><img src="/images/debugmode/02.JPG" alt=""></p>
<p>現在的CS:IP為0AD8:0100。而你也可以看到機器碼顯示的位址為D3990075。輸入<code>-r ip</code>，再把IP修改成200。<br><img src="/images/debugmode/03.JPG" alt=""></p>
<p>最後輸入<code>-r cs</code>把CS修改成ff00。<br><img src="/images/debugmode/04.JPG" alt=""></p>
<p>現在我們要用<code>-d</code>指令來看內存中的內容。以下例子為0AD8H處的內容。輸入後，你可見到這個指令列出了0AD8:0200到0AD8:027F的完整內容。<br>格式為<code>-d 段地址:偏移地址</code><br><img src="/images/debugmode/05.JPG" alt=""></p>
<p>從圖來看左邊顯示的是每行的起始地址。最右邊對應的就是顯示的ASCII碼字符。現在我們再看另一個例子，這次我們會使用<code>-e</code> 改寫內存中的內容。輸入後看到的結果如下：<br><img src="/images/debugmode/06.JPG" alt=""></p>
<p>現在，我們來學一下怎樣用<code>-e</code>指令來寫入機械碼。假設我們要輸入以下的機械碼。然後再使用<code>-u</code>查看你刚刚輸入的機械碼和對應的匯編指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">機械碼</th>
<th style="text-align:center">所對應的匯編指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">b8 01 00</td>
<td style="text-align:center">mov ax,0001</td>
</tr>
<tr>
<td style="text-align:center">b9 02 00</td>
<td style="text-align:center">mov cx,0002</td>
</tr>
<tr>
<td style="text-align:center">01 c8</td>
<td style="text-align:center">add ax,cx</td>
</tr>
</tbody>
</table>
<p><img src="/images/debugmode/07.JPG" alt=""></p>
<p>在使用<code>-t</code>去執行我們剛剛寫入的指令前我們必須先確認CS:IP已經指向了1000:0。你們可以看到下圖所示，我用了<code>-r</code>把CS:IP指到我要的位址去。<br><img src="/images/debugmode/08.JPG" alt=""></p>
<p>現在可以輸入<code>-t</code>指令，你可以看到指令<code>mov ax,0001</code>被執行了，而此時ax也變成了1，IP變成了0003，因為這個指令共用了3個字節。<br><img src="/images/debugmode/09.JPG" alt=""></p>
<p>繼續用<code>-t</code>指令看看接下去的變化吧。<br><img src="/images/debugmode/10.JPG" alt=""></p>
<p>由於使用<code>-e</code>一個一個輸入機器代碼實在太麻煩了，所以你可以用<code>-a</code>這個Option来讓你直接輸入匯編指令，而不是機械代碼。比如說下面我就從CS:IP=1000:0那邊開始輸入我的匯編指令。要結束你的輸入只需要在給出的起始地址後按Enter鍵就行了。<br><img src="/images/debugmode/11.JPG" alt=""></p>
<h1 id="0x03-Debug指令的功課"><a href="#0x03-Debug指令的功課" class="headerlink" title="0x03 Debug指令的功課"></a>0x03 Debug指令的功課</h1><p>Task A<br>请用<code>-e</code>和<code>-a</code>输入下表提供的機械碼和匯編語言</p>
<table>
<thead>
<tr>
<th style="text-align:center">機械碼</th>
<th style="text-align:center">所對應的匯編指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">b8 20 4e</td>
<td style="text-align:center">mov ax,4E20H</td>
</tr>
<tr>
<td style="text-align:center">05 16 14</td>
<td style="text-align:center">add ax,1416H</td>
</tr>
<tr>
<td style="text-align:center">bb 00 20</td>
<td style="text-align:center">mov bx,2000H</td>
</tr>
<tr>
<td style="text-align:center">01 d8</td>
<td style="text-align:center">add ax,bx</td>
</tr>
<tr>
<td style="text-align:center">89 c3</td>
<td style="text-align:center">mov bx,ax</td>
</tr>
<tr>
<td style="text-align:center">01 d8</td>
<td style="text-align:center">add ax,bx</td>
</tr>
<tr>
<td style="text-align:center">b8 1a 00</td>
<td style="text-align:center">mov ax,001AH</td>
</tr>
<tr>
<td style="text-align:center">bb 26 00</td>
<td style="text-align:center">mov bx,0026H</td>
</tr>
<tr>
<td style="text-align:center">00 d8</td>
<td style="text-align:center">add al,bl</td>
</tr>
<tr>
<td style="text-align:center">00 dc</td>
<td style="text-align:center">add ah,bl</td>
</tr>
<tr>
<td style="text-align:center">00 c7</td>
<td style="text-align:center">add bh,al</td>
</tr>
<tr>
<td style="text-align:center">b4 00</td>
<td style="text-align:center">mov ah,0</td>
</tr>
<tr>
<td style="text-align:center">00 d8</td>
<td style="text-align:center">add al,bl</td>
</tr>
<tr>
<td style="text-align:center">04 9c</td>
<td style="text-align:center">add al,9CH</td>
</tr>
</tbody>
</table>
<p><code>-e</code>指令的執行</p>
<p>再用<code>-t</code>，觀看其執行的狀況。</p>
<p><code>-a</code>指令的執行<br><img src="/images/debugmode/work03.JPG" alt=""></p>
<p>再用<code>-t</code>，觀看其執行的狀況。<br><img src="/images/debugmode/work04.JPG" alt=""><br><img src="/images/debugmode/work05.JPG" alt=""><br><img src="/images/debugmode/work06.JPG" alt=""><br><img src="/images/debugmode/work07.JPG" alt=""></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="http://thestarman.pcministry.com/asm/debug/debug.htm#9x" target="_blank" rel="noopener">http://thestarman.pcministry.com/asm/debug/debug.htm#9x</a></p>
]]></content>
      
        <categories>
            
            <category> Assembly language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Assembly Language </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hackmd.io使用指南]]></title>
      <url>/2017/11/18/hackmdio/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><i class="fa fa-file-text"></i> <strong>HackMD</strong> 是一個跨平台的Markdown即時協作筆記。所以你可以和朋友們在<strong>電腦、平板甚至是手機</strong>上同一時間製作你們的筆記。最方便的就是，你可以在首頁透過<strong>Facebook、Twitter、GitHub、Dropbox以及Google</strong>來登入<strong>HackMD</strong>。<a id="more"></a></p>
<h1 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h1><p>你可以輕易的複製文件的網址來分享此文件。</p>
<h1 id="權限設置"><a href="#權限設置" class="headerlink" title="權限設置"></a>權限設置</h1><p>在頁面的右上方有個小按鈕，你可以透過以下選項來更改權限：<br><i class="fa fa-leaf fa-fw"></i> 隨意：任何人都可以編輯以及瀏覽這份筆記。<br><i class="fa fa-shield fa-fw"></i>可編輯：已經登入的使用者才可以編輯這個筆記。（客人可以瀏覽）<br><i class="fa fa-id-card" fa-fw=""></i> 限制：已經登入的使用者可以編輯這個筆記。（禁止客人瀏覽）<br><i class="fa fa-lock fa-fw"></i> 鎖定：只有擁有者可以更改這份筆記。（客人可瀏覽）<br><i class="fa fa-umbrella fa-fw"></i> 保護：只有擁有者可以更改這份筆記。（禁止客人瀏覽）<br><i class="fa fa-hand-stop-o fa-fw"></i> 私有：只有擁有者可以更改與檢視這份筆記。</p>
<p><strong>只有筆記的擁有者可以更改權限。</strong></p>
<h1 id="模式轉換"><a href="#模式轉換" class="headerlink" title="模式轉換"></a>模式轉換</h1><p><strong>電腦 &amp; 平板</strong><br><i class="fa fa-eye fa-fw"></i> 檢視：只看到結果。<br><i class="fa fa-columns fa-fw"></i> 同時：同時看到兩邊。<br><i class="fa fa-edit fa-fw"></i> 編輯：只看到編輯器。</p>
<p><strong>手機</strong><br><i class="fa fa-toggle-on fa-fw"></i> 檢視：只看到結果。<br><i class="fa fa-toggle-off fa-fw"></i> 編輯：只看到編輯器。</p>
<h1 id="匯入和匯出"><a href="#匯入和匯出" class="headerlink" title="匯入和匯出"></a>匯入和匯出</h1><p>你可以在點擊<strong>Menu</strong>功能後，從 <strong>Dropbox</strong> <i class="fa fa-dropbox">、</i><strong>Google Drive</strong> <i class="fa fa-cloud-download"></i>、<strong>Gitgist</strong><i class="fa fa-github"></i> 匯入 <strong>.md</strong> <i class="fa fa-file-text"></i> 或是從<strong>剪貼簿Clipboard</strong> <i class="fa fa-clipboard"></i> 匯入。至於匯出也一樣如此。</p>
<h1 id="下載格式"><a href="#下載格式" class="headerlink" title="下載格式"></a>下載格式</h1><p>你可以將此Markdown文件在下載的時候轉換成以下格式：</p>
<ul>
<li>MarkDown</li>
<li>HTML</li>
<li>RAW HTML</li>
<li>ODF(beta)</li>
</ul>
<h1 id="上載圖片"><a href="#上載圖片" class="headerlink" title="上載圖片"></a>上載圖片</h1><p>上傳圖片<br>只要按下這個按鈕 <i class="fa fa-camera"></i><br>或是 <strong>拖放</strong> 圖片到編輯器，甚至 <strong>貼上</strong> 圖片也可以喔！<br>這會自動上傳圖片至 <strong><a href="http://imgur.com" target="_blank" rel="noopener">imgur</a></strong>，啥都不必煩惱了 🤖<br><img src="https://i.imgur.com/9cgQVqD.png" alt=""></p>
<h1 id="Emoji功能"><a href="#Emoji功能" class="headerlink" title="Emoji功能"></a>Emoji功能</h1><p>你可以在<strong>HackMD</strong>自由的使用表情符號<br>😭 😓 😪 😴 🙄 🤔 😍 😘 😗 😁 😆 😅 😂</p>
<blockquote>
<p>完整的表情符號列表在<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener">這裡</a></p>
</blockquote>
<h1 id="簡報模式-amp-書本模式"><a href="#簡報模式-amp-書本模式" class="headerlink" title="簡報模式&amp;書本模式"></a>簡報模式&amp;書本模式</h1><p>除此之外，<strong>HackMD</strong>還具備了讓你將MarkDown文件變成<strong>簡報模式</strong>和<strong>書本模式</strong>的功能。那樣你就可以直接用此來進行你的Presentation或者輕鬆的向看電子書那樣，閱讀你的MarkDown文件。</p>
<h1 id="目錄功能"><a href="#目錄功能" class="headerlink" title="目錄功能"></a>目錄功能</h1><p>在<strong>同時模式</strong>裡面，你可以再右下角找到目錄的小按鈕 <i class="fa fa-bars"></i>。當你按下之後，他會顯示出你當前所在的區塊，以及完整的目錄表。若想跳轉到其他區塊，你只需要點擊目錄裡面列出的章節題目就可。</p>
<h1 id="Sublime-Text快捷鍵"><a href="#Sublime-Text快捷鍵" class="headerlink" title="Sublime Text快捷鍵"></a>Sublime Text快捷鍵</h1><blockquote>
<p>可以在這<a href="https://codemirror.net/demo/sublime.html" target="_blank" rel="noopener">網站</a>找到一些快捷鍵來提升你的文件處理的效率。</p>
</blockquote>
<h1 id="Markdown自動完成功能"><a href="#Markdown自動完成功能" class="headerlink" title="Markdown自動完成功能"></a>Markdown自動完成功能</h1><p>提供完整的 Markdown 自動完成與提示。</p>
<ul>
<li>表情符號：輸入<code>:</code></li>
<li>程式碼區塊：輸入以下格式<br><img src="/images/dotdot.PNG" alt=""></li>
<li>標頭：輸入<code>#</code></li>
<li>參考：輸入<code>[]</code></li>
<li>外部：輸入<code>{}</code></li>
<li>圖片：輸入<code>!</code></li>
</ul>
<h1 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</div><div class="line">alert(s);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$initHighlight</span>(<span class="params">block, cls</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (cls.search(<span class="regexp">/\bno\-highlight\b/</span>) != <span class="number">-1</span>)</div><div class="line">      <span class="keyword">return</span> process(block, <span class="literal">true</span>, <span class="number">0x0F</span>) + </div><div class="line">             <span class="string">' class=""'</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="comment">/* handle exception */</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> / <span class="number">2</span>; i &lt; classes.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (checkCondition(classes[i]) === <span class="literal">undefined</span>)</div><div class="line">      <span class="keyword">return</span> <span class="regexp">/\d+[\s/]/g</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果想要<strong>行號</strong>，在表明程式語言之後輸入 <code>=</code>以及想處於的行號碼<code>=101</code>。<br>您也可以指定開始行號，如下所示，行號從101開始。</p>
</blockquote>
<p><img src="/images/hackmd/101code.jpg" alt=""></p>
<p>這就是顯示後的樣子。<br><img src="/images/hackmd/101result.JPG" alt=""></p>
<blockquote>
<p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code>。</p>
</blockquote>
<p><img src="/images/hackmd/continue.JPG" alt=""></p>
<p>本人用Python Code的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> sympy.solvers <span class="keyword">import</span> solve</div><div class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Symbol</div><div class="line"></div><div class="line"><span class="comment"># This comes from https://github.com/sourcekris/RsaCtfTool/blob/master/wiener_attack.py</span></div><div class="line"><span class="comment"># He made it, and I am incorporating it into my Factorizer. </span></div><div class="line"></div><div class="line"><span class="comment"># A reimplementation of pablocelayes rsa-wiener-attack for this purpose</span></div><div class="line"><span class="comment"># https://github.com/pablocelayes/rsa-wiener-attack/</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WienerAttack</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rational_to_contfrac</span> <span class="params">(self, x, y)</span>:</span></div><div class="line">        a = x//y</div><div class="line">        <span class="keyword">if</span> a * y == x:</div><div class="line">            <span class="keyword">return</span> [a]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pquotients = self.rational_to_contfrac(y, x - a * y)</div><div class="line">            pquotients.insert(<span class="number">0</span>, a)</div><div class="line">            <span class="keyword">return</span> pquotients</div></pre></td></tr></table></figure></p>
<h1 id="標籤"><a href="#標籤" class="headerlink" title="標籤"></a>標籤</h1><p>如同以下方式來使用標籤，它們會顯示在您的<strong>歷史紀錄</strong>。<br>要寫tags: + <code>筆記</code> <code>教程</code> <code>作業</code></p>
<p>顯示結果如下<br><img src="/images/hackmd/tagthis.JPG" alt=""></p>
<h1 id="YAML-metadata"><a href="#YAML-metadata" class="headerlink" title="YAML metadata"></a><a href="https://hackmd.io/yaml-metadata" target="_blank" rel="noopener">YAML metadata</a></h1><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結。</p>
<ul>
<li>robots: 設定網路機器人 meta。</li>
<li>lang: 設定瀏覽器顯示語言。</li>
<li>dir: 設定文字方向。</li>
<li>breaks: 設定是否使用分行。</li>
<li>mathjax: 設定是否使用 mathjax。</li>
</ul>
<h1 id="清單功能"><a href="#清單功能" class="headerlink" title="清單功能"></a>清單功能</h1><ul>
<li style="list-style: none"><input type="checkbox"> 待辦<ul>
<li style="list-style: none"><input type="checkbox" checked> 打東東</li>
<li style="list-style: none"><input type="checkbox" checked> 喝珍珠奶茶</li>
<li style="list-style: none"><input type="checkbox"> 玩CTF</li>
</ul>
</li>
</ul>
<h1 id="引用區塊標籤"><a href="#引用區塊標籤" class="headerlink" title="引用區塊標籤"></a>引用區塊標籤</h1><blockquote>
<p>你可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別。<br>[name=Milo] [time=Sun, October 22, 2017 9:59 PM] [color=#907bf7]</p>
<blockquote>
<p>也支援巢狀引用區塊喔！<br>[name=Milo] [time=Sun, October 22, 2017 10:00 PM] [color=red]</p>
</blockquote>
</blockquote>
<p>顯示結果如下<br><img src="/images/hackmd/show.JPG" alt=""></p>
<h1 id="視頻"><a href="#視頻" class="headerlink" title="視頻"></a>視頻</h1><ul>
<li><p>Youtube<br>用這格式輸入可公開Youtube視頻鏈接的代號<br>例子：輸入<code>{}</code>,然後在裡面加上<code>%youtube CJ9xqHAdFjM %</code></p>
<div class="video-container"><iframe src="//www.youtube.com/embed/CJ9xqHAdFjM" frameborder="0" allowfullscreen></iframe></div>
</li>
<li><p>Vimeo<br>用這格式輸入可公開Vimeo視頻鏈接的代號<br>例子：輸入<code>{}</code>,然後在裡面加上<code>%vimeo 230308008 %</code></p>
<div class="video-container"><iframe src="//player.vimeo.com/video/230308008" frameborder="0" allowfullscreen></iframe></div>
</li>
</ul>
<h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><p>用這格式輸入可公開Gist<br>例子：輸入<code>{}</code>，然後在裡面加上例子：輸入<code>{}</code>,然後在裡面加上<code>%gist schacon/4277 %</code><br><script src="//gist.github.com/schacon/4277.js"></script></p>
<h1 id="SlideShare"><a href="#SlideShare" class="headerlink" title="SlideShare"></a>SlideShare</h1><p>輸入<code>{}</code>，括號裡面再輸入<code>%slideshare HacksInTaiwan/ctf-56046764 %</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/slide.JPG" alt=""></p>
<h1 id="Speakerdeck"><a href="#Speakerdeck" class="headerlink" title="Speakerdeck"></a>Speakerdeck</h1><p>輸入<code>{}</code>，括號裡面再輸入<code>%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/speaker.JPG" alt=""></p>
<h1 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h1><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入。</strong><br>輸入<code>{}</code>，括號裡面再輸入<code>%pdf https://beginners.re/RE4B-EN.pdf %</code><br><img src="/images/hackmd/readpdf.JPG" alt=""></p>
<h1 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h1><p>你可以使用 <strong>MathJax</strong> 語法來產生<em>LaTeX</em> 數學表達式，如同 <a href="http://math.stackexchange.com/" target="_blank" rel="noopener">math.stackexchange.com</a>：</p>
<p>The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ is via the Euler integral</p>
<p>$$<br>x = {-b \pm \sqrt{b^2-4ac} \over 2a}.<br>$$</p>
<p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.<br>$$</p>
<blockquote>
<p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">請至這裡</a></p>
</blockquote>
<h1 id="UML-圖表"><a href="#UML-圖表" class="headerlink" title="UML 圖表"></a>UML 圖表</h1><h2 id="循序圖"><a href="#循序圖" class="headerlink" title="循序圖"></a>循序圖</h2><p>您可以像是以下使用循序圖：<br>在程式碼區域輸入<code>sequence</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/sequence.JPG" alt=""></p>
<blockquote>
<p>更多關於 <strong>循序圖</strong> 語法 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">在這裡</a>.</p>
</blockquote>
<h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><p>您可以像是以下使用流程圖：<br>在程式碼區域輸入<code>flow</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/flowchat.JPG" alt=""></p>
<blockquote>
<p>更多關於 <strong>流程圖</strong> 語法 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">在這裡</a>.</p>
</blockquote>
<h2 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h2><p>在程式碼區域輸入<code>graphiz</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/graphiz.JPG" alt=""></p>
<blockquote>
<p>更多關於 <strong>Graphviz</strong> 語法 <a href="http://www.tonyballantyne.com/graphs.html" target="_blank" rel="noopener">在這裡</a></p>
</blockquote>
<h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><p>在程式碼區域輸入<code>mermaid</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/mermaid.JPG" alt=""></p>
<blockquote>
<p>更多關於 <strong>Mermaid</strong> 語法 <a href="http://knsv.github.io/mermaid" target="_blank" rel="noopener">在這裡</a></p>
</blockquote>
<h1 id="警告區塊"><a href="#警告區塊" class="headerlink" title="警告區塊"></a>警告區塊</h1><p>輸入<br><code>:::success
成功板塊
:::</code><br><code>:::info
公佈信息
:::</code><br><code>:::warning
注意一下
:::</code><br><code>:::danger
危險地帶
:::</code><br>你的Hackmd.io就會有以下的顯示<br><img src="/images/hackmd/warning.JPG" alt=""></p>
<h1 id="排版功能"><a href="#排版功能" class="headerlink" title="排版功能"></a>排版功能</h1><h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># h1 標頭</div><div class="line">## h2 標頭</div><div class="line">### h3 標頭</div><div class="line">#### h4 標頭</div><div class="line">##### h5 標頭</div><div class="line">###### h6 標頭</div></pre></td></tr></table></figure>
<h2 id="水平分隔線"><a href="#水平分隔線" class="headerlink" title="水平分隔線"></a>水平分隔線</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">___</span></div><div class="line">或者</div><div class="line"><span class="emphasis">***</span></div></pre></td></tr></table></figure>
<h2 id="字形替換"><a href="#字形替換" class="headerlink" title="字形替換"></a>字形替換</h2><p>輸入<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">c</span>) (<span class="name">C</span>) (<span class="name">r</span>) (<span class="name">R</span>) (<span class="name">tm</span>) (<span class="name">TM</span>) (<span class="name">p</span>) (<span class="name">P</span>) +-</div></pre></td></tr></table></figure></p>
<p>會顯示這樣<br><img src="/images/hackmd/mark.JPG" alt=""></p>
<p>“Smartypants, 雙引號”</p>
<p>‘Smartypants, 單引號’</p>
<h2 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h2><p>輸入<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">**這是粗體文字**</div><div class="line"></div><div class="line"><span class="symbol">__</span>這是粗體文字<span class="symbol">__</span></div><div class="line"></div><div class="line">*這是斜體文字*</div><div class="line"></div><div class="line"><span class="symbol">_</span>這是斜體文字<span class="symbol">_</span></div><div class="line"></div><div class="line">~~這是刪除文字~~</div><div class="line"></div><div class="line">上標： <span class="number">19</span>^th^</div><div class="line"></div><div class="line">下標： H~<span class="number">2</span>~O</div><div class="line"></div><div class="line">++這是底線文字++</div><div class="line"></div><div class="line">==這是標記文字==</div></pre></td></tr></table></figure></p>
<p>會顯示這樣<br><img src="/images/hackmd/emp.JPG" alt=""></p>
<h2 id="引用區塊"><a href="#引用區塊" class="headerlink" title="引用區塊"></a>引用區塊</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> 引用區塊也可以是巢狀的喔...</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt; ...可以多層次的使用...</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> &gt; &gt; ...或是用空白隔開</span></div></pre></td></tr></table></figure>
<blockquote>
<p>引用區塊也可以是巢狀的喔…</p>
<blockquote>
<p>…可以多層次的使用…</p>
<blockquote>
<p>…或是用空白隔開 </p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ 在行開頭使用 `+` `-` 或是 `*` 來建立清單</div><div class="line">+ 空兩個空白就可以產生子清單</div><div class="line">  - 當清單標記使用的字元不同，會強制建立新的清單</div><div class="line">    * Ac tristique libero volutpat at</div><div class="line">    + Facilisis <span class="keyword">in</span> pretium nisl aliquet</div><div class="line">    - Nulla volutpat aliquam velit</div><div class="line">+ 非常簡單！</div></pre></td></tr></table></figure>
<ul>
<li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li>
<li>空兩個空白就可以產生子清單<ul>
<li>當清單標記使用的字元不同，會強制建立新的清單<ul>
<li>Ac tristique libero volutpat at</li>
</ul>
<ul>
<li>Facilisis in pretium nisl aliquet</li>
</ul>
<ul>
<li>Nulla volutpat aliquam velit</li>
</ul>
</li>
</ul>
</li>
<li>非常簡單！</li>
</ul>
<h2 id="編號"><a href="#編號" class="headerlink" title="編號"></a>編號</h2><ol>
<li>Lorem ipsum dolor sit amet</li>
<li>Consectetur adipiscing elit</li>
<li><p>Integer molestie lorem at massa</p>
</li>
<li><p>您可以逐次增加項目數字…</p>
</li>
<li>…或是全部都使用 <code>1.</code></li>
<li>feafw</li>
<li>332</li>
<li>242</li>
<li>2552</li>
<li>e2</li>
</ol>
<p>從其他範圍開始編號清單</p>
<ol>
<li>foo</li>
<li>bar</li>
</ol>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> 選項 </span>|<span class="string"> 描述 </span>|</div><div class="line">|<span class="string"> ------ </span>|<span class="string"> ----------- </span>|</div><div class="line">|<span class="string"> data   </span>|<span class="string"> path to data files to supply the data that will be passed into templates. </span>|</div><div class="line">|<span class="string"> engine </span>|<span class="string"> engine to be used for processing templates. Handlebars is the default. </span>|</div><div class="line">|<span class="string"> ext    </span>|<span class="string"> extension to be used for dest files. </span>|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>選項</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="向右對齊"><a href="#向右對齊" class="headerlink" title="向右對齊"></a>向右對齊</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> 選項 </span>|<span class="string"> 描述 </span>|</div><div class="line">|<span class="string"> ------:</span>|<span class="string"> -----------:</span>|</div><div class="line">|<span class="string"> data   </span>|<span class="string"> path to data files to supply the data that will be passed into templates. </span>|</div><div class="line">|<span class="string"> engine </span>|<span class="string"> engine to be used for processing templates. Handlebars is the default. </span>|</div><div class="line">|<span class="string"> ext    </span>|<span class="string"> extension to be used for dest files. </span>|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:right">選項</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="向左對齊"><a href="#向左對齊" class="headerlink" title="向左對齊"></a>向左對齊</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 選項 | 描述 |</div><div class="line">|<span class="symbol">:------</span> |<span class="symbol">:-----------</span> |</div><div class="line">| data   | path to data files to supply the data that will be passed into templates. |</div><div class="line">| engine | engine to be used <span class="keyword">for</span> processing templates. Handlebars is the default. |</div><div class="line">| ext    | extension to be used <span class="keyword">for</span> dest files. |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">選項</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">data</td>
<td style="text-align:left">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:left">engine</td>
<td style="text-align:left">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:left">ext</td>
<td style="text-align:left">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="置中對齊"><a href="#置中對齊" class="headerlink" title="置中對齊"></a>置中對齊</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="params">| 選項 |</span> 描述 <span class="params">|</span></div><div class="line"><span class="params">|</span><span class="symbol">:------</span><span class="symbol">:|</span><span class="symbol">:-----------</span><span class="symbol">:|</span></div><div class="line"><span class="params">| data   |</span> path to data files to supply the data that will be passed into templates. <span class="params">|</span></div><div class="line"><span class="params">|</span> engine <span class="params">| engine to be used <span class="keyword">for</span> processing templates. Handlebars is the default. |</span></div><div class="line"><span class="params">| ext    |</span> extension to be used <span class="keyword">for</span> dest files. <span class="params">|</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">選項</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">data</td>
<td style="text-align:center">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:center">engine</td>
<td style="text-align:center">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:center">ext</td>
<td style="text-align:center">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h1 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h1><p><a href="http://seesaawiki.jp/forgetlostspace/" target="_blank" rel="noopener">連結文字</a><br><a href="https://rupigcute.wixsite.com/quantiumtown" title="看到我這個可愛的標題嗎🐙" target="_blank" rel="noopener">加上標題的連結文字</a></p>
<h1 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h1><p><img src="/images/hackmd/picgitcat.JPG" alt=""></p>
<p>顯示出來的結果(只放部分圖片)<br><img src="/images/hackmd/xianshi.JPG" alt=""></p>
<h1 id="註腳"><a href="#註腳" class="headerlink" title="註腳"></a>註腳</h1><p><img src="/images/hackmd/leg.JPG" alt=""><br>顯示出來的結果<br><img src="/images/hackmd/zhujiaofinal.JPG" alt=""></p>
<p>你的Markdown文字最後也會出現你之前寫下的Footer。<br><img src="/images/hackmd/footer.JPG" alt=""></p>
<h1 id="定義清單"><a href="#定義清單" class="headerlink" title="定義清單"></a>定義清單</h1><p><img src="/images/hackmd/def.JPG" alt=""><br>使用後的結果如下<br><img src="/images/hackmd/def2.JPG" alt=""></p>
<h1 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h1><p>這是 HTML 的縮寫範例<br>它會轉換 “HTML”，但是縮寫旁邊其他的部分，例如：”xxxHTMLyyy”，不受影響<br><img src="/images/hackmd/ppp.JPG" alt=""><br>最後顯示成這個樣子<br><img src="/images/hackmd/short.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Tools </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[可愛又好玩的語音聊天平台-Discord]]></title>
      <url>/2017/11/16/discordpromote/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-Discord的魅力在哪裡？"><a href="#0x01-Discord的魅力在哪裡？" class="headerlink" title="0x01 Discord的魅力在哪裡？"></a>0x01 Discord的魅力在哪裡？</h1><p>Discord是一個完全免費，且具備超多強大功能的語音通訊平台。而且，還有漂亮又簡單的界面，讓你輕鬆的建立你的文字和語音頻道。不僅如此，Discord不像QQ那樣會自帶廣告，所以你可以少掉被廣告洗腦的煩惱。</p>
<p>另外，你也可以應用各式各樣的機械人Bot來加強你頻道內的功能。例如：像電台那樣自動播放歌曲，用指令來投骰子，像玩RPG game升級系統那樣通過聊天中獲取經驗值，進行投票活動和個人備忘錄等等。此外，你還可以在不同頻道/子頻道擁有多過一個的暱稱。再來，只要你喜歡你還可以自己設定可愛的自定義身份呢。</p>
<p>最重要的一點，Discord的支援十分全面，你可以在Windows，Mac OS，Linux，Android以及Ios上使用Discord來。當你在直播遊戲時，你也可以用Discord和他人進行談話，這是因為你可以用不同平台的賬號如：Youtube、Twitch、Steam、Skype等等來連接你的Discord Server。。</p>
<h1 id="0x02-不需要再為語音而付費"><a href="#0x02-不需要再為語音而付費" class="headerlink" title="0x02 不需要再為語音而付費"></a>0x02 不需要再為語音而付費</h1><h1 id="0x03-不受打擾的享受線上遊戲"><a href="#0x03-不受打擾的享受線上遊戲" class="headerlink" title="0x03 不受打擾的享受線上遊戲"></a>0x03 不受打擾的享受線上遊戲</h1><h1 id="0x04-隨時和你好友保持連線"><a href="#0x04-隨時和你好友保持連線" class="headerlink" title="0x04 隨時和你好友保持連線"></a>0x04 隨時和你好友保持連線</h1><h1 id="0x05-擁有現代化的內容顯示界面"><a href="#0x05-擁有現代化的內容顯示界面" class="headerlink" title="0x05 擁有現代化的內容顯示界面"></a>0x05 擁有現代化的內容顯示界面</h1><h1 id="0x06-語音傳送不會影響你進行中游戲的速度"><a href="#0x06-語音傳送不會影響你進行中游戲的速度" class="headerlink" title="0x06 語音傳送不會影響你進行中游戲的速度"></a>0x06 語音傳送不會影響你進行中游戲的速度</h1><h1 id="0x07-超簡單的安裝過程"><a href="#0x07-超簡單的安裝過程" class="headerlink" title="0x07 超簡單的安裝過程"></a>0x07 超簡單的安裝過程</h1><h1 id="0x08-強大的伺服器管理功能"><a href="#0x08-強大的伺服器管理功能" class="headerlink" title="0x08 強大的伺服器管理功能"></a>0x08 強大的伺服器管理功能</h1><h1 id="0x09-維持語音質量"><a href="#0x09-維持語音質量" class="headerlink" title="0x09 維持語音質量"></a>0x09 維持語音質量</h1><h1 id="0x10-安全加友機制"><a href="#0x10-安全加友機制" class="headerlink" title="0x10 安全加友機制"></a>0x10 安全加友機制</h1><h1 id="0x11-不必退出遊戲來處理語音頻道"><a href="#0x11-不必退出遊戲來處理語音頻道" class="headerlink" title="0x11 不必退出遊戲來處理語音頻道"></a>0x11 不必退出遊戲來處理語音頻道</h1><p>更完整的功能和教學，請記得留守我下一篇的文章。</p>
<p>下一篇預告：如何成為Discord達人</p>
]]></content>
      
        <categories>
            
            <category> Discord </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Discord </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[資源搜索技巧和索引]]></title>
      <url>/2017/11/12/searchengine/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-Google高級搜尋法"><a href="#0x01-Google高級搜尋法" class="headerlink" title="0x01 Google高級搜尋法"></a>0x01 Google高級搜尋法</h1><blockquote>
<p>雙引號” “來做精準搜尋</p>
</blockquote>
<p>搜索结果裡面的網站內容必須出現完全一樣的搜索關鍵詞，因此當你想尋找精準的內容時，你可以在在搜索關鍵詞上加上雙引號。<br>例子： <code>&quot;量子能量塔&quot;</code></p>
<blockquote>
<p>用<code>-</code>來排除不必要的搜尋結果</p>
</blockquote>
<p>當你想搜索關鍵詞並且排除包含某個字詞的結果你可以在該字詞前面加上<code>-</code>來移除這系列的搜索結果。</p>
<p>例子：<code>kotlin -kotlinlang.org</code></p>
<p>這表示你尋找和kotlin有關的資料時，移除了所有kotlinlang.org的搜索結果。</p>
<a id="more"></a>
<blockquote>
<p>用<code>+</code>來確保某個字詞出現在搜尋結果內</p>
</blockquote>
<p>要在搜索結果的網站內包含一些指定的文字的話，<code>+</code>這個符號可以做到這個功能。<br>例子：<code>+</code></p>
<ul>
<li><a href="http://www.hackcollege.com/blog/2011/11/23/infographic-get-more-out-of-google.html" target="_blank" rel="noopener">Get More out of Google</a></li>
</ul>
<h1 id="0x02-Google-Custom-Search"><a href="#0x02-Google-Custom-Search" class="headerlink" title="0x02 Google Custom Search"></a>0x02 Google Custom Search</h1><h1 id="0x03-其他實際搜尋引擎-amp-導航網站"><a href="#0x03-其他實際搜尋引擎-amp-導航網站" class="headerlink" title="0x03 其他實際搜尋引擎&amp;導航網站"></a>0x03 其他實際搜尋引擎&amp;導航網站</h1><h2 id="綜合"><a href="#綜合" class="headerlink" title="綜合"></a>綜合</h2><ul>
<li><a href="https://btdb.to" target="_blank" rel="noopener">Bit Torrent Database</a></li>
<li><a href="https://thepiratebay.org/blog" target="_blank" rel="noopener">海盜灣ORG</a>   </li>
<li><a href="http://search.chongbuluo.com" target="_blank" rel="noopener">蟲部落快搜</a></li>
<li><a href="https://unblocked.pro" target="_blank" rel="noopener">Unblocked Pro</a></li>
<li><a href="https://www.aiosearch.com" target="_blank" rel="noopener">AIO Search for Torrent</a></li>
<li><a href="http://p2psearcher.org" target="_blank" rel="noopener">P2P Searcher</a></li>
<li><a href="http://filesearch.synthasite.com" target="_blank" rel="noopener">File Search Synthasite</a></li>
<li><a href="https://1337x.st" target="_blank" rel="noopener">1337x</a></li>
<li><a href="http://www.torrentdownloads.net/" target="_blank" rel="noopener">Torrent Downloads Net</a></li>
<li><a href="https://www.tokyotosho.info" target="_blank" rel="noopener">東京 図書館</a></li>
<li><a href="https://yourbittorrent.com" target="_blank" rel="noopener">Your Bittorrent</a></li>
<li><a href="https://acg.rip" target="_blank" rel="noopener">ACG.RIP</a></li>
<li><a href="https://goo.gl/2kz58H" target="_blank" rel="noopener">Google 自定義</a></li>
<li><a href="https://zhongziso.com" target="_blank" rel="noopener">種子搜</a></li>
<li><a href="https://btku.org" target="_blank" rel="noopener">BTKU</a></li>
<li><a href="http://rarbg.com/torrents.php" target="_blank" rel="noopener">RARBG com</a></li>
<li><a href="https://rarbg.is/torrents.php" target="_blank" rel="noopener">RARBS is</a></li>
<li><a href="http://www.diaosiso.com" target="_blank" rel="noopener">屌絲搜索</a></li>
<li><a href="http://www.diaosisou.org" target="_blank" rel="noopener">屌絲搜-最懂屌絲搜DHT搜索搜索引擎</a></li>
<li><a href="https://www.ciliba.org" target="_blank" rel="noopener">磁力吧</a></li>
<li><a href="http://oabt001.com" target="_blank" rel="noopener">CiLi001</a></li>
<li><a href="https://extratorrent.ag" target="_blank" rel="noopener">Extra Torrent</a></li>
<li><a href="https://www.bthub.me" target="_blank" rel="noopener">BTHUB</a></li>
<li><a href="http://www.cilisoba.net" target="_blank" rel="noopener">磁力搜索-手撕包菜</a></li>
<li><a href="https://torrents.me" target="_blank" rel="noopener">Torrents.me</a></li>
<li><a href="https://zooqle.com" target="_blank" rel="noopener">Zooqle</a></li>
<li><a href="https://www.picktorrent.com" target="_blank" rel="noopener">Pick Torrent</a></li>
<li><a href="http://www.sumotorrent.sx" target="_blank" rel="noopener">Sumo Torrent</a></li>
<li><a href="http://torrentz.me" target="_blank" rel="noopener">Torrent TZ</a></li>
<li><a href="http://thepiratebay.ee" target="_blank" rel="noopener">Piratebay EE</a></li>
<li><a href="https://www.seedpeer.eu" target="_blank" rel="noopener">Seedpeer</a></li>
<li><a href="http://www.torrentbit.net" target="_blank" rel="noopener">Torrent Bit</a></li>
<li><a href="http://toreye.com" target="_blank" rel="noopener">Tor Eye</a></li>
<li><a href="http://www.zhangyusousuo.com" target="_blank" rel="noopener">章魚搜索</a></li>
<li><a href="http://www.sobt8.com" target="_blank" rel="noopener">SOBT</a></li>
<li><a href="http://www.torrentroom.com" target="_blank" rel="noopener">Torrent Room</a></li>
<li><a href="https://www.ziyuanmao.com/#/home" target="_blank" rel="noopener">資源貓</a></li>
<li><a href="http://torrentba.biz" target="_blank" rel="noopener">Torrent Ba</a></li>
<li><a href="https://tw.torrentkitty.tv" target="_blank" rel="noopener">Torrent Kitty 將種子轉成磁力</a></li>
<li><a href="http://filelisting.com" target="_blank" rel="noopener">File Listing</a></li>
<li><a href="https://www.zhaobt.net" target="_blank" rel="noopener">種子搜索神器</a></li>
<li><a href="btsalon.com">BT Salon</a></li>
<li><a href="https://www.torrentfunk.com" target="_blank" rel="noopener">Torrent Funk</a></li>
<li><a href="http://filedron.com" target="_blank" rel="noopener">File Dron</a></li>
<li><a href="http://www.divxtotal2.net" target="_blank" rel="noopener">divxtotal2</a></li>
<li><a href="https://www.demonoid.pw/?ntps=5&amp;g=XCEE316" target="_blank" rel="noopener">Demonoid</a></li>
<li><a href="http://www.btbadboy.com" target="_blank" rel="noopener">BT壞男孩</a></li>
<li><a href="https://monova.org" target="_blank" rel="noopener">Monova</a></li>
<li><a href="http://www.torrentdownloads.me" target="_blank" rel="noopener">Torrent Downloads ME</a></li>
<li><a href="http://www.btant.biz" target="_blank" rel="noopener">BT螞蟻</a></li>
<li><a href="http://www.btcherry.me" target="_blank" rel="noopener">BT櫻桃</a></li>
<li><a href="http://www.nima888.com" target="_blank" rel="noopener">尼玛搜</a></li>
<li><a href="http://cililian.me" target="_blank" rel="noopener">磁力链</a></li>
<li><a href="http://www.bttit.com" target="_blank" rel="noopener">BTKitty</a></li>
<li><a href="http://www.anzhuocili.com" target="_blank" rel="noopener">安卓磁力</a></li>
<li><a href="http://www.sby.kim" target="_blank" rel="noopener">搜播雲</a></li>
<li><a href="http://www.bthai.net" target="_blank" rel="noopener">BT海</a></li>
<li><a href="http://t.cn/RcPE7HI" target="_blank" rel="noopener">傲遊搜</a></li>
<li><a href="http://search.qinggl.com" target="_blank" rel="noopener">輕磁力</a></li>
<li><a href="http://www.cilihome.org" target="_blank" rel="noopener">磁力之家</a></li>
<li><a href="http://www.btkuai.cc" target="_blank" rel="noopener">BT快搜</a></li>
<li><a href="http://bittorrent.am" target="_blank" rel="noopener">bittorrent AM</a></li>
<li><a href="http://www.torrentheap.com" target="_blank" rel="noopener">Torrent Heap</a></li>
<li><a href="http://www.btmon.com/" target="_blank" rel="noopener">BT Monster</a></li>
<li><a href="http://torrentus.si" target="_blank" rel="noopener">Torrent US</a></li>
<li><a href="http://bytesland.com" target="_blank" rel="noopener">Bytes land</a></li>
<li><a href="http://btfinder.com" target="_blank" rel="noopener">BT Finder</a></li>
<li><a href="http://bthub.io" target="_blank" rel="noopener">BT HUB.io</a> </li>
<li><a href="http://www.bittorrent.am" target="_blank" rel="noopener">Bit Torrent AM 資源多請記得阻擋廣告^-^</a></li>
<li><a href="http://www.oabt.org" target="_blank" rel="noopener">球迷搜</a></li>
<li><a href="http://www.torrenthounds.com" target="_blank" rel="noopener">Torrent Hounds</a></li>
<li><a href="http://rutracker.org/forum/index.php" target="_blank" rel="noopener">Ru Tracker</a></li>
<li><a href="https://idope.se/" target="_blank" rel="noopener">idope</a></li>
</ul>
<h2 id="網盤"><a href="#網盤" class="headerlink" title="網盤"></a>網盤</h2><ul>
<li><a href="http://wpsoso.com/" target="_blank" rel="noopener">網盤搜索</a></li>
<li><a href="http://www.pansou.com" target="_blank" rel="noopener">PanSou盤搜</a></li>
<li><a href="http://www.panduoduo.net" target="_blank" rel="noopener">盘多多</a></li>
<li><a href="http://www.xilinjie.com" target="_blank" rel="noopener">西林街搜索</a></li>
<li><a href="http://www.huisou.me" target="_blank" rel="noopener">麦库搜索</a></li>
<li><a href="http://www.panc.cc" target="_blank" rel="noopener">胖次</a></li>
<li><a href="http://www.iwapan.com" target="_blank" rel="noopener">爱挖盘</a></li>
</ul>
<h2 id="電視劇-amp-電影"><a href="#電視劇-amp-電影" class="headerlink" title="電視劇&amp;電影"></a>電視劇&amp;電影</h2><ul>
<li><a href="http://http://dramacity.se" target="_blank" rel="noopener">Dramacity.se</a></li>
<li><a href="http://kissasian.ch/DramaList" target="_blank" rel="noopener">Kiss Asian</a></li>
<li><a href="http://videos.yizhansou.com" target="_blank" rel="noopener">一站搜搜</a></li>
<li><a href="http://www.dy2018.net" target="_blank" rel="noopener">電影天堂</a> </li>
<li><a href="http://www.zimuzu.tv" target="_blank" rel="noopener">字幕組TV</a></li>
<li><a href="http://www.piaohua.com" target="_blank" rel="noopener">飄花資源網</a></li>
<li><a href="http://www.6vdy.com" target="_blank" rel="noopener">66影视</a></li>
<li><a href="http://www.ffdy.cc" target="_blank" rel="noopener">放放電影</a></li>
<li><a href="http://www.cnscg.com" target="_blank" rel="noopener">聖城家園</a></li>
<li><a href="http://www.80s.tw" target="_blank" rel="noopener">80s手機電影</a></li>
<li><a href="http://gaoqing.fm" target="_blank" rel="noopener">高清電台</a></li>
<li><a href="http://assrt.net" target="_blank" rel="noopener">射手網(偽)</a></li>
<li><a href="http://www.syzimuzu.com/forum.php" target="_blank" rel="noopener">深影論壇</a></li>
<li><a href="http://www.99mp4.net/" target="_blank" rel="noopener">久久MP4</a></li>
</ul>
<h2 id="視頻"><a href="#視頻" class="headerlink" title="視頻"></a>視頻</h2><ul>
<li><a href="https://www.youtube.com" target="_blank" rel="noopener">Youtube</a></li>
<li><a href="https://www.fantasy.tv" target="_blank" rel="noopener">范特西視頻</a></li>
<li><a href="https://vimeo.com/home" target="_blank" rel="noopener">Vimeo</a></li>
<li><a href="http://www.dailymotion.com/us" target="_blank" rel="noopener">Dailymotion</a></li>
<li><a href="http://www.flvcd.com" target="_blank" rel="noopener">FLVCD</a></li>
<li><a href="https://www.bilibili.com" target="_blank" rel="noopener">嗶哩嗶哩</a></li>
<li><a href="http://www.halihali.tv/dongman/" target="_blank" rel="noopener">哈哩哈哩</a></li>
</ul>
<h2 id="動漫"><a href="#動漫" class="headerlink" title="動漫"></a>動漫</h2><ul>
<li><a href="http://myself-bbs.com/portal.php" target="_blank" rel="noopener">Myself</a></li>
<li><a href="http://2dgate.drama.cool" target="_blank" rel="noopener">2d-Gate</a></li>
<li><a href="http://www.kisssub.org" target="_blank" rel="noopener">爱恋動漫</a></li>
<li><a href="https://bangumi.moe" target="_blank" rel="noopener">Bangumi</a></li>
<li><a href="http://share.dmhy.org" target="_blank" rel="noopener">動漫資源花園網</a></li>
<li><a href="https://nyaa.si" target="_blank" rel="noopener">Nyaa</a></li>
<li><a href="https://ac.hishare.site/" target="_blank" rel="noopener">动漫风</a></li>
</ul>
<h2 id="美劇"><a href="#美劇" class="headerlink" title="美劇"></a>美劇</h2><ul>
<li><a href="http://www.allyingshi.com" target="_blank" rel="noopener">人人影視</a></li>
<li><a href="http://eztv.it/" target="_blank" rel="noopener">EXTV</a></li>
<li><a href="http://bbs.uubird.com/forum.php" target="_blank" rel="noopener">悠悠鸟字幕组</a></li>
</ul>
<h2 id="日劇"><a href="#日劇" class="headerlink" title="日劇"></a>日劇</h2><ul>
<li><a href="http://www.zhuixinfan.com/main.php" target="_blank" rel="noopener">追新番</a></li>
<li><a href="https://remylovedrama6.blogspot.my" target="_blank" rel="noopener">日劇新番部屋(2017年開始的劇都可以找的到)</a></li>
</ul>
<h2 id="韓劇"><a href="#韓劇" class="headerlink" title="韓劇"></a>韓劇</h2><ul>
<li><a href="https://www.viu.com/" target="_blank" rel="noopener">ViuTv</a></li>
</ul>
<h2 id="TRPG"><a href="#TRPG" class="headerlink" title="TRPG"></a>TRPG</h2><ul>
<li><a href="http://seesaawiki.jp/forgetlostspace/" target="_blank" rel="noopener">破碎的失落空間</a></li>
</ul>
<h2 id="軟件"><a href="#軟件" class="headerlink" title="軟件"></a>軟件</h2><ul>
<li><a href="http://www.iplaysoft.com" target="_blank" rel="noopener">異次元軟件</a></li>
</ul>
<h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><ul>
<li><a href="http://gen.lib.rus.ec" target="_blank" rel="noopener">Gen Lib Rus</a></li>
<li><a href="http://libgen.io/" target="_blank" rel="noopener">libgen</a></li>
<li><a href="http://booksc.org" target="_blank" rel="noopener">booksc</a></li>
<li><a href="http://www.sopdf.com" target="_blank" rel="noopener">soPDF</a></li>
<li><a href="https://www.jiumodiary.com" target="_blank" rel="noopener">鸠摩电子书搜索引擎</a></li>
<li><a href="https://shuge.org" target="_blank" rel="noopener">書格</a></li>
<li><a href="http://down.51cto.com" target="_blank" rel="noopener">51CTO:IT書籍類</a></li>
<li><a href="http://www.guoxue123.com/" target="_blank" rel="noopener">国学导航</a></li>
<li><a href="http://www.pdfzj.cn/" target="_blank" rel="noopener">PDF之家</a></li>
<li><a href="http://www.ifblue.net/" target="_blank" rel="noopener">若蓝格杂志网</a></li>
<li><a href="http://www.gqzzw.com/" target="_blank" rel="noopener">高清杂志网</a></li>
</ul>
<h2 id="論文"><a href="#論文" class="headerlink" title="論文"></a>論文</h2><ul>
<li><a href="https://scholar.google.com" target="_blank" rel="noopener">Google Scholar</a></li>
<li><a href="http://scholar.chongbuluo.com" target="_blank" rel="noopener">蟲部落學術搜索</a></li>
<li><a href="http://sci-hub.cc" target="_blank" rel="noopener">Sci hub cc</a></li>
<li><a href="http://sci-hub.bz" target="_blank" rel="noopener">Sci hub bz</a></li>
<li><a href="http://search.crossref.org" target="_blank" rel="noopener">Crossref</a></li>
<li><a href="http://gen.lib.rus.ec/scimag/" target="_blank" rel="noopener">ligben:Scimag</a></li>
<li><a href="http://airccj.org/csecfp/library/index.php" target="_blank" rel="noopener">Air CCJ ORG</a></li>
<li><a href="https://www.douban.com/note/276894826/?session=ed948d07" target="_blank" rel="noopener">国外博士论文下载网站</a></li>
</ul>
<h2 id="遊戲-amp-遊戲直播"><a href="#遊戲-amp-遊戲直播" class="headerlink" title="遊戲&amp;遊戲直播"></a>遊戲&amp;遊戲直播</h2><ul>
<li><a href="https://go.twitch.tv" target="_blank" rel="noopener">Twitch</a></li>
<li><a href="http://bbs.3dmgame.com/forum.php" target="_blank" rel="noopener">3dm</a></li>
<li><a href="http://www.ali213.net" target="_blank" rel="noopener">Ali123</a></li>
<li><a href="http://www.duowan.com" target="_blank" rel="noopener">duowan</a></li>
<li><a href="www.tgbus.com">電玩巴士</a></li>
<li><a href="http://www.otomedream.com" target="_blank" rel="noopener">翼夢舞城</a></li>
</ul>
<h2 id="旅遊"><a href="#旅遊" class="headerlink" title="旅遊"></a>旅遊</h2><ul>
<li><a href="http://www.mafengwo.cn" target="_blank" rel="noopener">蚂蜂窝: 旅游攻略,自由行,自助游攻略,旅游社交分享网站</a></li>
</ul>
<h2 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h2><p>待更新</p>
<h2 id="音樂"><a href="#音樂" class="headerlink" title="音樂"></a>音樂</h2><ul>
<li><a href="http://newalbumreleases.net" target="_blank" rel="noopener">New album release</a></li>
<li><a href="https://www.jamendo.com/start" target="_blank" rel="noopener">jamendo</a></li>
</ul>
<h2 id="源碼"><a href="#源碼" class="headerlink" title="源碼"></a>源碼</h2><ul>
<li><a href="http://opensearch.krugle.org/" target="_blank" rel="noopener">Krugle</a></li>
<li><a href="https://searchcode.com/" target="_blank" rel="noopener">SearchCode</a></li>
<li><a href="https://nerdydata.com/search" target="_blank" rel="noopener">NerdyData.com</a></li>
<li><a href="http://symbolhound.com/" target="_blank" rel="noopener">Symbol Hound</a></li>
<li><a href="http://merobase.com/" target="_blank" rel="noopener">Merobase</a></li>
<li><a href="http://down.admin5.com" target="_blank" rel="noopener">a5源碼</a></li>
<li><a href="http://www.oschina.net/project" target="_blank" rel="noopener">開源項目</a></li>
</ul>
<h1 id="電驢"><a href="#電驢" class="headerlink" title="電驢"></a>電驢</h1><ul>
<li><a href="http://tinyurl.com/3dahxw" target="_blank" rel="noopener">電驢資源搜索</a></li>
<li><a href="https://emulefans.com" target="_blank" rel="noopener">電驢Fans</a></li>
<li><a href="http://www.ed2000.com" target="_blank" rel="noopener">ED2000</a></li>
</ul>
<h1 id="0x04-Private-Tracker"><a href="#0x04-Private-Tracker" class="headerlink" title="0x04 Private Tracker"></a>0x04 Private Tracker</h1><ul>
<li><a href="https://opentrackers.org" target="_blank" rel="noopener">Open Trackers:Open List for register private tracker</a></li>
</ul>
<h1 id="0x05-導航網站"><a href="#0x05-導航網站" class="headerlink" title="0x05 導航網站"></a>0x05 導航網站</h1><ul>
<li><a href="http://lackar.com/aa/" target="_blank" rel="noopener">Anywhere Anything</a></li>
<li><a href="http://1nami.com/" target="_blank" rel="noopener">1納米學習導航</a></li>
<li><a href="https://navisec.it/" target="_blank" rel="noopener">NaviSec.it – 纳威安全导航</a></li>
<li><a href="http://ilxdh.com/" target="_blank" rel="noopener">龍軒導航</a></li>
<li><a href="https://fulck.com/" target="_blank" rel="noopener">Fluck</a></li>
<li><a href="http://hao.uisdc.com/" target="_blank" rel="noopener">設計師導航</a></li>
<li><a href="http://www.navdolphin.com/#" target="_blank" rel="noopener">海豚設計導航網站</a></li>
<li><a href="https://shouku123.com/" target="_blank" rel="noopener">收庫網</a></li>
<li><a href="http://www.meddir.cn/" target="_blank" rel="noopener">醫學導航</a></li>
<li><a href="http://www.moe123.net/" target="_blank" rel="noopener">萌導航Moe</a></li>
<li><a href="http://www.dydh.org/" target="_blank" rel="noopener">電影導航Org</a></li>
<li><a href="http://www.ifanqiang.com/" target="_blank" rel="noopener">愛翻牆</a></li>
<li><a href="https://botw.org/" target="_blank" rel="noopener">Best of the web</a></li>
<li><a href="http://www.pp93.com/" target="_blank" rel="noopener">PP93綠色導航</a></li>
<li><a href="http://www.gitnavi.com/" target="_blank" rel="noopener">GitNavi.com</a></li>
<li><a href="https://www.seeseed.com/" target="_blank" rel="noopener">Seeseed-無盡設計可能</a></li>
<li><a href="https://hi.hishare.site/" target="_blank" rel="noopener">星空導航</a></li>
<li><a href="https://ac.hishare.site/" target="_blank" rel="noopener">動漫風導航</a></li>
<li><a href="http://www.helloworld114.com/page-front/index.html" target="_blank" rel="noopener">Helloworld 114導航</a></li>
<li><a href="http://www.giffox.com/#" target="_blank" rel="noopener">Giffox</a></li>
<li><a href="http://sucheye.com/main/login?where=/" target="_blank" rel="noopener">如眸导航</a></li>
<li><a href="http://longmiao.wang/" target="_blank" rel="noopener">龍喵網</a></li>
<li><a href="http://www.gal123.com/" target="_blank" rel="noopener">紳士導航</a></li>
<li><a href="http://5ciy.com/" target="_blank" rel="noopener">5次元導航</a></li>
<li><a href="http://www.smallbear.me/" target="_blank" rel="noopener">小熊時光機</a></li>
<li><a href="http://mdwhat.com/home/index/0/common" target="_blank" rel="noopener">魔導網</a></li>
<li><a href="http://secnav.dropsec.xyz/" target="_blank" rel="noopener">DROPS安全導航</a></li>
</ul>
<h1 id="0x06-個人自定義導航網站"><a href="#0x06-個人自定義導航網站" class="headerlink" title="0x06 個人自定義導航網站"></a>0x06 個人自定義導航網站</h1><ul>
<li><a href="https://www.betterso.com/" target="_blank" rel="noopener">善用搜索</a></li>
<li><a href="https://www.bidianer.com/" target="_blank" rel="noopener">筆點-簡潔自定義導航</a></li>
<li><a href="http://www.miguyu.com" target="_blank" rel="noopener">咪咕魚</a></li>
</ul>
<h1 id="0x07-加入群組"><a href="#0x07-加入群組" class="headerlink" title="0x07 加入群組"></a>0x07 加入群組</h1><p>待更新</p>
<h1 id="0x08-更換VPN"><a href="#0x08-更換VPN" class="headerlink" title="0x08 更換VPN"></a>0x08 更換VPN</h1><p>待更新</p>
<h1 id="0x09-最終手段-踏入暗網"><a href="#0x09-最終手段-踏入暗網" class="headerlink" title="0x09 最終手段:踏入暗網"></a>0x09 最終手段:踏入暗網</h1><h1 id="0x10-參考資料"><a href="#0x10-參考資料" class="headerlink" title="0x10 參考資料"></a>0x10 參考資料</h1><p><a href="https://www.zhihu.com/question/28013848" target="_blank" rel="noopener">https://www.zhihu.com/question/28013848</a><br><a href="http://www.sowang.com/seek.htm" target="_blank" rel="noopener">http://www.sowang.com/seek.htm</a><br><a href="http://blog.joaoko.net/archives/222" target="_blank" rel="noopener">http://blog.joaoko.net/archives/222</a><br><a href="https://www.0101tx.com/about/" target="_blank" rel="noopener">https://www.0101tx.com/about/</a></p>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Search Engine </tag>
            
            <tag> Torrent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1分鐘讓你認識Python最基本文件種類]]></title>
      <url>/2017/11/11/pythonfiletype/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-什麼是py文件"><a href="#0x01-什麼是py文件" class="headerlink" title="0x01 什麼是py文件"></a>0x01 什麼是py文件</h1><p>一般上，我們都會用Python編譯器來運行py文件。而當我們查看py文件的時候，我們都可以直接看到程式的源代碼。然而，因為商業的需求，開發者必須想辦法保護程式源代碼，於是便有了pyc和pyo這2種的文件。</p>
<h1 id="0x02-什麼是pyc文件"><a href="#0x02-什麼是pyc文件" class="headerlink" title="0x02 什麼是pyc文件"></a>0x02 什麼是pyc文件</h1><p>pyc是而二进制文件的一種。要生成此文件，我們必須先將py文件經過編譯後，再使用<code>python -m compileall &lt;your_script.py&gt;</code>來生成你要的pyc文件。pyc文件和py文件比較起來，加載的速度會快了一些。另外，要注意的是不同版本的Python編譯出來的pyc文件也會有所不一樣。</p>
<h1 id="0x03-什麼是pyo文件"><a href="#0x03-什麼是pyo文件" class="headerlink" title="0x03 什麼是pyo文件"></a>0x03 什麼是pyo文件</h1><p>pyo是經過優化編譯後的程序。<code>python -O  &lt;your_script.py&gt;</code> 便可以直接生成所謂的pyo文件。小提示，python3.5版本以上都一律採用了新的優化機制，所以只有pyc，而沒有使用pyo文件了。</p>
<h1 id="0x04-什麼是pyd文件"><a href="#0x04-什麼是pyd文件" class="headerlink" title="0x04 什麼是pyd文件"></a>0x04 什麼是pyd文件</h1><p>pyd是python的动态链接库。</p>
<h1 id="0x05-如何反編譯pyc文件"><a href="#0x05-如何反編譯pyc文件" class="headerlink" title="0x05 如何反編譯pyc文件"></a>0x05 如何反編譯pyc文件</h1><p>或許有人會問，那要怎樣從pyo找回源代碼呢？用<a href="https://pypi.python.org/pypi/uncompyle6" target="_blank" rel="noopener">uncompyle6 2.13.2</a>工具可以將pyc文件的binary code反編譯回原來的代碼。</p>
<p>例子：<br>安装好uncompyle6后，可在cmd输入<code>uncompyle6 &lt;your_script.pyc&gt;</code>，你就能得到原本的源代码。<br><img src="/images/pythonfiletype/decomp.JPG" alt=""></p>
<p>此外，這裡有個<a href="http://tool.lu/pyc/" target="_blank" rel="noopener">線上工具</a>也具有一樣的功能哦。你可以上載pyc文件，然後它會自動幫你轉回源代碼。<br><img src="/images/pythonfiletype/online.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Note </tag>
            
            <tag> Python </tag>
            
            <tag> Reverse Engineering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解開隱寫術之謎]]></title>
      <url>/2017/11/08/stego/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-什麼是隱寫術"><a href="#0x01-什麼是隱寫術" class="headerlink" title="0x01 什麼是隱寫術"></a>0x01 什麼是隱寫術</h1><p><img src="/images/stego/01.jpg" alt=""><br>隱寫術是將想要隱藏的消息嵌入到載體中，而達到信息保密的效果。隱寫術的使用可以追溯到古埃及時代又或者中國的元朝。而現代隱寫術通過使用電腦以及不同的隱寫軟件將信息隱藏在不同種類的文件當中。</p>
<p>另外，使用隱寫術也可以為加密的信息提供多一層的保護。也就是說，我們可以將加密後的信息用一些非常普通的文件，如圖片，音頻，視頻，文檔等等，經過一系列的特殊處理將其隱藏起來。</p>
<p>一個完整的隱寫系統包含了4個要素：</p>
<ul>
<li>被嵌入信息：隱藏在普通文件背後的秘密信息。</li>
<li>普通文件：用於隱藏訊息的文件。</li>
<li>隱寫鑰匙：用於加密和解密信息的鑰匙。</li>
<li>隱寫軟件：負責將需隱藏信息和普通文件整合在一起的軟件。</li>
</ul>
<h1 id="0x02-現代隱寫術的方法"><a href="#0x02-現代隱寫術的方法" class="headerlink" title="0x02 現代隱寫術的方法"></a>0x02 現代隱寫術的方法</h1><ul>
<li>注入</li>
<li>最低有效位Least Significant bit(LSB)</li>
<li>File generation</li>
<li>Transform-Domain technique</li>
<li>Spread spectrum encoding</li>
<li>perceptual masking</li>
<li>Statistical method </li>
<li>Distortion technique</li>
</ul>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h2 id="最低有效位-LSB"><a href="#最低有效位-LSB" class="headerlink" title="最低有效位(LSB)"></a>最低有效位(LSB)</h2><p>最低有效位(Least Significant Bit)代表着二進制數中的最小的單位，可以用來指示數字很小的變化。也就是說,LSB是一個二進制數字中的第0位（即最低位），具有權值為$2^0$，可以用它來檢測數的奇偶性。在大端序(Big Endian)中，LSB指最右邊的位。</p>
<p>舉個例子，在圖像隱寫術裡面，所謂的LSB隱寫就是去修改RGB的顏色分量中的最低位。也就是去修改像數最低的1位元。當然人類的眼睛是無法分辨得出當中的變化，唯有通過一些軟件去檢驗，才能得知圖片裡面是隱藏了信息。</p>
<h2 id="文件生成"><a href="#文件生成" class="headerlink" title="文件生成"></a>文件生成</h2><h2 id="領域轉換技巧"><a href="#領域轉換技巧" class="headerlink" title="領域轉換技巧"></a>領域轉換技巧</h2><h2 id="擴頻編碼"><a href="#擴頻編碼" class="headerlink" title="擴頻編碼"></a>擴頻編碼</h2><h2 id="感知掩蔽"><a href="#感知掩蔽" class="headerlink" title="感知掩蔽"></a>感知掩蔽</h2><h2 id="統計學方式"><a href="#統計學方式" class="headerlink" title="統計學方式"></a>統計學方式</h2><h2 id="失真技術"><a href="#失真技術" class="headerlink" title="失真技術"></a>失真技術</h2><h1 id="0x03-元數據Metadata"><a href="#0x03-元數據Metadata" class="headerlink" title="0x03 元數據Metadata"></a>0x03 元數據Metadata</h1><p>元數據，又稱中介數據、中繼數據，為描述數據的數據(data about data)，主要是描述數據屬性(property)的信息，用來支持如指示存儲位置、歷史數據、資源查找、文件記錄等功能。</p>
<p>元數據中隱藏信息在比賽中是最基本的一種手法，通常用來隱藏一些關鍵的<code>Hint</code>信息或者是一些重要的如<code>password</code>等信息。</p>
<h2 id="Strings指令"><a href="#Strings指令" class="headerlink" title="Strings指令"></a>Strings指令</h2><p>這類元數據你可以右鍵–&gt;屬性去查看，也可以通過<code>strings</code>去查看，一般來說，一些隱藏的信息(奇怪的字元串)常常出現在頭部或者尾部。</p>
<p>用法:<a href="http://man.linuxde.net/strings" target="_blank" rel="noopener">Strings指令</a></p>
<p>例子<br>Breakin-ctf-2017:Mysterious-GIF<br><img src="https://media.giphy.com/media/3ohs7MnWicbg6MPG4U/giphy.gif" alt=""></p>
<p>要分析這個Gif，我們可以用<code>strings</code>這指令來查看裡面的所有字符串。</p>
<p>結果我們發現到異常的部分如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GIF89a</div><div class="line">   !!!<span class="string">""</span><span class="string">"###$$$%%%&amp;&amp;&amp;'''((()))***+++,,,---...///000111222333444555666777888999:::;;;&lt;&lt;&lt;===&gt;&gt;&gt;???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz&#123;&#123;&#123;|||&#125;&#125;&#125;~~~</span></div><div class="line"><span class="string">4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172</span></div><div class="line"><span class="string">NETSCAPE2.0</span></div><div class="line"><span class="string">ImageMagick</span></div><div class="line"><span class="string">...</span></div></pre></td></tr></table></figure></p>
<h2 id="identify指令"><a href="#identify指令" class="headerlink" title="identify指令"></a>identify指令</h2><p>這裡的16進制其實是藏在GIF的元數據區裡面。</p>
<p>接下來就是提取，你可以選擇python，但是利用<code>identify</code>指令顯得更加便捷。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root <span class="keyword">in</span> ~/Desktop/tmp λ identify -format <span class="string">"%s %c \n"</span> Question.gif</div><div class="line">0 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172</div><div class="line">1 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271</div><div class="line">...</div><div class="line">24 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f</div><div class="line">25 724b3052485a6b745062457335797444737142486435504646773d3d</div></pre></td></tr></table></figure></p>
<p>用法:<a href="https://linux.die.net/man/1/identify" target="_blank" rel="noopener">identify指令</a>。</p>
<p>而想知道這題的完整做法的人，可以看此<a href="https://goo.gl/pFtkjJ" target="_blank" rel="noopener">Writeup</a>。</p>
<h2 id="exiftool"><a href="#exiftool" class="headerlink" title="exiftool"></a>exiftool</h2><p>Exiftool是一個專門用來讀寫和編輯文件元數據的cmd工具。此工具也支援了非常多的元數據種類，包括了EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP and ID3。當然也可辨認出某些元數據是來自什麼樣的數碼相機如Canon, Casio, DJI, FLIR, FujiFilm, GE, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Motorola, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony。</p>
<p>例子：只需輸入<code>exiftool.exe 文件名</code>，你就可以取得文件的Metadata了。</p>
<p><img src="/images/stego/teaexample.JPG" alt=""></p>
<p>更多exiftool使用方法和功能可以到以下的鏈接裡面的Documentation學習。</p>
<ul>
<li><a href="https://www.sno.phy.queensu.ca/~phil/exiftool/" target="_blank" rel="noopener">ExifTool Official Website</a></li>
</ul>
<h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">binwalk</a></h2><ul>
<li><a href="https://hackfun.org/2017/09/07/Kali-Linux取证分析之Binwalk/" target="_blank" rel="noopener">binwalk使用教學</a> </li>
</ul>
<h1 id="0x04-圖片隱寫術"><a href="#0x04-圖片隱寫術" class="headerlink" title="0x04 圖片隱寫術"></a>0x04 圖片隱寫術</h1><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><h3 id="文件結構"><a href="#文件結構" class="headerlink" title="文件結構"></a>文件結構</h3><p>一个GIF文件的結構可分為</p>
<ul>
<li>文件頭(File Header)</li>
<li>GIF文件署名(Signature)</li>
<li>版本號(Version)</li>
<li>GIF數據流(GIF Data Stream)</li>
<li>控制標識符</li>
<li>圖象塊(Image Block)</li>
<li>其他的一些擴展塊</li>
<li>文件終結器(Trailer)</li>
</ul>
<p>下表顯示了一個GIF文件的組成結構：<br><img src="/images/stego/gif.png" alt=""></p>
<p>中間的那個大塊可以被重複任意次。</p>
<h3 id="文件頭"><a href="#文件頭" class="headerlink" title="文件頭"></a>文件頭</h3><p>GIF署名(Signature)和版本號(Version)</p>
<p>GIF署名用來確認一個文件是否是GIF格式的文件，這一部分由三個字元組成：”GIF”;文件版本號也是由三個位元組組成,通常是”87a”或”89a”。</p>
<h3 id="邏輯屏幕標識符-Logical-Screen-Descriptor"><a href="#邏輯屏幕標識符-Logical-Screen-Descriptor" class="headerlink" title="邏輯屏幕標識符(Logical Screen Descriptor)"></a>邏輯屏幕標識符(Logical Screen Descriptor)</h3><p>Logical Screen Descriptor（邏輯屏幕描述符）緊跟在header後面。這個塊告訴decoder（解碼器）圖片需要占用的空間。它的大小固定為7個位元組，以canvas width（畫布寬度）和canvas height（畫布高度）開始。</p>
<h3 id="全局顏色列表-Global-Color-Table"><a href="#全局顏色列表-Global-Color-Table" class="headerlink" title="全局顏色列表(Global Color Table)"></a>全局顏色列表(Global Color Table)</h3><p>GIF格式可以擁有global color table，或用於針對每個子圖片集，提供local color table。每個color table由一個RGB（就像通常我們見到的（255，0，0）紅色 那種）列表組成。</p>
<h3 id="圖象標識符-Image-Descriptor"><a href="#圖象標識符-Image-Descriptor" class="headerlink" title="圖象標識符(Image Descriptor)"></a>圖象標識符(Image Descriptor)</h3><p>一個GIF文件一般包含多個圖片。之前的圖片渲染模式一般是將多個圖片繪製到一個大的（virtual canvas）虛擬畫布上，而現在一般將這些圖片集用於實現動畫。</p>
<p>每個image都以一個image descriptor block（圖象描述塊）作為開頭，這個塊固定為10位元組。</p>
<h3 id="圖象數據-Image-Data"><a href="#圖象數據-Image-Data" class="headerlink" title="圖象數據(Image Data)"></a>圖象數據(Image Data)</h3><p>終於到了圖片數據實際存儲的地方。Image Data是由一系列的輸出編碼（output codes）構成，它們告訴decoder（解碼器）需要繪製在畫布上的每個顏色信息。這些編碼以位元組碼的形式組織在這個塊中。</p>
<h3 id="文件終結器-Trailer"><a href="#文件終結器-Trailer" class="headerlink" title="文件終結器(Trailer)"></a>文件終結器(Trailer)</h3><p>該塊為一個單欄位塊，用來指示該數據流的結束。取固定值0x3b。</p>
<p>想完整了解的可看<a href="http://www.jianshu.com/p/df52f1511cf8" target="_blank" rel="noopener">GIF格式圖片詳細解釋</a></p>
<h3 id="分離GIF圖片"><a href="#分離GIF圖片" class="headerlink" title="分離GIF圖片"></a>分離GIF圖片</h3><p>因為GIF是由多幅圖片組合而成，因此要分離GIF成PNG/JPG，我們可以在Linux裡面用<code>convert gif名 圖片名</code>指令來對GIF做出分離的動作。<br><img src="/images/stego/fishsplit.JPG" alt=""></p>
<h3 id="CTF例題1-WDCTF-2017-3-2"><a href="#CTF例題1-WDCTF-2017-3-2" class="headerlink" title="CTF例題1 WDCTF-2017:3-2"></a>CTF例題1 WDCTF-2017:3-2</h3><p>而想知道這題的完整做法的人，可以看此<a href="https://goo.gl/pFtkjJ" target="_blank" rel="noopener">Writeup</a>。</p>
<h3 id="CTF例題2"><a href="#CTF例題2" class="headerlink" title="CTF例題2"></a>CTF例題2</h3><p>利用GIF文件的時間間隔來當成是信息隱藏的載體。</p>
<h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>PNG全稱為Protable Network Graphic，屬於無損壓縮位圖圖形格式(lossless data compression)。PNG的出現是為了改善以及替代GIF成為適合在網絡傳輸的圖片格式。此外PNG也具有以下的特色：</p>
<ul>
<li>最高支持24位真彩色圖像(24 bit RGB or 32 Bit RGBA)</li>
<li>8位灰度圖像(無論是否為Alpha通道)。</li>
<li>支持256色调色板計算，來生成體積容量較小的文件。</li>
<li>支持Alpha通道和一般通道的透明/半透明特性。</li>
<li>支持圖像亮度的Gamma校准信息。</li>
<li>支持存储附加文本信息，以保留圖像名稱、作者、版權、創造時間、注釋等信息。</li>
<li>漸近顯示和流式讀寫，適合在網絡傳輸中快速顯示預覽效果後再展示全貌。</li>
<li>使用CRC防止文件出錯。</li>
<li>最新的PNG標準還可以允许在一个文件內存储多幅圖像。</li>
</ul>
<h3 id="文件結構-1"><a href="#文件結構-1" class="headerlink" title="文件結構"></a>文件結構</h3><p>首先PNG文件是由一個8字節的PNG文件標識(file signature)域和3個以上的後續數據塊(Chunk)組成。</p>
<p>文件頭<code>89 50 4E 47 0D 0A 1A 0A</code> + 數據塊 + 數據塊 + 數據塊…。</p>
<h3 id="文件頭-1"><a href="#文件頭-1" class="headerlink" title="文件頭"></a>文件頭</h3><table>
<thead>
<tr>
<th>十六進制</th>
<th>含義</th>
</tr>
</thead>
<tbody>
<tr>
<td>89</td>
<td>用於檢測傳輸系統是否支持8位的字符編碼（8 bit data），用以減少將文本文件被錯誤的識別成PNG文件的機會，反之亦然。</td>
</tr>
<tr>
<td>50 4E 47</td>
<td>PNG每個字母對應的ASCII，讓用戶可以使用文本編輯器查看時，識別出是PNG文件。</td>
</tr>
<tr>
<td>0D 0A</td>
<td>DOS風格的換行符（CRLF）。用於DOS-Unix數據的換行符轉換。</td>
</tr>
<tr>
<td>1A</td>
<td>在DOS命令行下，用於阻止文件顯示的文件結束符。</td>
</tr>
<tr>
<td>0A</td>
<td>Unix風格的換行符（LF）。用於Unix-DOS換行符的轉換。</td>
</tr>
</tbody>
</table>
<h3 id="數據塊CHUNK"><a href="#數據塊CHUNK" class="headerlink" title="數據塊CHUNK"></a>數據塊CHUNK</h3><p>PNG定義了兩種類型的數據塊，一種是稱為關鍵數據塊(critical chunk)，這是標準的數據塊，</p>
<p>另一種叫做輔助數據塊(ancillary chunks)，這是可選的數據塊。關鍵數據塊定義了4個標準數據塊，每個PNG文件都必須包含它們，PNG讀寫軟件也都必須要支持這些數據塊。<br><img src="/images/stego/datasection.JPG" alt=""></p>
<p>而這些數據塊都由4個部分組成。<br>|名稱|字節數|說明|<br>|—–|——|——|<br>|Length (長度)|4字節|指定数据块中数据域的长度，其长度不超过(231－1)字节|<br>|Chunk Type Code (數據塊類型碼)|4字節|數據塊類型碼由ASCII字母(A-Z和a-z)組成|<br>|Chunk Data (數據塊數據)|可變長度|存儲按照Chunk Type Code指定的數據|<br>|CRC (循環冗餘檢測)|4字節|存儲用來檢測是否有錯誤的循環冗餘碼|        </p>
<p>另外，CRC(cyclic redundancy check)域中的值是對Chunk Type Code域和Chunk Data域中的數據進行計算得到的。</p>
<h3 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h3><p>文件頭數據塊IHDR(header chunk)包含了儲存的圖像數據基本信息，由13字節組成，而且必須出現在PNG的第一段數據塊內，也只能有一個IHDR。</p>
<p>需要注意的是前8個字節的內容。<br>|域名稱|字節數|說明|<br>|—–|——|——|<br>|Width|4 bytes|圖像寬度，單位是像素|<br>|Height|4 bytes|圖像高度，單位是像素|</p>
<p>更關於PNG資料可看：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/便携式网络图形" target="_blank" rel="noopener">便携式网络图形</a></li>
<li><a href="http://www.libpng.org/pub/png/" target="_blank" rel="noopener">LiB PNG</a></li>
<li><a href="https://www.w3.org/TR/2003/REC-PNG-20031110/#4Concepts.PNGImageTransformation" target="_blank" rel="noopener">Portable Network Graphics (PNG) Specification (Second Edition)</a></li>
</ul>
<h1 id="0x05-音頻"><a href="#0x05-音頻" class="headerlink" title="0x05 音頻"></a>0x05 音頻</h1><h2 id="音頻分析三大走向：頻譜，波形，LSB"><a href="#音頻分析三大走向：頻譜，波形，LSB" class="headerlink" title="音頻分析三大走向：頻譜，波形，LSB"></a>音頻分析三大走向：頻譜，波形，LSB</h2><p><a href="https://www.hackpwn.me/archives/272" target="_blank" rel="noopener">https://www.hackpwn.me/archives/272</a></p>
<h1 id="0x06-視頻"><a href="#0x06-視頻" class="headerlink" title="0x06 視頻"></a>0x06 視頻</h1><h1 id="0x07-文檔：Word-PDF"><a href="#0x07-文檔：Word-PDF" class="headerlink" title="0x07 文檔：Word / PDF"></a>0x07 文檔：Word / PDF</h1><h1 id="0x08-流量包：附件，協議，字符串拆分"><a href="#0x08-流量包：附件，協議，字符串拆分" class="headerlink" title="0x08 流量包：附件，協議，字符串拆分"></a>0x08 流量包：附件，協議，字符串拆分</h1><h1 id="0x09-交換數據流"><a href="#0x09-交換數據流" class="headerlink" title="0x09 交換數據流"></a>0x09 交換數據流</h1><h1 id="0x10-HTML"><a href="#0x10-HTML" class="headerlink" title="0x10 HTML"></a>0x10 HTML</h1><h1 id="0x11-Vmdk"><a href="#0x11-Vmdk" class="headerlink" title="0x11 Vmdk"></a>0x11 Vmdk</h1><h1 id="0x12-Python字節碼"><a href="#0x12-Python字節碼" class="headerlink" title="0x12 Python字節碼"></a>0x12 Python字節碼</h1><h1 id="0x13-參考工具"><a href="#0x13-參考工具" class="headerlink" title="0x13 參考工具"></a>0x13 參考工具</h1><p>1.<a href="https://github.com/crorvick/outguess" target="_blank" rel="noopener">Outguess</a><br>2.<a href="http://www.cnblogs.com/pcat/p/6716502.html" target="_blank" rel="noopener">http://www.cnblogs.com/pcat/p/6716502.html</a></p>
<h1 id="0x14-參考資料"><a href="#0x14-參考資料" class="headerlink" title="0x14 參考資料"></a>0x14 參考資料</h1><p>1.<a href="https://emiyajibo.github.io/2017/02/24/隐写术-个人总结/" target="_blank" rel="noopener">隐写术个人总结</a><br>2.<a href="http://bobao.360.cn/learning/detail/243.html" target="_blank" rel="noopener">隐写术总结</a><br>3.<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/index.html" target="_blank" rel="noopener">圖片分析</a><br>4.<a href="http://blog.csdn.net/fuzz_nancheng/article/details/53384353" target="_blank" rel="noopener">世安杯-LSB隐写-png</a><br>5.<a href="http://blog.csdn.net/zhang_dashuai/article/details/48173673" target="_blank" rel="noopener">PNG 文檔格式</a><br>6.<a href="https://bbs.ichunqiu.com/thread-23756-1-1.html" target="_blank" rel="noopener">CTF中隐写术一些基础【一】</a></p>
]]></content>
      
        <categories>
            
            <category> Steganography </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Guide </tag>
            
            <tag> Steganography </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF終極指南]]></title>
      <url>/2017/11/06/CTFfinalguide/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>11月9日更新：</p>
<ul>
<li>CTF All in one</li>
</ul>
<h1 id="0x01-什麼是CTF"><a href="#0x01-什麼是CTF" class="headerlink" title="0x01 什麼是CTF"></a>0x01 什麼是CTF</h1><p>CTF全稱為Capture The Flag，也就是所謂的奪旗賽，起源于1996年DEFCON全球黑客大會，是讓黑客和資安愛好者進行技術競技的一種比賽。<br><a id="more"></a></p>
<h1 id="0x02-CTF的歷史"><a href="#0x02-CTF的歷史" class="headerlink" title="0x02 CTF的歷史"></a>0x02 CTF的歷史</h1><h1 id="0x03-CTF的種類"><a href="#0x03-CTF的種類" class="headerlink" title="0x03 CTF的種類"></a>0x03 CTF的種類</h1><p>比賽一般上有3種模式。分別是</p>
<ul>
<li>解題模式 - Jeopardy</li>
<li>戰爭分享模式 - Belluminar</li>
<li>攻防模式 - Attack &amp; Defense</li>
</ul>
<p>在解題模式當中，參賽者需要解答出以下類型的題型，每題都會有不一樣的分數，而比賽的最終積分也會決定參賽者的排名。</p>
<ul>
<li><p>Reverse Engineering</p>
<ul>
<li>題目涉及到軟件逆向，破解技術等，要求有較強的反彙編、反編譯功底。主要考查參賽選手的逆向分析能力。</li>
<li>所需知識：彙編語言，加密與解密，常見反編譯工具。</li>
</ul>
</li>
<li><p>Web</p>
<ul>
<li>Web是CTF的主要題型，題目涉及到許多常見的Web漏洞，如XSS、文件包含、代碼執行、上傳漏洞、SQL注入等。也有一些簡單的關於網絡基礎知識的考察，如返回包、TCP/IP、數據包內容和構造。可以說題目環境比較接近真實環境。</li>
<li>所需知識：PHP、Python、TCP/IP、SQL。</li>
</ul>
</li>
<li><p>Cryptography</p>
<ul>
<li>題目考察各種加解密技術，包括古典加密技術、現代加密技術甚至出題者自創加密技術，以及一些常見編碼解碼，主要考查參賽選手密碼學相關知識點。通常也會和其他題目相結合。</li>
<li>所需知識：密碼學。</li>
</ul>
</li>
<li><p>Forensics</p>
<ul>
<li>In a CTF context, “Forensics” challenges can include file format analysis,stegonography, memory dump analysis, or network packet capture analysis. Any challenge to examine and process a hidden piece of information out of static data files could be considered a Forensics challenge.</li>
<li>所需知識：file format，scripting language (e.g.Python)，manipulate binary data (byte-level manipulations) in that language understand protocols, structures, and encodings</li>
</ul>
</li>
<li><p>Pwn</p>
<ul>
<li>Pwn在黑客俚語中代表著攻破，獲取權限，在CTF比賽中它代表著溢出類的題目，其中常見類型溢出漏洞有整數溢出、棧溢出、堆溢出等。主要考查參賽選手對漏洞的利用能力。<ul>
<li>所需知識：C，Olly Debug+IDA，數據結構，操作系統。</li>
</ul>
</li>
</ul>
</li>
<li>Misc<ul>
<li>Misc即安全雜項，題目涉及隱寫術、流量分析、人肉搜索、數據分析等，覆蓋面比較廣，主要考查參賽選手的各種基礎綜合知識。</li>
<li>所需知識：常見隱寫術工具、Wireshark 等流量審查工具、編碼知識</li>
</ul>
</li>
<li>Mobile<ul>
<li>主要分為 Android和iOS 兩個平台，以Android逆向為主，破解APK並提交正確答案。</li>
<li>所需知識：Java，Android 開發，常見工具。</li>
</ul>
</li>
</ul>
<p>Normally, players will specialize in one of these categories. Although it is possible to have a basic knowledge of all of them, we suggest you begin by focusing on the one that interests you most. This guide will be focusing On Binary Exploitation.</p>
<h1 id="0x04-CTF新手須知"><a href="#0x04-CTF新手須知" class="headerlink" title="0x04 CTF新手須知"></a>0x04 CTF新手須知</h1><p>若想知道世界各地在什麼時候會舉辦CTF比賽，<a href="https://ctftime.org" target="_blank" rel="noopener">CTF Times</a>是你可以查詢的地方。這個網站找到一切以前和即將舉行的CTF比賽。當然你也可以找到比賽隊伍的成績，世界排名以及他們提供的答案(Writeup)。</p>
<p>以下是本人推荐新手可以参加的CTF比赛。</p>
<ul>
<li><a href="https://picoctf.com" target="_blank" rel="noopener">PicoCTF</a></li>
<li><a href="http://plaidctf.com" target="_blank" rel="noopener">PlaidCTF</a></li>
<li><a href="https://hsctf.com" target="_blank" rel="noopener">HSCTF</a></li>
<li><a href="https://ctf.csaw.io" target="_blank" rel="noopener">CSAW CTF</a></li>
<li><a href="https://backdoor.sdslabs.co" target="_blank" rel="noopener">Backdoor</a></li>
<li>HITCON CTF<ul>
<li><a href="https://ctf2015.hitcon.org/dashboard" target="_blank" rel="noopener">2015</a> </li>
<li><a href="https://ctf2016.hitcon.org/dashboard" target="_blank" rel="noopener">2016</a></li>
<li><a href="https://ctf2017.hitcon.org/dashboard" target="_blank" rel="noopener">2017</a></li>
</ul>
</li>
</ul>
<p>當你有了經驗之後，想嘗試高難度的CTF比賽可以試試看做Defcon CTF的題目</p>
<ul>
<li><a href="https://github.com/legitbs/quals-2017" target="_blank" rel="noopener">Defcon Quals 2017</a></li>
<li><a href="https://github.com/legitbs/quals-2016" target="_blank" rel="noopener">Defcon Quals 2016</a></li>
<li><a href="https://github.com/legitbs/quals-2016" target="_blank" rel="noopener">Defcon Quals 2015</a></li>
<li><a href="https://github.com/legitbs/quals-2016" target="_blank" rel="noopener">Defcon Quals 2014</a></li>
<li><a href="https://github.com/legitbs/quals-2013" target="_blank" rel="noopener">Defcon Quals 2013</a></li>
</ul>
<p>每當你做完一道題目的時候，可以把自己的做法和用到的思路寫成Writeup，目的是為了將自己在解題的時候，所學到的知識有系統的整理好，也方便以後可以參考回自己做過類似的題目。</p>
<p>你也可以瀏覽<a href="https://rupigcute.wixsite.com/quantiumtown/ctf" target="_blank" rel="noopener">CTF完整資源導航網站</a>來找到更多有關資訊。<br>第二個推薦的導航網站<a href="https://gotyour.pw/resources.html" target="_blank" rel="noopener">Got Your Pw</a>。</p>
<p>一些CTF的介紹文章/Wiki/投影片。</p>
<ul>
<li><a href="https://goo.gl/NyqRQv" target="_blank" rel="noopener">Becoming A Security Master 2017 by C.K.Chan from Bamboo Fox.</a></li>
<li><a href="https://www.gitbook.com/book/firmianay/ctf-all-in-one/details" target="_blank" rel="noopener">All In One CTF</a></li>
<li><a href="https://goo.gl/Xrd6TK" target="_blank" rel="noopener">CTF經驗分享 by Mango from Bamboofox</a></li>
<li><a href="https://goo.gl/p2QKax" target="_blank" rel="noopener">CTF比賽總是輸，你還差點Tricks</a></li>
<li><a href="https://goo.gl/GPBRjb" target="_blank" rel="noopener">CTF超入門 (for 第12回セキュリティさくら)</a></li>
<li><a href="https://goo.gl/9ubxPd" target="_blank" rel="noopener">CTF for ビギナーズ　ネットワーク講習資料</a></li>
<li><a href="https://goo.gl/fnfbxj" target="_blank" rel="noopener">CTF UCLA Beginner’s Guide</a></li>
<li><a href="https://kitctf.de/learning/getting-started" target="_blank" rel="noopener">Getting Started with CTF</a></li>
<li><a href="https://speakerdeck.com/inndy/ctf-from-zero-to-one" target="_blank" rel="noopener">CTF From 0 to 1</a></li>
<li><a href="http://anhkgg.com/known-ctf/" target="_blank" rel="noopener">CTF認識</a></li>
<li><a href="https://github.com/ktecv2000/How-to-play-CTF" target="_blank" rel="noopener">How to play CTF</a></li>
</ul>
<p>而<a href="https://goo.gl/CUWiPu" target="_blank" rel="noopener">CTF維基</a>則涵蓋了一般的出題思路以及其解題的方式，不管你是新手還是老手都建議你看一看，畢竟基本的一些思路，在這個維基裡面都解釋得非常清楚。此外，想更深入了解維基裡面的每個項目，也可以繼續關注本人的部落格，作者會不定時更新一些對於該維基項目的補充和新的資訊。</p>
<h1 id="0x05-學習資源"><a href="#0x05-學習資源" class="headerlink" title="0x05 學習資源"></a>0x05 學習資源</h1><ul>
<li><a href="https://goo.gl/jBLRTG" target="_blank" rel="noopener">BambooFox CTF戰隊的社團課程</a>：課程內容有Linux Basic,Set up VMware,Programming,Web Security,Assmbly Languge,Buffer overflow,ROP,Crypto,Reverse Engineering等等。</li>
<li><a href="https://goo.gl/zynoHu" target="_blank" rel="noopener">Linux</a></li>
<li><a href="https://goo.gl/7GeRhU" target="_blank" rel="noopener">實驗吧CTF訓練課程&amp;比賽題目練習</a></li>
<li><a href="https://goo.gl/jyDmYQ" target="_blank" rel="noopener">逆向工程學習指南</a></li>
<li><a href="https://goo.gl/e5XqmZ" target="_blank" rel="noopener">PwnWiki.io</a></li>
<li><a href="https://www.pediy.com/kssd/index.html" target="_blank" rel="noopener">看雪软件安全文档库2013版本</a>：內有電腦基礎，逆向，系統，調試，編程語言，軟件保護，PEDIY，病毒，漏洞分析，網絡安全等知識。</li>
<li><a href="https://goo.gl/X1nxBn" target="_blank" rel="noopener">加密解密第三版</a>。這本書已經包含了大部分前面文檔庫裡面涵蓋的知識。</li>
<li><a href="https://www.kanxue.com/book-list.htm" target="_blank" rel="noopener">看雪學院2017精華資源指南</a></li>
<li><a href="https://goo.gl/e2Dp6n" target="_blank" rel="noopener">看雪論壇</a></li>
<li><a href="http://www.shentoushi.top" target="_blank" rel="noopener">滲透師導航</a></li>
<li><a href="https://apsdehal.in/awesome-ctf/#tutorials" target="_blank" rel="noopener">Awesome CTF</a></li>
</ul>
<p>除了以上資源，你也可以自己上網閱讀一些大神寫的文章，從他們自我總結的經驗當中，你往往可以學得更快。單單看並不足夠，最重要的還是要自己做筆記，唯有這樣你才會清楚知道自己已經學會了什麼知識。</p>
<h1 id="0x06-個人推薦CTF訓練基地"><a href="#0x06-個人推薦CTF訓練基地" class="headerlink" title="0x06 個人推薦CTF訓練基地"></a>0x06 個人推薦CTF訓練基地</h1><ul>
<li><a href="http://overthewire.org/wargames/" target="_blank" rel="noopener">Overthewire</a></li>
<li><a href="https://backdoor.sdslabs.co" target="_blank" rel="noopener">Backdoor SDS Lab</a></li>
<li><a href="https://www.enigmagroup.org/" target="_blank" rel="noopener">Enigmagroup</a></li>
<li><a href="https://www.hackthissite.org" target="_blank" rel="noopener">Hack This Site</a></li>
<li><a href="https://w3challs.com" target="_blank" rel="noopener">W3Chall</a></li>
<li><a href="http://reversing.kr/index.php" target="_blank" rel="noopener">Reversing.kr</a></li>
<li><a href="http://pwnable.kr" target="_blank" rel="noopener">Pwnable.kr</a></li>
<li><a href="https://exploit-exercises.com" target="_blank" rel="noopener">Exploit-exercises</a></li>
<li><a href="https://microcorruption.com/login" target="_blank" rel="noopener">Micro Corruption</a></li>
<li><a href="http://smashthestack.org" target="_blank" rel="noopener">Samsh the stack</a></li>
<li><a href="http://wargame.kr" target="_blank" rel="noopener">Wargame Kr</a></li>
<li><a href="https://ctflearn.com/index.php" target="_blank" rel="noopener">CTF Learn</a></li>
<li><a href="https://pwnable.tw" target="_blank" rel="noopener">Pwnable TW</a></li>
<li>[Ringzer 0 Team(<a href="https://ringzer0team.com" target="_blank" rel="noopener">https://ringzer0team.com</a>)</li>
<li><a href="https://hackme.inndy.tw" target="_blank" rel="noopener">Hackme Inddy Tw</a></li>
<li><a href="https://ctf365.com" target="_blank" rel="noopener">CTF 365</a></li>
<li><a href="http://pwnwiki.io/#!index.md" target="_blank" rel="noopener">PWN Wiki</a></li>
<li><a href="http://ctf.sqrt-1.me" target="_blank" rel="noopener">CTF Sqrt</a></li>
<li><a href="http://www.shiyanbar.com/ctf/practice" target="_blank" rel="noopener">實驗吧CTF</a></li>
<li><a href="https://bamboofox.cs.nctu.edu.tw/courses" target="_blank" rel="noopener">Bamboofox- list of challenge in each course</a></li>
<li><a href="http://solveme.safflower.kr" target="_blank" rel="noopener">Solve Me</a></li>
<li><a href="https://ctfs.me/" target="_blank" rel="noopener">CTFS ME</a></li>
</ul>
<h1 id="0x07-CTF出題方向學習資源"><a href="#0x07-CTF出題方向學習資源" class="headerlink" title="0x07 CTF出題方向學習資源"></a>0x07 CTF出題方向學習資源</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul>
<li><a href="https://goo.gl/h3EJKJ" target="_blank" rel="noopener">Web Security Learning by Chybeta</a></li>
<li><a href="https://chybeta.gitbooks.io/waf-bypass/sqlzhu-ru/mysqlzhu-ru.html" target="_blank" rel="noopener">WAF by pass</a></li>
<li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">SQLI Labs</a></li>
<li><a href="http://redtiger.labs.overthewire.org" target="_blank" rel="noopener">Redtiger Lab Overthewire</a></li>
<li>[<a href="http://xss-quiz.int21h.jp" target="_blank" rel="noopener">http://xss-quiz.int21h.jp</a>]</li>
<li>[<a href="https://alf.nu/alert1" target="_blank" rel="noopener">https://alf.nu/alert1</a>]</li>
<li>[<a href="http://google-gruyere.appspot.com" target="_blank" rel="noopener">http://google-gruyere.appspot.com</a>]</li>
<li>[<a href="https://xss-game.appspot.com" target="_blank" rel="noopener">https://xss-game.appspot.com</a>]</li>
<li>[<a href="http://ctf.infosecinstitute.com/index.php" target="_blank" rel="noopener">http://ctf.infosecinstitute.com/index.php</a>]<br><a href="http://ctf.infosecinstitute.com/ctf2/" target="_blank" rel="noopener">http://ctf.infosecinstitute.com/ctf2/</a><br><a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a><br><a href="http://www.webug.org" target="_blank" rel="noopener">http://www.webug.org</a></li>
</ul>
<h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><ul>
<li><a href="https://goo.gl/L7rcxz" target="_blank" rel="noopener">Software Security Learning by Chybeta</a><br><a href="http://vancir.com/tutorials.html" target="_blank" rel="noopener">http://vancir.com/tutorials.html</a><br><a href="http://www.louys.net.cn/index.php/archives/120/" target="_blank" rel="noopener">http://www.louys.net.cn/index.php/archives/120/</a><br><a href="https://github.com/firmianay/Binary-Reading-List" target="_blank" rel="noopener">https://github.com/firmianay/Binary-Reading-List</a><br><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="noopener">http://security.cs.rpi.edu/courses/binexp-spring2015/</a></li>
</ul>
<h2 id="Reverse-Enginnering"><a href="#Reverse-Enginnering" class="headerlink" title="Reverse Enginnering"></a>Reverse Enginnering</h2><h2 id="隱寫術"><a href="#隱寫術" class="headerlink" title="隱寫術"></a>隱寫術</h2><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h1 id="0x08-CTF實際好用工具推薦"><a href="#0x08-CTF實際好用工具推薦" class="headerlink" title="0x08 CTF實際好用工具推薦"></a>0x08 CTF實際好用工具推薦</h1><p>1.CTF 工具 <a href="https://ctf-wiki.github.io/ctf-tools/#!index.md" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-tools/#!index.md</a><br>2.CTF Tools List by Zardus <a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a><br>3.<a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a>  Documentation: <a href="https://docs.pwntools.com/en/stable/" target="_blank" rel="noopener">https://docs.pwntools.com/en/stable/</a><br>4.<a href="https://github.com/truongkma/ctf-tools" target="_blank" rel="noopener">https://github.com/truongkma/ctf-tools</a><br>5.<a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a><br>6.<a href="https://github.com/TUCTF/Tools" target="_blank" rel="noopener">https://github.com/TUCTF/Tools</a><br>7.<a href="http://blog.csdn.net/ida0918/article/details/52819147" target="_blank" rel="noopener">http://blog.csdn.net/ida0918/article/details/52819147</a><br>8.<a href="https://github.com/truongkma/ctf-tools" target="_blank" rel="noopener">https://github.com/truongkma/ctf-tools</a></p>
<h1 id="0x09-CTF戰隊的部落格"><a href="#0x09-CTF戰隊的部落格" class="headerlink" title="0x09 CTF戰隊的部落格"></a>0x09 CTF戰隊的部落格</h1><h1 id="0x10-搭建CTF比賽平台"><a href="#0x10-搭建CTF比賽平台" class="headerlink" title="0x10 搭建CTF比賽平台"></a>0x10 搭建CTF比賽平台</h1><h2 id="參考鏈接"><a href="#參考鏈接" class="headerlink" title="參考鏈接"></a>參考鏈接</h2><ul>
<li><a href="https://rupigcute.wixsite.com/quantiumtown/rssindex" target="_blank" rel="noopener">https://rupigcute.wixsite.com/quantiumtown/rssindex</a></li>
<li><a href="https://ctf-wiki.github.io/ctf-wiki/#" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/#</a></li>
<li><a href="https://www.gitbook.com/book/wizardforcel/ctf-field-guide" target="_blank" rel="noopener">https://www.gitbook.com/book/wizardforcel/ctf-field-guide</a></li>
<li><a href="http://www.storysec.com/?p=89" target="_blank" rel="noopener">http://www.storysec.com/?p=89</a></li>
</ul>
<h1 id="等待整理資源"><a href="#等待整理資源" class="headerlink" title="等待整理資源"></a>等待整理資源</h1><p><a href="https://github.com/lanjelot/ctfs/blob/master/NOTES-ctfs" target="_blank" rel="noopener">https://github.com/lanjelot/ctfs/blob/master/NOTES-ctfs</a></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Guide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[隨機數生成原理]]></title>
      <url>/2017/11/05/rnganbitstream/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-隨機數的使用"><a href="#0x01-隨機數的使用" class="headerlink" title="0x01 隨機數的使用"></a>0x01 隨機數的使用</h1><ul>
<li>Key distribution and reciprocal authenticaltion schemes.</li>
<li>Generation of session keys or keys for RSA.</li>
<li>Generation of a bit stream for symmetric encryption.</li>
</ul>
<h1 id="0x02-成為隨機數的條件"><a href="#0x02-成為隨機數的條件" class="headerlink" title="0x02 成為隨機數的條件"></a>0x02 成為隨機數的條件</h1><ul>
<li>均勻分佈：序列中比特分佈必須均勻，也就是說1和0的出現頻率應該近似相等。</li>
<li>獨立性：序列中沒有任何一個單獨序列可以從其他序列推斷出來。</li>
<li>不可預測性：必須令攻擊者無法從現有的隨機數推斷出之後可能會生成的隨機數。</li>
</ul>
<h1 id="0x03-偽隨機數生成器-PRNGs"><a href="#0x03-偽隨機數生成器-PRNGs" class="headerlink" title="0x03 偽隨機數生成器(PRNGs)"></a>0x03 偽隨機數生成器(PRNGs)</h1><p>偽隨機數生成器會輸入一個成為種子(Seed)的固定值，然後再通過使用可決定性(Deterministic）的演算法來生成一系列的比特。通常，種子由TRNG生成。通常，如圖所示，存在一些反饋路徑，通過該反饋路徑將算法的一些結果反饋為輸入作為附加輸出位。重要的是要注意的是，輸出比特流完全由輸入值或值確定，以便知道算法和種子的對手可以再現整個比特流。<br>A PRNG takes as input with a fixed value, called the seed, and produces a sequence of output bits using a deterministic algorithm. Quite often, the seed isgenerated by a TRNG. Typically, as shown, there is some feedback path by which some of the results of the algorithm are fed back as input as additional output bits are produced. The important thing to note is that the output bit stream is determined solely by the input value or values, so that an adversary who knows the algorithm and the seed can reproduce the entire bit stream.</p>
<p>An algorithm that is used to produce an open-ended sequence of bits is referred to as a PRNG. A common application for an open-ended sequence of bits is as input to a symmetric stream cipher, as discussed in Section 8.4. Also, see Figure 4.1a.</p>
<p>Pseudorandom function (PRF): A PRF is used to produce a pseudorandom string of bits of some fixed length. Examples are symmetric encryption keys and nonces. Typically, the PRF takes as input a seed plus some context specific values, such as a user ID or an application ID. A number of examples of PRFswill be seen throughout this book, notably in Chapters 17 and 18.</p>
<h1 id="0x04-TRNGs"><a href="#0x04-TRNGs" class="headerlink" title="0x04 (TRNGs)"></a>0x04 (TRNGs)</h1><p>a true random number generator (TRNG) with two forms of pseudorandom number generators. A TRNG takes as input a source that is<br>effectively random; the source is often referred to as an entropy source. We discuss such sources in Section 8.6. In essence, the entropy source is drawn from the physical environment of the computer and could include things such as keystroke timing patterns, disk electrical activity, mouse movements, and instantaneous values of the system clock. The source, or combination of sources, serve as input to an algorithm that produces random binary output. The TRNG may simply involve conversion ofan analog source to a binary output. The TRNG may involve additional processing to overcome any bias in the source.</p>
<h1 id="0x05-True-Random-Number-Generator"><a href="#0x05-True-Random-Number-Generator" class="headerlink" title="0x05 True Random Number Generator"></a>0x05 True Random Number Generator</h1><ul>
<li>Non-deterministic source, physical environment</li>
<li>Detect ionizing radiation events, leaky capacitors,thermal noise from resistors or audio inputs</li>
<li>Mouse/keyboard activity, I/O operations, interrupts</li>
<li>Inconvenient, small number of values</li>
</ul>
<h1 id="Pseudo-Random-Number-Generator"><a href="#Pseudo-Random-Number-Generator" class="headerlink" title="Pseudo Random Number Generator"></a>Pseudo Random Number Generator</h1><ul>
<li>Deterministic algorithms to calculate numbers in “relatively random” sequence</li>
<li>Seed is algorithm input</li>
<li>Produces continuous stream of random bits</li>
<li>Pseudo Random Function</li>
<li>Same as PRNG but produces string of bits of some</li>
</ul>
<h1 id="Requirements-of-PRNG"><a href="#Requirements-of-PRNG" class="headerlink" title="Requirements of PRNG"></a>Requirements of PRNG</h1><p>Hard to determine pseudo-random stream if don’t know seed(but know algorithm)</p>
<ul>
<li>Randomness<br>Test for uniformity, scalability, consistency<br>Examples: Frequency, runs, compressability</li>
<li>Unpredictability<br>-Forward and backward unpredictability<br>-Seed must be secure(Use TRNG to generate seed)</li>
</ul>
<h1 id="Linear-Congruential-Generator"><a href="#Linear-Congruential-Generator" class="headerlink" title="Linear Congruential Generator"></a>Linear Congruential Generator</h1><p>Parameters:<br>m, the modulus, m &gt; 0<br>a, the multiplier, 0 &lt; a &lt; m<br>c, the increment, 0 ≤ c &lt; m<br>X0, the seed, 0 ≤ X0 &lt; m<br>Generate sequence of pseudo-random numbers, {Xn}:<br>Xn+1 = (aXn + c) mod m<br>Choice of a, c and m is important:<br>m should be large, prime, e.g. 231 − 1<br>If c=0, few good values of a, e.g. 75 = 16807<br>If attacker knows parameters and one number, can easily<br>determine subsequent numbers</p>
<h1 id="Blum-Blum-Shub-Generator"><a href="#Blum-Blum-Shub-Generator" class="headerlink" title="Blum Blum Shub Generator"></a>Blum Blum Shub Generator</h1><p>Parameters:<br>p, q: large prime numbers such that p ≡ q ≡ 3 (mod 4)<br>n = p × q<br>s, random number relatively prime to n<br>Generate sequence of bits, Bi<br>:<br>X0 = s<br>2 mod n<br>for i = 1 → ∞<br>Xi = (Xi−1)<br>2 mod n<br>Bi = Xi mod 2<br>Cryptographically secure pseudo-random bit generator</p>
<p>Example Operation of BBS Generator<br>n = 192649 = 383 × 503, s = 101355</p>
<p>PRNG Mechanisms Based on Block Ciphers<br>Use symmetric block ciphers (e.g. AES, DES) to produce pseudo-random bits<br>Seed is encryption key, K, and value V (which is updated)</p>
<h1 id="ANSI-X9-17-PRNG"><a href="#ANSI-X9-17-PRNG" class="headerlink" title="ANSI X9.17 PRNG"></a>ANSI X9.17 PRNG</h1><p>Cryptographically secure PRNG using Triple DES<br>Parameters:<br>64-bit date/time representation, DTi<br>64-bit seed value, Vi<br>Pair of 56-bit DES keys, K1 and K2<br>Operation:<br>Uses Triple DES three times<br>(see next slide)<br>Output:<br>64-bit pseudo-random number, Ri<br>64-bit seed value, Vi+1</p>
<h1 id="Stream-Ciphers"><a href="#Stream-Ciphers" class="headerlink" title="Stream Ciphers"></a>Stream Ciphers</h1><p>Encrypt one byte at a time by XOR with pseudo-random byte</p>
<p>Output of generator is called keystream</p>
<h1 id="Design-Criteria-for-Stream-Ciphers"><a href="#Design-Criteria-for-Stream-Ciphers" class="headerlink" title="Design Criteria for Stream Ciphers"></a>Design Criteria for Stream Ciphers</h1><p>Important Considerations<br>Encryption sequence should have large period<br>Keystream should approximate true random number<br>stream<br>Key must withstand brute force attacks<br>Comparison to Block Ciphers<br>Stream ciphers often simpler to implement, faster<br>Block ciphers can re-use keys</p>
<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>Designed by Ron Rivest in 1987<br>Used in secure web browsing and wireless LANs<br>Very simple and efficient implementation<br>Can use variable size key: 8 to 2048 bits<br>Several theoretical limitations of RC4<br>No known attacks if use 128-bit key and discard initial values of stream<br>RC4 is used in WEP (shown to be weak security for wireless LANs)—problem with how keys are used, not RC4 algorithm</p>
<h1 id="RC4-Algorithm"><a href="#RC4-Algorithm" class="headerlink" title="RC4 Algorithm"></a>RC4 Algorithm</h1><p>Parameters and Variables<br>Variable length key, K, from 1 to 256 Bytes<br>State vector, S, 256 Bytes<br>Temporary vector, T, 256 Bytes<br>A byte from keystream, k, generated from S</p>
<h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><ol>
<li>Initialise S to values 0 to 255; initialise T with<br>repeating values of key, K</li>
<li>Use T to create initial permutation of S</li>
<li>Permutate S and generate keystream, k from S</li>
<li>Encrypt a byte of plaintext, p, by XOR with k</li>
</ol>
<p>Initial State of S and T<br>for i = 0 to 255 do<br>S[i] = i;<br>T[i] = K[i mod keylen];</p>
<p>Initial Permutation of S<br>j = 0;<br>for i = 0 to 255 do<br>j = (j + S[i] + T[i]) mod 256;<br>Swap (S[i], S[j]);</p>
]]></content>
      
        <categories>
            
            <category> Cryptography </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Note </tag>
            
            <tag> Cryptography </tag>
            
            <tag> Stream Cipher </tag>
            
            <tag> Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[序列密码]]></title>
      <url>/2017/11/03/stream-cipher/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h1><p>序列密碼起源於20世紀20年代的維爾姆(Vernam)密碼。Vernam密碼中的密鑰序列要求是隨機的序列，由於密碼中的密鑰序列的產生、存儲以及分配等方面存在一定的困難，Vernam體制在當時並沒有得到廣泛的應用。然而，在微電子技術和數學理論逐漸變得完善後，序列密碼終於得到了長足的發展和應用。</p>
<p>目前，序列密碼是世界各國的軍事和外交等重要領域中使用的主要密碼體制之一。序列密碼是對稱密碼體制中的一類，又稱為流密碼。</p>
<h1 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="0x02 原理"></a>0x02 原理</h1><p>在序列密碼中，明文的每一個位會和密鑰序列的位相加來進行所謂的加密。而序列密碼共有2種：同步序列密碼和異步序列密碼。前者密碼序列取決於密鑰而後者則是密鑰和密文。</p>
<p>要對密文進行加密，我們需要將每一個位置的$x_i$與一個密鑰序列位$s_i$相加後再使用模數2來執行該運算。</p>
<h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><p>明文，密文和密鑰是由獨立的位組成，也可以寫成：$x_i,y_i,s_i∈{0,1}$<br>加密: $y_i= E s_i(x_i)\equiv x_i + s_i mod 2$<br>解密: $x_i= D s_i(y_i)\equiv y_i + s_i mod 2$</p>
<h2 id="3個疑問要點"><a href="#3個疑問要點" class="headerlink" title="3個疑問要點"></a>3個疑問要點</h2><ul>
<li>為什麼加密和解密使用相同函數?</li>
<li>為什麼可以使用簡單的Mod2加法進行加密？</li>
<li>密鑰序列位$s_i$的本質是什麼？</li>
</ul>
<p><strong>為什麼加密和解密使用相同函數?</strong></p>
<p>需證明：使用解密函數後，可得回明文位$x_i$。<br>已知：密文位$y_i$是通過加密函數$y_i\equiv x_i + s_i mod 2$計算得到。</p>
<p>把此加密表達式插入加密函數：<br>$d s_i\equiv y_i+s_i mod 2$<br>     $\equiv (x_i + s_i)+s_i mod 2$<br>     $x_i + s_i + s_i mod 2$<br>     $x_i + 2s_i mod 2$<br>     $x_i + 0 mod 2$<br>     $x_i mod 2$<br>Q.E.D</p>
<p>表達式$2s_i mod 2$是0，因為$2\equiv 0 mod 2$。另外，若$s_i$的值為0，此時$2s_i = 2⋅0  \equiv 0 mod 2$。而$s_i$的值為1，此時$2s_i = 2⋅1 =2 \equiv 0 mod 2$。</p>
<p><strong>為什麼可以使用簡單的Mod2加法進行加密？</strong></p>
<p>首先，執行mod2算術運算時，得到的結果只能為0或者1。因此我們可以把mod2的算術運算看成Boolean。</p>
<table>
<thead>
<tr>
<th>$x_i$</th>
<th>$s_i$</th>
<th>$y_i\equiv x_i + s_i mod 2$</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>其结果和XOR的真值表是一样的。</p>
<p>我們來看一個實際例子：<br>A 的ASCII數值為65，轉成二進制為1000001。<br>假設密鑰序列的$s_i$開頭位是0101100。<br>經過加密後密文為1101101，換回字母是小寫的m。當然如果使用同樣的密鑰解密，那就可以得回明文為A。<br>也因為這樣所以便可以使用Mod2加法進行加密。</p>
<p><strong>密鑰序列位$s_i$的本質是什麼？</strong></p>
<p>根據以上例子，序列密碼的安全取決於密鑰序列。所以要使到攻擊者難以猜測，那麼序列密碼在加密時就必須使用隨機生成的密鑰序列。</p>
<p>而要生成隨機密鑰序列，可以使用接下來介紹的其中一種隨機數生成器。</p>
<h1 id="0x03-隨機數生成器"><a href="#0x03-隨機數生成器" class="headerlink" title="0x03 隨機數生成器"></a>0x03 隨機數生成器</h1><p>現在讓我們來了解到底有哪些的隨機數生成器(RNGs)。</p>
<h2 id="真隨機數生成器-TRNGs"><a href="#真隨機數生成器-TRNGs" class="headerlink" title="真隨機數生成器(TRNGs)"></a>真隨機數生成器(TRNGs)</h2><ul>
<li>輸出不可複制。</li>
<li>多為基於物理過程。</li>
<li>在密碼學中主要用作是生成會話密鑰。更詳細的用途以後會發文解釋清楚。</li>
</ul>
<h2 id="偽隨機數生成器-PRNGs"><a href="#偽隨機數生成器-PRNGs" class="headerlink" title="偽隨機數生成器(PRNGs)"></a>偽隨機數生成器(PRNGs)</h2><p>從一個初始種子開始計算來得到序列。以下是其計算方式：<br>$s<em>0 = seed$<br>$s</em>{x+1}= f(s_i),i=0,1,$</p>
<p>這是其推廣形式，其中t為常數項。<br>$s_{i+1} = f(s<em>i,s</em>{i-1},\ldots s_{i-t})$</p>
<p>例子：線性同餘生成器<br>$s<em>0 = seed$<br>$s</em>{x + 1} \equiv a{s_i} + b mod m,i = 0,1,\ldots$</p>
<h2 id="加密安全的偽隨機數生成器-CSPRNGs"><a href="#加密安全的偽隨機數生成器-CSPRNGs" class="headerlink" title="加密安全的偽隨機數生成器(CSPRNGs)"></a>加密安全的偽隨機數生成器(CSPRNGs)</h2><h1 id="0x04-一次一密-One-Time-Pad"><a href="#0x04-一次一密-One-Time-Pad" class="headerlink" title="0x04 一次一密(One Time Pad)"></a>0x04 一次一密(One Time Pad)</h1><h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ul>
<li>《深入淺出密碼學——常用密碼技術原理與應用:第2章》</li>
<li>《Crytography and network security principles and practice 》</li>
</ul>
<p>ps：持續更新內容當中</p>
]]></content>
      
        <categories>
            
            <category> Cryptography </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Note </tag>
            
            <tag> Cryptography </tag>
            
            <tag> Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017 10月份Github 5大受歡迎的資安工具和目錄]]></title>
      <url>/2017/11/02/top5gitsectool/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><ul>
<li>文章來源：<a href="https://medium.com/hack-with-github/top-5-security-tools-october-2017-76ab31834efd" target="_blank" rel="noopener">https://medium.com/hack-with-github/top-5-security-tools-october-2017-76ab31834efd</a></li>
</ul>
<p>Hack with Github在Medium上發布了他們10月份中最受矚目的5大工具和目錄。而所發布的工具以及目錄如下：</p>
<h1 id="Awesome-Red-Teaming"><a href="#Awesome-Red-Teaming" class="headerlink" title="Awesome Red Teaming"></a><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming" target="_blank" rel="noopener">Awesome Red Teaming</a></h1><p>List of Awesome Red Team / Red Teaming Resources</p>
<p>This list is for anyone wishing to learn about Red Teaming but do not have a starting point.</p>
<p>Anyway, this is a living resources and will update regularly with latest Adversarial Tactics and Techniques.</p>
<p>You can help by sending Pull Requests to add more information.</p>
<h1 id="Awesome-Security"><a href="#Awesome-Security" class="headerlink" title="Awesome Security"></a><a href="https://github.com/qazbnm456/awesome-web-security" target="_blank" rel="noopener">Awesome Security</a></h1><p>A list of Web Security materials and resources for learning the cutting edge penetrating technique.</p>
<h1 id="Awesome-Yara"><a href="#Awesome-Yara" class="headerlink" title="Awesome Yara"></a><a href="https://github.com/InQuest/awesome-yara" target="_blank" rel="noopener">Awesome Yara</a></h1><p>A curated list of awesome YARA rules, tools, and resources.</p>
<h1 id="Awesome-Hacking"><a href="#Awesome-Hacking" class="headerlink" title="Awesome Hacking"></a><a href="https://github.com/vitalysim/Awesome-Hacking-Resources" target="_blank" rel="noopener">Awesome Hacking</a></h1><p>A collection of hacking and penetration testing resouces to make you better!</p>
<h1 id="Deceptiveidn"><a href="#Deceptiveidn" class="headerlink" title="Deceptiveidn"></a><a href="https://github.com/trailofbits/deceptiveidn" target="_blank" rel="noopener">Deceptiveidn</a></h1><p>Phishers are still using Internationalized Domain Names to trick users. This project uses computer vision to automatically check if IDNs have a deceptive reading.</p>
<h1 id="3-大BlackHat-Arsenal工具大放送"><a href="#3-大BlackHat-Arsenal工具大放送" class="headerlink" title="3 大BlackHat Arsenal工具大放送"></a>3 大BlackHat Arsenal工具大放送</h1><p>以下3個工具是在BlackHat arsenal裡面大放光芒，備受歡迎的。</p>
<h1 id="2FAssassin"><a href="#2FAssassin" class="headerlink" title="2FAssassin"></a><a href="https://github.com/maxwellkoh/2FAssassin" target="_blank" rel="noopener">2FAssassin</a></h1><p>The tool exploits the common vulnerabilities that caused private keys leakage.</p>
<h1 id="WHID-Injector"><a href="#WHID-Injector" class="headerlink" title="WHID Injector"></a><a href="https://github.com/whid-injector/WHID" target="_blank" rel="noopener">WHID Injector</a></h1><p>WiFi HID Injector for Fun &amp; Profit</p>
<h1 id="CERTitude"><a href="#CERTitude" class="headerlink" title="CERTitude"></a><a href="https://github.com/CERT-W/certitude" target="_blank" rel="noopener">CERTitude</a></h1><p>CERTitude is a Python-based tool which aims at assessing the compromised perimeter during incident response assignments. It allows analysts to perform large scale scans of Windows-based information systems by searching for behavioural patterns described in IOC (Indicator Of Compromise) files.</p>
<p>Notable features:</p>
<ul>
<li>Ability to scan hosts in a way that prevents the target workstation from knowing what the investigator is searching for</li>
<li>Ability to retrieve some pieces of data from the hosts</li>
<li>Multiple scanner instances (for IOCs and/or hash scans) can be run at the same time for parallel scanning</li>
<li>Built with security considerations in mind (protected database, secure communications with hosts using IPSec)</li>
</ul>
<h1 id="其他有趣的Tweet"><a href="#其他有趣的Tweet" class="headerlink" title="其他有趣的Tweet"></a>其他有趣的Tweet</h1><p>想懂得更多的也可以看看哦。</p>
<h1 id="PCI-Express-DIY-hacking-toolkit"><a href="#PCI-Express-DIY-hacking-toolkit" class="headerlink" title="PCI Express DIY hacking toolkit"></a><a href="https://github.com/Cr4sh/s6_pcie_microblaze" target="_blank" rel="noopener">PCI Express DIY hacking toolkit</a></h1><p>This repository contains a set of tools and proof of concepts related to PCI-E bus and DMA attacks.</p>
<h1 id="jSQL-Injection-automate-tool"><a href="#jSQL-Injection-automate-tool" class="headerlink" title="jSQL Injection automate tool"></a><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">jSQL Injection automate tool</a></h1><p>jSQL Injection is a Java application for automatic SQL database injection.</p>
<h1 id="Radare2"><a href="#Radare2" class="headerlink" title="Radare2"></a><a href="https://github.com/radare/radare2" target="_blank" rel="noopener">Radare2</a></h1><p>r2 is a rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files.</p>
<p>Radare project started as a forensics tool, a scriptable commandline hexadecimal editor able to open disk files, but later support for analyzing binaries, disassembling code, debugging programs, attaching to remote gdb servers, ..</p>
<h1 id="krackattacks-test-ap-ft"><a href="#krackattacks-test-ap-ft" class="headerlink" title="krackattacks-test-ap-ft"></a><a href="https://github.com/vanhoefm/krackattacks-test-ap-ft" target="_blank" rel="noopener">krackattacks-test-ap-ft</a></h1><p>This script tests if APs are affected by CVE-2017-13082 (KRACK attack)</p>
<h1 id="relative-url-extractor"><a href="#relative-url-extractor" class="headerlink" title="relative-url-extractor"></a><a href="https://github.com/jobertabma/relative-url-extractor" target="_blank" rel="noopener">relative-url-extractor</a></h1><p>During reconnaissance (recon) it is often helpful to get a quick overview of all the relative endpoints in a file. These days web applications have frontend pipelines that make it harder for humans to understand minified code. This tool contains a nifty regular expression to find and extract the relative URLs in such files. This can help surface new targets for security researchers to look at. It can also be used to periodically compare the results of the same file, to see which new endpoints have been deployed. History has shown that this is a goldmine for bug bounty hunters.</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Security </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[脫壳學習指南(UNPACK LEARNING GUIDE)]]></title>
      <url>/2017/11/01/unpackguide/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="第一個步驟：學C語言"><a href="#第一個步驟：學C語言" class="headerlink" title="第一個步驟：學C語言"></a>第一個步驟：學C語言</h1><h2 id="推薦課程"><a href="#推薦課程" class="headerlink" title="推薦課程"></a>推薦課程</h2><p><a href="https://cs50.harvard.edu/" target="_blank" rel="noopener">CS50</a>- 學習電腦基本知識以及可以學習到C的編程技巧<br>Second Link: <a href="https://www.edx.org/course/introduction-computer-science-harvardx-cs50x" target="_blank" rel="noopener">https://www.edx.org/course/introduction-computer-science-harvardx-cs50x</a></p>
<h2 id="推薦書籍"><a href="#推薦書籍" class="headerlink" title="推薦書籍"></a>推薦書籍</h2><p><a href="https://goo.gl/9iRyB2" target="_blank" rel="noopener">C語言程序設計（The C Programming Language (2nd Edition), Brian W.Kernighan &amp; Dennis M.Ritchie著）</a><br><a href="https://goo.gl/qdBgsB" target="_blank" rel="noopener">C primer plus</a><br><a id="more"></a><br>需掌握内容：</p>
<h1 id="第二個步驟：學匯編語言"><a href="#第二個步驟：學匯編語言" class="headerlink" title="第二個步驟：學匯編語言"></a>第二個步驟：學匯編語言</h1><h2 id="推薦課程-1"><a href="#推薦課程-1" class="headerlink" title="推薦課程"></a>推薦課程</h2><p>滴水逆向第三期培訓 課程內容一覽<br>小甲魚匯編語言 課程內容一覽</p>
<h2 id="額外課程【自選】"><a href="#額外課程【自選】" class="headerlink" title="額外課程【自選】"></a>額外課程【自選】</h2><p>天草逆向資源VIP之50堂課</p>
<h2 id="推薦書籍-1"><a href="#推薦書籍-1" class="headerlink" title="推薦書籍"></a>推薦書籍</h2><p><a href="https://goo.gl/f1smbb" target="_blank" rel="noopener">王爽寫的《汇编语言》（第二版）</a> 附上此書的<a href="https://goo.gl/DCzzz3" target="_blank" rel="noopener">學習筆記，額外小知識和書裡練習的答案以及其解釋</a>。<br><a href="https://goo.gl/n2koA6" target="_blank" rel="noopener">Assembly Language for x86 Processors-Pearson KIP R. IRVINE (2014)</a></p>
<p>額外知識：<a href="https://www.pediy.com/kssd/index.html" target="_blank" rel="noopener">https://www.pediy.com/kssd/index.html</a> （可以專門看看一些大佬寫的匯編知識以及IA-64體系那系列的文章。）</p>
<p>再來，你就可以進入Linux方面的匯編。</p>
<h2 id="推薦書籍-2"><a href="#推薦書籍-2" class="headerlink" title="推薦書籍"></a>推薦書籍</h2><p><a href="https://goo.gl/3HvGWZ" target="_blank" rel="noopener">Professional Assembly Language</a><br><a href="https://goo.gl/D4BEJp" target="_blank" rel="noopener">Assembly language step by step programming with linux</a></p>
<p>然後，便可以開始學習x64的匯編語言</p>
<h2 id="推薦文章"><a href="#推薦文章" class="headerlink" title="推薦文章"></a>推薦文章</h2><p><a href="http://bbs.pediy.com/thread-43967.htm" target="_blank" rel="noopener">Windows X64汇编入门（1）</a><br><a href="http://bbs.pediy.com/thread-44078.htm" target="_blank" rel="noopener">Windows X64汇编入门（2）</a><br><a href="https://software.intel.com/en-us/articles/introduction-to-x64-assembly" target="_blank" rel="noopener">Introduction-to-x64-assembly</a><br><a href="http://www.ntcore.com/Files/vista_x64.htm" target="_blank" rel="noopener">Moving to x64</a>       <a href="https://bbs.pediy.com/thread-201777.htm" target="_blank" rel="noopener">深入Windows X64调试</a> <a href="http://www.codemachine.com/article_x64deepdive.html" target="_blank" rel="noopener">英文版</a>         </p>
<h2 id="推薦課程-2"><a href="#推薦課程-2" class="headerlink" title="推薦課程"></a>推薦課程</h2><p><a href="http://opensecuritytraining.info/IntroX86.html" target="_blank" rel="noopener">Introductory Intel x86-X64: Architecture, Assembly, Applications, &amp; Alliteration</a></p>
<p>需掌握内容：</p>
<p>可延伸路线：學習<a href="https://rupigcute.wixsite.com/quantiumtown/reverse-engineering" target="_blank" rel="noopener">逆向工程</a></p>
<p>第三個步驟：學編譯器<br>推薦課程：<a href="https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about" target="_blank" rel="noopener">Compilers</a><br>推薦書本：無</p>
<h1 id="第四步驟：學Win32编程-Windows-API"><a href="#第四步驟：學Win32编程-Windows-API" class="headerlink" title="第四步驟：學Win32编程 + Windows API"></a>第四步驟：學Win32编程 + Windows API</h1><h2 id="推薦文章："><a href="#推薦文章：" class="headerlink" title="推薦文章："></a>推薦文章：</h2><p>英文版：<a href="http://win32assembly.programminghorizon.com/tutorials.html" target="_blank" rel="noopener">http://win32assembly.programminghorizon.com/tutorials.html</a><br>翻譯版如下：作 者: kanghtta<br><a href="http://bbs.pediy.com/showthread.php?t=55783" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=55783</a><br><a href="http://bbs.pediy.com/showthread.php?t=55784" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=55784</a><br><a href="http://bbs.pediy.com/showthread.php?t=60320" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60320</a><br><a href="http://bbs.pediy.com/showthread.php?t=60504" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60504</a><br><a href="http://bbs.pediy.com/showthread.php?t=60534" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60534</a><br><a href="http://bbs.pediy.com/showthread.php?t=60591" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60591</a><br><a href="http://bbs.pediy.com/showthread.php?t=60886" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60886</a><br><a href="http://bbs.pediy.com/showthread.php?t=60919" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=60919</a><br><a href="http://bbs.pediy.com/showthread.php?t=64082" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=64082</a><br><a href="http://bbs.pediy.com/showthread.php?t=64101" target="_blank" rel="noopener">http://bbs.pediy.com/showthread.php?t=64101</a></p>
<h2 id="推薦書本："><a href="#推薦書本：" class="headerlink" title="推薦書本："></a>推薦書本：</h2><p>Charles Petzold著的《Windows程序设计》：<a href="https://goo.gl/zUwEuw" target="_blank" rel="noopener">中文版</a>  <a href="https://goo.gl/cmunje" target="_blank" rel="noopener">英文版</a>。<br>罗云彬著的《Windows环境下32位汇编语言程序设计》，它以MASM汇编为讲解平台。</p>
<p>【貼心提醒：建議直接看<a href="https://goo.gl/AUG5xp" target="_blank" rel="noopener">Win32ASMTRK.chm</a> 內含罗云彬 &amp; Iczelion &amp; T$，三位大大的教程】</p>
<h1 id="第五步驟：學脫壳"><a href="#第五步驟：學脫壳" class="headerlink" title="第五步驟：學脫壳"></a>第五步驟：學脫壳</h1><p>接下來可以正式學習脫殼有關的課程<br>推薦書本：<a href="https://goo.gl/J5E6ia" target="_blank" rel="noopener">加密解密（第三版）</a> &amp;  <a href="https://goo.gl/PNJUuY" target="_blank" rel="noopener">軟件加密技術內幕</a><br>P/s:學習以下課程可以參考上面2本書，來輔助你掌握得更快。</p>
<p>課程綱要<br>第一课 PE格式<br>第二课 SEH技術<br>第三课 認識壳<br>第四课 常見的壓縮壳和加密壳<br>第五课 文件類型分析<br>第六课 尋找OEP<br>第七课 Dump內存映像<br>第八课 重建输入表<br>第九课 手動確定IAT的地址與大小<br>第十课 DLL文件脫壳<br>第十一课 優化与自校檢去除<br>第十二课 ASProtect 2.x壳</p>
<p>和課程有關聯的更多內容：<a href="https://bbs.pediy.com/thread-52042.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-52042.htm</a></p>
]]></content>
      
        <categories>
            
            <category> Learning Guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guide </tag>
            
            <tag> Security </tag>
            
            <tag> Unpack </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
